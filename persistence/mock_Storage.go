//go:build testing

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
/*
 * SPDX-FileCopyrightText: 2025 Siemens AG
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Author: Michael Adler <michael.adler@siemens.com>
 */

package persistence

import (
	"context"

	"github.com/siemens/wfx/generated/api"
	mock "github.com/stretchr/testify/mock"
)

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

type MockStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorage) EXPECT() *MockStorage_Expecter {
	return &MockStorage_Expecter{mock: &_m.Mock}
}

// CheckHealth provides a mock function for the type MockStorage
func (_mock *MockStorage) CheckHealth(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CheckHealth")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_CheckHealth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckHealth'
type MockStorage_CheckHealth_Call struct {
	*mock.Call
}

// CheckHealth is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStorage_Expecter) CheckHealth(ctx interface{}) *MockStorage_CheckHealth_Call {
	return &MockStorage_CheckHealth_Call{Call: _e.mock.On("CheckHealth", ctx)}
}

func (_c *MockStorage_CheckHealth_Call) Run(run func(ctx context.Context)) *MockStorage_CheckHealth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorage_CheckHealth_Call) Return(err error) *MockStorage_CheckHealth_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_CheckHealth_Call) RunAndReturn(run func(ctx context.Context) error) *MockStorage_CheckHealth_Call {
	_c.Call.Return(run)
	return _c
}

// CreateJob provides a mock function for the type MockStorage
func (_mock *MockStorage) CreateJob(ctx context.Context, job *api.Job) (*api.Job, error) {
	ret := _mock.Called(ctx, job)

	if len(ret) == 0 {
		panic("no return value specified for CreateJob")
	}

	var r0 *api.Job
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *api.Job) (*api.Job, error)); ok {
		return returnFunc(ctx, job)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *api.Job) *api.Job); ok {
		r0 = returnFunc(ctx, job)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Job)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *api.Job) error); ok {
		r1 = returnFunc(ctx, job)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_CreateJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateJob'
type MockStorage_CreateJob_Call struct {
	*mock.Call
}

// CreateJob is a helper method to define mock.On call
//   - ctx context.Context
//   - job *api.Job
func (_e *MockStorage_Expecter) CreateJob(ctx interface{}, job interface{}) *MockStorage_CreateJob_Call {
	return &MockStorage_CreateJob_Call{Call: _e.mock.On("CreateJob", ctx, job)}
}

func (_c *MockStorage_CreateJob_Call) Run(run func(ctx context.Context, job *api.Job)) *MockStorage_CreateJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *api.Job
		if args[1] != nil {
			arg1 = args[1].(*api.Job)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_CreateJob_Call) Return(job1 *api.Job, err error) *MockStorage_CreateJob_Call {
	_c.Call.Return(job1, err)
	return _c
}

func (_c *MockStorage_CreateJob_Call) RunAndReturn(run func(ctx context.Context, job *api.Job) (*api.Job, error)) *MockStorage_CreateJob_Call {
	_c.Call.Return(run)
	return _c
}

// CreateWorkflow provides a mock function for the type MockStorage
func (_mock *MockStorage) CreateWorkflow(ctx context.Context, workflow *api.Workflow) (*api.Workflow, error) {
	ret := _mock.Called(ctx, workflow)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkflow")
	}

	var r0 *api.Workflow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *api.Workflow) (*api.Workflow, error)); ok {
		return returnFunc(ctx, workflow)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *api.Workflow) *api.Workflow); ok {
		r0 = returnFunc(ctx, workflow)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Workflow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *api.Workflow) error); ok {
		r1 = returnFunc(ctx, workflow)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_CreateWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWorkflow'
type MockStorage_CreateWorkflow_Call struct {
	*mock.Call
}

// CreateWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - workflow *api.Workflow
func (_e *MockStorage_Expecter) CreateWorkflow(ctx interface{}, workflow interface{}) *MockStorage_CreateWorkflow_Call {
	return &MockStorage_CreateWorkflow_Call{Call: _e.mock.On("CreateWorkflow", ctx, workflow)}
}

func (_c *MockStorage_CreateWorkflow_Call) Run(run func(ctx context.Context, workflow *api.Workflow)) *MockStorage_CreateWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *api.Workflow
		if args[1] != nil {
			arg1 = args[1].(*api.Workflow)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_CreateWorkflow_Call) Return(workflow1 *api.Workflow, err error) *MockStorage_CreateWorkflow_Call {
	_c.Call.Return(workflow1, err)
	return _c
}

func (_c *MockStorage_CreateWorkflow_Call) RunAndReturn(run func(ctx context.Context, workflow *api.Workflow) (*api.Workflow, error)) *MockStorage_CreateWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteJob provides a mock function for the type MockStorage
func (_mock *MockStorage) DeleteJob(ctx context.Context, jobID string) error {
	ret := _mock.Called(ctx, jobID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteJob")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, jobID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_DeleteJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteJob'
type MockStorage_DeleteJob_Call struct {
	*mock.Call
}

// DeleteJob is a helper method to define mock.On call
//   - ctx context.Context
//   - jobID string
func (_e *MockStorage_Expecter) DeleteJob(ctx interface{}, jobID interface{}) *MockStorage_DeleteJob_Call {
	return &MockStorage_DeleteJob_Call{Call: _e.mock.On("DeleteJob", ctx, jobID)}
}

func (_c *MockStorage_DeleteJob_Call) Run(run func(ctx context.Context, jobID string)) *MockStorage_DeleteJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_DeleteJob_Call) Return(err error) *MockStorage_DeleteJob_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_DeleteJob_Call) RunAndReturn(run func(ctx context.Context, jobID string) error) *MockStorage_DeleteJob_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteWorkflow provides a mock function for the type MockStorage
func (_mock *MockStorage) DeleteWorkflow(ctx context.Context, name string) error {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkflow")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_DeleteWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteWorkflow'
type MockStorage_DeleteWorkflow_Call struct {
	*mock.Call
}

// DeleteWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockStorage_Expecter) DeleteWorkflow(ctx interface{}, name interface{}) *MockStorage_DeleteWorkflow_Call {
	return &MockStorage_DeleteWorkflow_Call{Call: _e.mock.On("DeleteWorkflow", ctx, name)}
}

func (_c *MockStorage_DeleteWorkflow_Call) Run(run func(ctx context.Context, name string)) *MockStorage_DeleteWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_DeleteWorkflow_Call) Return(err error) *MockStorage_DeleteWorkflow_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_DeleteWorkflow_Call) RunAndReturn(run func(ctx context.Context, name string) error) *MockStorage_DeleteWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// GetJob provides a mock function for the type MockStorage
func (_mock *MockStorage) GetJob(ctx context.Context, jobID string, fetchParams FetchParams) (*api.Job, error) {
	ret := _mock.Called(ctx, jobID, fetchParams)

	if len(ret) == 0 {
		panic("no return value specified for GetJob")
	}

	var r0 *api.Job
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, FetchParams) (*api.Job, error)); ok {
		return returnFunc(ctx, jobID, fetchParams)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, FetchParams) *api.Job); ok {
		r0 = returnFunc(ctx, jobID, fetchParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Job)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, FetchParams) error); ok {
		r1 = returnFunc(ctx, jobID, fetchParams)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_GetJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJob'
type MockStorage_GetJob_Call struct {
	*mock.Call
}

// GetJob is a helper method to define mock.On call
//   - ctx context.Context
//   - jobID string
//   - fetchParams FetchParams
func (_e *MockStorage_Expecter) GetJob(ctx interface{}, jobID interface{}, fetchParams interface{}) *MockStorage_GetJob_Call {
	return &MockStorage_GetJob_Call{Call: _e.mock.On("GetJob", ctx, jobID, fetchParams)}
}

func (_c *MockStorage_GetJob_Call) Run(run func(ctx context.Context, jobID string, fetchParams FetchParams)) *MockStorage_GetJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 FetchParams
		if args[2] != nil {
			arg2 = args[2].(FetchParams)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockStorage_GetJob_Call) Return(job *api.Job, err error) *MockStorage_GetJob_Call {
	_c.Call.Return(job, err)
	return _c
}

func (_c *MockStorage_GetJob_Call) RunAndReturn(run func(ctx context.Context, jobID string, fetchParams FetchParams) (*api.Job, error)) *MockStorage_GetJob_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkflow provides a mock function for the type MockStorage
func (_mock *MockStorage) GetWorkflow(ctx context.Context, name string) (*api.Workflow, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkflow")
	}

	var r0 *api.Workflow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*api.Workflow, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *api.Workflow); ok {
		r0 = returnFunc(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Workflow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_GetWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkflow'
type MockStorage_GetWorkflow_Call struct {
	*mock.Call
}

// GetWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockStorage_Expecter) GetWorkflow(ctx interface{}, name interface{}) *MockStorage_GetWorkflow_Call {
	return &MockStorage_GetWorkflow_Call{Call: _e.mock.On("GetWorkflow", ctx, name)}
}

func (_c *MockStorage_GetWorkflow_Call) Run(run func(ctx context.Context, name string)) *MockStorage_GetWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_GetWorkflow_Call) Return(workflow *api.Workflow, err error) *MockStorage_GetWorkflow_Call {
	_c.Call.Return(workflow, err)
	return _c
}

func (_c *MockStorage_GetWorkflow_Call) RunAndReturn(run func(ctx context.Context, name string) (*api.Workflow, error)) *MockStorage_GetWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// Initialize provides a mock function for the type MockStorage
func (_mock *MockStorage) Initialize(options string) error {
	ret := _mock.Called(options)

	if len(ret) == 0 {
		panic("no return value specified for Initialize")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(options)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_Initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialize'
type MockStorage_Initialize_Call struct {
	*mock.Call
}

// Initialize is a helper method to define mock.On call
//   - options string
func (_e *MockStorage_Expecter) Initialize(options interface{}) *MockStorage_Initialize_Call {
	return &MockStorage_Initialize_Call{Call: _e.mock.On("Initialize", options)}
}

func (_c *MockStorage_Initialize_Call) Run(run func(options string)) *MockStorage_Initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorage_Initialize_Call) Return(err error) *MockStorage_Initialize_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_Initialize_Call) RunAndReturn(run func(options string) error) *MockStorage_Initialize_Call {
	_c.Call.Return(run)
	return _c
}

// QueryJobs provides a mock function for the type MockStorage
func (_mock *MockStorage) QueryJobs(ctx context.Context, filterParams FilterParams, sortParams SortParams, paginationParams PaginationParams) (*api.PaginatedJobList, error) {
	ret := _mock.Called(ctx, filterParams, sortParams, paginationParams)

	if len(ret) == 0 {
		panic("no return value specified for QueryJobs")
	}

	var r0 *api.PaginatedJobList
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, FilterParams, SortParams, PaginationParams) (*api.PaginatedJobList, error)); ok {
		return returnFunc(ctx, filterParams, sortParams, paginationParams)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, FilterParams, SortParams, PaginationParams) *api.PaginatedJobList); ok {
		r0 = returnFunc(ctx, filterParams, sortParams, paginationParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.PaginatedJobList)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, FilterParams, SortParams, PaginationParams) error); ok {
		r1 = returnFunc(ctx, filterParams, sortParams, paginationParams)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_QueryJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryJobs'
type MockStorage_QueryJobs_Call struct {
	*mock.Call
}

// QueryJobs is a helper method to define mock.On call
//   - ctx context.Context
//   - filterParams FilterParams
//   - sortParams SortParams
//   - paginationParams PaginationParams
func (_e *MockStorage_Expecter) QueryJobs(ctx interface{}, filterParams interface{}, sortParams interface{}, paginationParams interface{}) *MockStorage_QueryJobs_Call {
	return &MockStorage_QueryJobs_Call{Call: _e.mock.On("QueryJobs", ctx, filterParams, sortParams, paginationParams)}
}

func (_c *MockStorage_QueryJobs_Call) Run(run func(ctx context.Context, filterParams FilterParams, sortParams SortParams, paginationParams PaginationParams)) *MockStorage_QueryJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 FilterParams
		if args[1] != nil {
			arg1 = args[1].(FilterParams)
		}
		var arg2 SortParams
		if args[2] != nil {
			arg2 = args[2].(SortParams)
		}
		var arg3 PaginationParams
		if args[3] != nil {
			arg3 = args[3].(PaginationParams)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockStorage_QueryJobs_Call) Return(paginatedJobList *api.PaginatedJobList, err error) *MockStorage_QueryJobs_Call {
	_c.Call.Return(paginatedJobList, err)
	return _c
}

func (_c *MockStorage_QueryJobs_Call) RunAndReturn(run func(ctx context.Context, filterParams FilterParams, sortParams SortParams, paginationParams PaginationParams) (*api.PaginatedJobList, error)) *MockStorage_QueryJobs_Call {
	_c.Call.Return(run)
	return _c
}

// QueryWorkflows provides a mock function for the type MockStorage
func (_mock *MockStorage) QueryWorkflows(ctx context.Context, sortParams SortParams, paginationParams PaginationParams) (*api.PaginatedWorkflowList, error) {
	ret := _mock.Called(ctx, sortParams, paginationParams)

	if len(ret) == 0 {
		panic("no return value specified for QueryWorkflows")
	}

	var r0 *api.PaginatedWorkflowList
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, SortParams, PaginationParams) (*api.PaginatedWorkflowList, error)); ok {
		return returnFunc(ctx, sortParams, paginationParams)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, SortParams, PaginationParams) *api.PaginatedWorkflowList); ok {
		r0 = returnFunc(ctx, sortParams, paginationParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.PaginatedWorkflowList)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, SortParams, PaginationParams) error); ok {
		r1 = returnFunc(ctx, sortParams, paginationParams)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_QueryWorkflows_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryWorkflows'
type MockStorage_QueryWorkflows_Call struct {
	*mock.Call
}

// QueryWorkflows is a helper method to define mock.On call
//   - ctx context.Context
//   - sortParams SortParams
//   - paginationParams PaginationParams
func (_e *MockStorage_Expecter) QueryWorkflows(ctx interface{}, sortParams interface{}, paginationParams interface{}) *MockStorage_QueryWorkflows_Call {
	return &MockStorage_QueryWorkflows_Call{Call: _e.mock.On("QueryWorkflows", ctx, sortParams, paginationParams)}
}

func (_c *MockStorage_QueryWorkflows_Call) Run(run func(ctx context.Context, sortParams SortParams, paginationParams PaginationParams)) *MockStorage_QueryWorkflows_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 SortParams
		if args[1] != nil {
			arg1 = args[1].(SortParams)
		}
		var arg2 PaginationParams
		if args[2] != nil {
			arg2 = args[2].(PaginationParams)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockStorage_QueryWorkflows_Call) Return(paginatedWorkflowList *api.PaginatedWorkflowList, err error) *MockStorage_QueryWorkflows_Call {
	_c.Call.Return(paginatedWorkflowList, err)
	return _c
}

func (_c *MockStorage_QueryWorkflows_Call) RunAndReturn(run func(ctx context.Context, sortParams SortParams, paginationParams PaginationParams) (*api.PaginatedWorkflowList, error)) *MockStorage_QueryWorkflows_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function for the type MockStorage
func (_mock *MockStorage) Shutdown() {
	_mock.Called()
	return
}

// MockStorage_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type MockStorage_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
func (_e *MockStorage_Expecter) Shutdown() *MockStorage_Shutdown_Call {
	return &MockStorage_Shutdown_Call{Call: _e.mock.On("Shutdown")}
}

func (_c *MockStorage_Shutdown_Call) Run(run func()) *MockStorage_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStorage_Shutdown_Call) Return() *MockStorage_Shutdown_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockStorage_Shutdown_Call) RunAndReturn(run func()) *MockStorage_Shutdown_Call {
	_c.Run(run)
	return _c
}

// UpdateJob provides a mock function for the type MockStorage
func (_mock *MockStorage) UpdateJob(ctx context.Context, job *api.Job, request JobUpdate) (*api.Job, error) {
	ret := _mock.Called(ctx, job, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateJob")
	}

	var r0 *api.Job
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *api.Job, JobUpdate) (*api.Job, error)); ok {
		return returnFunc(ctx, job, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *api.Job, JobUpdate) *api.Job); ok {
		r0 = returnFunc(ctx, job, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Job)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *api.Job, JobUpdate) error); ok {
		r1 = returnFunc(ctx, job, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_UpdateJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateJob'
type MockStorage_UpdateJob_Call struct {
	*mock.Call
}

// UpdateJob is a helper method to define mock.On call
//   - ctx context.Context
//   - job *api.Job
//   - request JobUpdate
func (_e *MockStorage_Expecter) UpdateJob(ctx interface{}, job interface{}, request interface{}) *MockStorage_UpdateJob_Call {
	return &MockStorage_UpdateJob_Call{Call: _e.mock.On("UpdateJob", ctx, job, request)}
}

func (_c *MockStorage_UpdateJob_Call) Run(run func(ctx context.Context, job *api.Job, request JobUpdate)) *MockStorage_UpdateJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *api.Job
		if args[1] != nil {
			arg1 = args[1].(*api.Job)
		}
		var arg2 JobUpdate
		if args[2] != nil {
			arg2 = args[2].(JobUpdate)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockStorage_UpdateJob_Call) Return(job1 *api.Job, err error) *MockStorage_UpdateJob_Call {
	_c.Call.Return(job1, err)
	return _c
}

func (_c *MockStorage_UpdateJob_Call) RunAndReturn(run func(ctx context.Context, job *api.Job, request JobUpdate) (*api.Job, error)) *MockStorage_UpdateJob_Call {
	_c.Call.Return(run)
	return _c
}
