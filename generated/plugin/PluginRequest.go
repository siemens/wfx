// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package plugin

import (
	flatbuffers "github.com/google/flatbuffers/go"

	generated__plugin__client "github.com/siemens/wfx/generated/plugin/client"
)

type PluginRequestT struct {
	Version uint64                              `json:"version"`
	Cookie  uint64                              `json:"cookie"`
	Request *generated__plugin__client.RequestT `json:"request"`
}

func (t *PluginRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	requestOffset := t.Request.Pack(builder)
	PluginRequestStart(builder)
	PluginRequestAddVersion(builder, t.Version)
	PluginRequestAddCookie(builder, t.Cookie)
	PluginRequestAddRequest(builder, requestOffset)
	return PluginRequestEnd(builder)
}

func (rcv *PluginRequest) UnPackTo(t *PluginRequestT) {
	t.Version = rcv.Version()
	t.Cookie = rcv.Cookie()
	t.Request = rcv.Request(nil).UnPack()
}

func (rcv *PluginRequest) UnPack() *PluginRequestT {
	if rcv == nil {
		return nil
	}
	t := &PluginRequestT{}
	rcv.UnPackTo(t)
	return t
}

type PluginRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsPluginRequest(buf []byte, offset flatbuffers.UOffsetT) *PluginRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PluginRequest{}
	x.Init(buf, n+offset)
	return x
}

func FinishPluginRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsPluginRequest(buf []byte, offset flatbuffers.UOffsetT) *PluginRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PluginRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedPluginRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *PluginRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PluginRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PluginRequest) Version() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PluginRequest) MutateVersion(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *PluginRequest) Cookie() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PluginRequest) MutateCookie(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *PluginRequest) Request(obj *generated__plugin__client.Request) *generated__plugin__client.Request {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(generated__plugin__client.Request)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func PluginRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func PluginRequestAddVersion(builder *flatbuffers.Builder, version uint64) {
	builder.PrependUint64Slot(0, version, 0)
}
func PluginRequestAddCookie(builder *flatbuffers.Builder, cookie uint64) {
	builder.PrependUint64Slot(1, cookie, 0)
}
func PluginRequestAddRequest(builder *flatbuffers.Builder, request flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(request), 0)
}
func PluginRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
