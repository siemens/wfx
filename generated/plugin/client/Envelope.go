// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package client

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EnvelopeT struct {
	Name   string   `json:"name"`
	Values []string `json:"values"`
}

func (t *EnvelopeT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	valuesOffset := flatbuffers.UOffsetT(0)
	if t.Values != nil {
		valuesLength := len(t.Values)
		valuesOffsets := make([]flatbuffers.UOffsetT, valuesLength)
		for j := 0; j < valuesLength; j++ {
			valuesOffsets[j] = builder.CreateString(t.Values[j])
		}
		EnvelopeStartValuesVector(builder, valuesLength)
		for j := valuesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(valuesOffsets[j])
		}
		valuesOffset = builder.EndVector(valuesLength)
	}
	EnvelopeStart(builder)
	EnvelopeAddName(builder, nameOffset)
	EnvelopeAddValues(builder, valuesOffset)
	return EnvelopeEnd(builder)
}

func (rcv *Envelope) UnPackTo(t *EnvelopeT) {
	t.Name = string(rcv.Name())
	valuesLength := rcv.ValuesLength()
	t.Values = make([]string, valuesLength)
	for j := 0; j < valuesLength; j++ {
		t.Values[j] = string(rcv.Values(j))
	}
}

func (rcv *Envelope) UnPack() *EnvelopeT {
	if rcv == nil {
		return nil
	}
	t := &EnvelopeT{}
	rcv.UnPackTo(t)
	return t
}

type Envelope struct {
	_tab flatbuffers.Table
}

func GetRootAsEnvelope(buf []byte, offset flatbuffers.UOffsetT) *Envelope {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Envelope{}
	x.Init(buf, n+offset)
	return x
}

func FinishEnvelopeBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsEnvelope(buf []byte, offset flatbuffers.UOffsetT) *Envelope {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Envelope{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEnvelopeBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Envelope) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Envelope) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Envelope) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Envelope) Values(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Envelope) ValuesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func EnvelopeStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func EnvelopeAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func EnvelopeAddValues(builder *flatbuffers.Builder, values flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(values), 0)
}
func EnvelopeStartValuesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EnvelopeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
