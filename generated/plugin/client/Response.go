// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package client

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ResponseT struct {
	Status   ResponseStatus `json:"status"`
	Envelope []*EnvelopeT   `json:"envelope"`
	Content  []byte         `json:"content"`
}

func (t *ResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	envelopeOffset := flatbuffers.UOffsetT(0)
	if t.Envelope != nil {
		envelopeLength := len(t.Envelope)
		envelopeOffsets := make([]flatbuffers.UOffsetT, envelopeLength)
		for j := 0; j < envelopeLength; j++ {
			envelopeOffsets[j] = t.Envelope[j].Pack(builder)
		}
		ResponseStartEnvelopeVector(builder, envelopeLength)
		for j := envelopeLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(envelopeOffsets[j])
		}
		envelopeOffset = builder.EndVector(envelopeLength)
	}
	contentOffset := flatbuffers.UOffsetT(0)
	if t.Content != nil {
		contentOffset = builder.CreateByteString(t.Content)
	}
	ResponseStart(builder)
	ResponseAddStatus(builder, t.Status)
	ResponseAddEnvelope(builder, envelopeOffset)
	ResponseAddContent(builder, contentOffset)
	return ResponseEnd(builder)
}

func (rcv *Response) UnPackTo(t *ResponseT) {
	t.Status = rcv.Status()
	envelopeLength := rcv.EnvelopeLength()
	t.Envelope = make([]*EnvelopeT, envelopeLength)
	for j := 0; j < envelopeLength; j++ {
		x := Envelope{}
		rcv.Envelope(&x, j)
		t.Envelope[j] = x.UnPack()
	}
	t.Content = rcv.ContentBytes()
}

func (rcv *Response) UnPack() *ResponseT {
	if rcv == nil {
		return nil
	}
	t := &ResponseT{}
	rcv.UnPackTo(t)
	return t
}

type Response struct {
	_tab flatbuffers.Table
}

func GetRootAsResponse(buf []byte, offset flatbuffers.UOffsetT) *Response {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Response{}
	x.Init(buf, n+offset)
	return x
}

func FinishResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsResponse(buf []byte, offset flatbuffers.UOffsetT) *Response {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Response{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Response) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Response) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Response) Status() ResponseStatus {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return ResponseStatus(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Response) MutateStatus(n ResponseStatus) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func (rcv *Response) Envelope(obj *Envelope, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Response) EnvelopeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Response) Content(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Response) ContentLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Response) ContentBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Response) MutateContent(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func ResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ResponseAddStatus(builder *flatbuffers.Builder, status ResponseStatus) {
	builder.PrependInt8Slot(0, int8(status), 0)
}
func ResponseAddEnvelope(builder *flatbuffers.Builder, envelope flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(envelope), 0)
}
func ResponseStartEnvelopeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ResponseAddContent(builder *flatbuffers.Builder, content flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(content), 0)
}
func ResponseStartContentVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func ResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
