// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package plugin

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PluginResponseT struct {
	Version uint64    `json:"version"`
	Cookie  uint64    `json:"cookie"`
	Payload *PayloadT `json:"payload"`
}

func (t *PluginResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	payloadOffset := t.Payload.Pack(builder)

	PluginResponseStart(builder)
	PluginResponseAddVersion(builder, t.Version)
	PluginResponseAddCookie(builder, t.Cookie)
	if t.Payload != nil {
		PluginResponseAddPayloadType(builder, t.Payload.Type)
	}
	PluginResponseAddPayload(builder, payloadOffset)
	return PluginResponseEnd(builder)
}

func (rcv *PluginResponse) UnPackTo(t *PluginResponseT) {
	t.Version = rcv.Version()
	t.Cookie = rcv.Cookie()
	payloadTable := flatbuffers.Table{}
	if rcv.Payload(&payloadTable) {
		t.Payload = rcv.PayloadType().UnPack(payloadTable)
	}
}

func (rcv *PluginResponse) UnPack() *PluginResponseT {
	if rcv == nil {
		return nil
	}
	t := &PluginResponseT{}
	rcv.UnPackTo(t)
	return t
}

type PluginResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsPluginResponse(buf []byte, offset flatbuffers.UOffsetT) *PluginResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PluginResponse{}
	x.Init(buf, n+offset)
	return x
}

func FinishPluginResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsPluginResponse(buf []byte, offset flatbuffers.UOffsetT) *PluginResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PluginResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedPluginResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *PluginResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PluginResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PluginResponse) Version() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PluginResponse) MutateVersion(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *PluginResponse) Cookie() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PluginResponse) MutateCookie(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *PluginResponse) PayloadType() Payload {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return Payload(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *PluginResponse) MutatePayloadType(n Payload) bool {
	return rcv._tab.MutateByteSlot(8, byte(n))
}

func (rcv *PluginResponse) Payload(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func PluginResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func PluginResponseAddVersion(builder *flatbuffers.Builder, version uint64) {
	builder.PrependUint64Slot(0, version, 0)
}
func PluginResponseAddCookie(builder *flatbuffers.Builder, cookie uint64) {
	builder.PrependUint64Slot(1, cookie, 0)
}
func PluginResponseAddPayloadType(builder *flatbuffers.Builder, payloadType Payload) {
	builder.PrependByteSlot(2, byte(payloadType), 0)
}
func PluginResponseAddPayload(builder *flatbuffers.Builder, payload flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(payload), 0)
}
func PluginResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
