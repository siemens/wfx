// SPDX-FileCopyrightText: The entgo authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/siemens/wfx/generated/api"
	"github.com/siemens/wfx/generated/ent/job"
	"github.com/siemens/wfx/generated/ent/workflow"
)

// WorkflowCreate is the builder for creating a Workflow entity.
type WorkflowCreate struct {
	config
	mutation *WorkflowMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (_c *WorkflowCreate) SetName(v string) *WorkflowCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *WorkflowCreate) SetDescription(v string) *WorkflowCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *WorkflowCreate) SetNillableDescription(v *string) *WorkflowCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetStates sets the "states" field.
func (_c *WorkflowCreate) SetStates(v []api.State) *WorkflowCreate {
	_c.mutation.SetStates(v)
	return _c
}

// SetTransitions sets the "transitions" field.
func (_c *WorkflowCreate) SetTransitions(v []api.Transition) *WorkflowCreate {
	_c.mutation.SetTransitions(v)
	return _c
}

// SetGroups sets the "groups" field.
func (_c *WorkflowCreate) SetGroups(v []api.Group) *WorkflowCreate {
	_c.mutation.SetGroups(v)
	return _c
}

// AddJobIDs adds the "jobs" edge to the Job entity by IDs.
func (_c *WorkflowCreate) AddJobIDs(ids ...string) *WorkflowCreate {
	_c.mutation.AddJobIDs(ids...)
	return _c
}

// AddJobs adds the "jobs" edges to the Job entity.
func (_c *WorkflowCreate) AddJobs(v ...*Job) *WorkflowCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddJobIDs(ids...)
}

// Mutation returns the WorkflowMutation object of the builder.
func (_c *WorkflowCreate) Mutation() *WorkflowMutation {
	return _c.mutation
}

// Save creates the Workflow in the database.
func (_c *WorkflowCreate) Save(ctx context.Context) (*Workflow, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *WorkflowCreate) SaveX(ctx context.Context) *Workflow {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *WorkflowCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *WorkflowCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *WorkflowCreate) check() error {
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Workflow.name"`)}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := workflow.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Workflow.name": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Description(); ok {
		if err := workflow.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Workflow.description": %w`, err)}
		}
	}
	if _, ok := _c.mutation.States(); !ok {
		return &ValidationError{Name: "states", err: errors.New(`ent: missing required field "Workflow.states"`)}
	}
	if _, ok := _c.mutation.Transitions(); !ok {
		return &ValidationError{Name: "transitions", err: errors.New(`ent: missing required field "Workflow.transitions"`)}
	}
	if _, ok := _c.mutation.Groups(); !ok {
		return &ValidationError{Name: "groups", err: errors.New(`ent: missing required field "Workflow.groups"`)}
	}
	return nil
}

func (_c *WorkflowCreate) sqlSave(ctx context.Context) (*Workflow, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *WorkflowCreate) createSpec() (*Workflow, *sqlgraph.CreateSpec) {
	var (
		_node = &Workflow{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(workflow.Table, sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(workflow.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(workflow.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.States(); ok {
		_spec.SetField(workflow.FieldStates, field.TypeJSON, value)
		_node.States = value
	}
	if value, ok := _c.mutation.Transitions(); ok {
		_spec.SetField(workflow.FieldTransitions, field.TypeJSON, value)
		_node.Transitions = value
	}
	if value, ok := _c.mutation.Groups(); ok {
		_spec.SetField(workflow.FieldGroups, field.TypeJSON, value)
		_node.Groups = value
	}
	if nodes := _c.mutation.JobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.JobsTable,
			Columns: []string{workflow.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WorkflowCreateBulk is the builder for creating many Workflow entities in bulk.
type WorkflowCreateBulk struct {
	config
	err      error
	builders []*WorkflowCreate
}

// Save creates the Workflow entities in the database.
func (_c *WorkflowCreateBulk) Save(ctx context.Context) ([]*Workflow, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Workflow, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkflowMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *WorkflowCreateBulk) SaveX(ctx context.Context) []*Workflow {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *WorkflowCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *WorkflowCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
