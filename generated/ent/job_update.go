// SPDX-FileCopyrightText: The entgo authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/siemens/wfx/generated/ent/history"
	"github.com/siemens/wfx/generated/ent/job"
	"github.com/siemens/wfx/generated/ent/predicate"
	"github.com/siemens/wfx/generated/ent/tag"
	"github.com/siemens/wfx/generated/ent/workflow"
	"github.com/siemens/wfx/generated/model"
)

// JobUpdate is the builder for updating Job entities.
type JobUpdate struct {
	config
	hooks    []Hook
	mutation *JobMutation
}

// Where appends a list predicates to the JobUpdate builder.
func (ju *JobUpdate) Where(ps ...predicate.Job) *JobUpdate {
	ju.mutation.Where(ps...)
	return ju
}

// SetStime sets the "stime" field.
func (ju *JobUpdate) SetStime(t time.Time) *JobUpdate {
	ju.mutation.SetStime(t)
	return ju
}

// SetNillableStime sets the "stime" field if the given value is not nil.
func (ju *JobUpdate) SetNillableStime(t *time.Time) *JobUpdate {
	if t != nil {
		ju.SetStime(*t)
	}
	return ju
}

// SetMtime sets the "mtime" field.
func (ju *JobUpdate) SetMtime(t time.Time) *JobUpdate {
	ju.mutation.SetMtime(t)
	return ju
}

// SetClientID sets the "client_id" field.
func (ju *JobUpdate) SetClientID(s string) *JobUpdate {
	ju.mutation.SetClientID(s)
	return ju
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (ju *JobUpdate) SetNillableClientID(s *string) *JobUpdate {
	if s != nil {
		ju.SetClientID(*s)
	}
	return ju
}

// SetDefinition sets the "definition" field.
func (ju *JobUpdate) SetDefinition(m map[string]interface{}) *JobUpdate {
	ju.mutation.SetDefinition(m)
	return ju
}

// ClearDefinition clears the value of the "definition" field.
func (ju *JobUpdate) ClearDefinition() *JobUpdate {
	ju.mutation.ClearDefinition()
	return ju
}

// SetStatus sets the "status" field.
func (ju *JobUpdate) SetStatus(ms model.JobStatus) *JobUpdate {
	ju.mutation.SetStatus(ms)
	return ju
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ju *JobUpdate) SetNillableStatus(ms *model.JobStatus) *JobUpdate {
	if ms != nil {
		ju.SetStatus(*ms)
	}
	return ju
}

// SetGroup sets the "group" field.
func (ju *JobUpdate) SetGroup(s string) *JobUpdate {
	ju.mutation.SetGroup(s)
	return ju
}

// SetNillableGroup sets the "group" field if the given value is not nil.
func (ju *JobUpdate) SetNillableGroup(s *string) *JobUpdate {
	if s != nil {
		ju.SetGroup(*s)
	}
	return ju
}

// ClearGroup clears the value of the "group" field.
func (ju *JobUpdate) ClearGroup() *JobUpdate {
	ju.mutation.ClearGroup()
	return ju
}

// SetWorkflowID sets the "workflow" edge to the Workflow entity by ID.
func (ju *JobUpdate) SetWorkflowID(id int) *JobUpdate {
	ju.mutation.SetWorkflowID(id)
	return ju
}

// SetNillableWorkflowID sets the "workflow" edge to the Workflow entity by ID if the given value is not nil.
func (ju *JobUpdate) SetNillableWorkflowID(id *int) *JobUpdate {
	if id != nil {
		ju = ju.SetWorkflowID(*id)
	}
	return ju
}

// SetWorkflow sets the "workflow" edge to the Workflow entity.
func (ju *JobUpdate) SetWorkflow(w *Workflow) *JobUpdate {
	return ju.SetWorkflowID(w.ID)
}

// AddHistoryIDs adds the "history" edge to the History entity by IDs.
func (ju *JobUpdate) AddHistoryIDs(ids ...int) *JobUpdate {
	ju.mutation.AddHistoryIDs(ids...)
	return ju
}

// AddHistory adds the "history" edges to the History entity.
func (ju *JobUpdate) AddHistory(h ...*History) *JobUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ju.AddHistoryIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (ju *JobUpdate) AddTagIDs(ids ...int) *JobUpdate {
	ju.mutation.AddTagIDs(ids...)
	return ju
}

// AddTags adds the "tags" edges to the Tag entity.
func (ju *JobUpdate) AddTags(t ...*Tag) *JobUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ju.AddTagIDs(ids...)
}

// Mutation returns the JobMutation object of the builder.
func (ju *JobUpdate) Mutation() *JobMutation {
	return ju.mutation
}

// ClearWorkflow clears the "workflow" edge to the Workflow entity.
func (ju *JobUpdate) ClearWorkflow() *JobUpdate {
	ju.mutation.ClearWorkflow()
	return ju
}

// ClearHistory clears all "history" edges to the History entity.
func (ju *JobUpdate) ClearHistory() *JobUpdate {
	ju.mutation.ClearHistory()
	return ju
}

// RemoveHistoryIDs removes the "history" edge to History entities by IDs.
func (ju *JobUpdate) RemoveHistoryIDs(ids ...int) *JobUpdate {
	ju.mutation.RemoveHistoryIDs(ids...)
	return ju
}

// RemoveHistory removes "history" edges to History entities.
func (ju *JobUpdate) RemoveHistory(h ...*History) *JobUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ju.RemoveHistoryIDs(ids...)
}

// ClearTags clears all "tags" edges to the Tag entity.
func (ju *JobUpdate) ClearTags() *JobUpdate {
	ju.mutation.ClearTags()
	return ju
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (ju *JobUpdate) RemoveTagIDs(ids ...int) *JobUpdate {
	ju.mutation.RemoveTagIDs(ids...)
	return ju
}

// RemoveTags removes "tags" edges to Tag entities.
func (ju *JobUpdate) RemoveTags(t ...*Tag) *JobUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ju.RemoveTagIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ju *JobUpdate) Save(ctx context.Context) (int, error) {
	ju.defaults()
	return withHooks(ctx, ju.sqlSave, ju.mutation, ju.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ju *JobUpdate) SaveX(ctx context.Context) int {
	affected, err := ju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ju *JobUpdate) Exec(ctx context.Context) error {
	_, err := ju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ju *JobUpdate) ExecX(ctx context.Context) {
	if err := ju.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ju *JobUpdate) defaults() {
	if _, ok := ju.mutation.Mtime(); !ok {
		v := job.UpdateDefaultMtime()
		ju.mutation.SetMtime(v)
	}
}

func (ju *JobUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(job.Table, job.Columns, sqlgraph.NewFieldSpec(job.FieldID, field.TypeString))
	if ps := ju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ju.mutation.Stime(); ok {
		_spec.SetField(job.FieldStime, field.TypeTime, value)
	}
	if value, ok := ju.mutation.Mtime(); ok {
		_spec.SetField(job.FieldMtime, field.TypeTime, value)
	}
	if value, ok := ju.mutation.ClientID(); ok {
		_spec.SetField(job.FieldClientID, field.TypeString, value)
	}
	if value, ok := ju.mutation.Definition(); ok {
		_spec.SetField(job.FieldDefinition, field.TypeJSON, value)
	}
	if ju.mutation.DefinitionCleared() {
		_spec.ClearField(job.FieldDefinition, field.TypeJSON)
	}
	if value, ok := ju.mutation.Status(); ok {
		_spec.SetField(job.FieldStatus, field.TypeJSON, value)
	}
	if value, ok := ju.mutation.Group(); ok {
		_spec.SetField(job.FieldGroup, field.TypeString, value)
	}
	if ju.mutation.GroupCleared() {
		_spec.ClearField(job.FieldGroup, field.TypeString)
	}
	if ju.mutation.WorkflowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.WorkflowTable,
			Columns: []string{job.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.WorkflowTable,
			Columns: []string{job.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ju.mutation.HistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.HistoryTable,
			Columns: []string{job.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.RemovedHistoryIDs(); len(nodes) > 0 && !ju.mutation.HistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.HistoryTable,
			Columns: []string{job.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.HistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.HistoryTable,
			Columns: []string{job.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ju.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   job.TagsTable,
			Columns: job.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.RemovedTagsIDs(); len(nodes) > 0 && !ju.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   job.TagsTable,
			Columns: job.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   job.TagsTable,
			Columns: job.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{job.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ju.mutation.done = true
	return n, nil
}

// JobUpdateOne is the builder for updating a single Job entity.
type JobUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JobMutation
}

// SetStime sets the "stime" field.
func (juo *JobUpdateOne) SetStime(t time.Time) *JobUpdateOne {
	juo.mutation.SetStime(t)
	return juo
}

// SetNillableStime sets the "stime" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableStime(t *time.Time) *JobUpdateOne {
	if t != nil {
		juo.SetStime(*t)
	}
	return juo
}

// SetMtime sets the "mtime" field.
func (juo *JobUpdateOne) SetMtime(t time.Time) *JobUpdateOne {
	juo.mutation.SetMtime(t)
	return juo
}

// SetClientID sets the "client_id" field.
func (juo *JobUpdateOne) SetClientID(s string) *JobUpdateOne {
	juo.mutation.SetClientID(s)
	return juo
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableClientID(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetClientID(*s)
	}
	return juo
}

// SetDefinition sets the "definition" field.
func (juo *JobUpdateOne) SetDefinition(m map[string]interface{}) *JobUpdateOne {
	juo.mutation.SetDefinition(m)
	return juo
}

// ClearDefinition clears the value of the "definition" field.
func (juo *JobUpdateOne) ClearDefinition() *JobUpdateOne {
	juo.mutation.ClearDefinition()
	return juo
}

// SetStatus sets the "status" field.
func (juo *JobUpdateOne) SetStatus(ms model.JobStatus) *JobUpdateOne {
	juo.mutation.SetStatus(ms)
	return juo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableStatus(ms *model.JobStatus) *JobUpdateOne {
	if ms != nil {
		juo.SetStatus(*ms)
	}
	return juo
}

// SetGroup sets the "group" field.
func (juo *JobUpdateOne) SetGroup(s string) *JobUpdateOne {
	juo.mutation.SetGroup(s)
	return juo
}

// SetNillableGroup sets the "group" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableGroup(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetGroup(*s)
	}
	return juo
}

// ClearGroup clears the value of the "group" field.
func (juo *JobUpdateOne) ClearGroup() *JobUpdateOne {
	juo.mutation.ClearGroup()
	return juo
}

// SetWorkflowID sets the "workflow" edge to the Workflow entity by ID.
func (juo *JobUpdateOne) SetWorkflowID(id int) *JobUpdateOne {
	juo.mutation.SetWorkflowID(id)
	return juo
}

// SetNillableWorkflowID sets the "workflow" edge to the Workflow entity by ID if the given value is not nil.
func (juo *JobUpdateOne) SetNillableWorkflowID(id *int) *JobUpdateOne {
	if id != nil {
		juo = juo.SetWorkflowID(*id)
	}
	return juo
}

// SetWorkflow sets the "workflow" edge to the Workflow entity.
func (juo *JobUpdateOne) SetWorkflow(w *Workflow) *JobUpdateOne {
	return juo.SetWorkflowID(w.ID)
}

// AddHistoryIDs adds the "history" edge to the History entity by IDs.
func (juo *JobUpdateOne) AddHistoryIDs(ids ...int) *JobUpdateOne {
	juo.mutation.AddHistoryIDs(ids...)
	return juo
}

// AddHistory adds the "history" edges to the History entity.
func (juo *JobUpdateOne) AddHistory(h ...*History) *JobUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return juo.AddHistoryIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (juo *JobUpdateOne) AddTagIDs(ids ...int) *JobUpdateOne {
	juo.mutation.AddTagIDs(ids...)
	return juo
}

// AddTags adds the "tags" edges to the Tag entity.
func (juo *JobUpdateOne) AddTags(t ...*Tag) *JobUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return juo.AddTagIDs(ids...)
}

// Mutation returns the JobMutation object of the builder.
func (juo *JobUpdateOne) Mutation() *JobMutation {
	return juo.mutation
}

// ClearWorkflow clears the "workflow" edge to the Workflow entity.
func (juo *JobUpdateOne) ClearWorkflow() *JobUpdateOne {
	juo.mutation.ClearWorkflow()
	return juo
}

// ClearHistory clears all "history" edges to the History entity.
func (juo *JobUpdateOne) ClearHistory() *JobUpdateOne {
	juo.mutation.ClearHistory()
	return juo
}

// RemoveHistoryIDs removes the "history" edge to History entities by IDs.
func (juo *JobUpdateOne) RemoveHistoryIDs(ids ...int) *JobUpdateOne {
	juo.mutation.RemoveHistoryIDs(ids...)
	return juo
}

// RemoveHistory removes "history" edges to History entities.
func (juo *JobUpdateOne) RemoveHistory(h ...*History) *JobUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return juo.RemoveHistoryIDs(ids...)
}

// ClearTags clears all "tags" edges to the Tag entity.
func (juo *JobUpdateOne) ClearTags() *JobUpdateOne {
	juo.mutation.ClearTags()
	return juo
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (juo *JobUpdateOne) RemoveTagIDs(ids ...int) *JobUpdateOne {
	juo.mutation.RemoveTagIDs(ids...)
	return juo
}

// RemoveTags removes "tags" edges to Tag entities.
func (juo *JobUpdateOne) RemoveTags(t ...*Tag) *JobUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return juo.RemoveTagIDs(ids...)
}

// Where appends a list predicates to the JobUpdate builder.
func (juo *JobUpdateOne) Where(ps ...predicate.Job) *JobUpdateOne {
	juo.mutation.Where(ps...)
	return juo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (juo *JobUpdateOne) Select(field string, fields ...string) *JobUpdateOne {
	juo.fields = append([]string{field}, fields...)
	return juo
}

// Save executes the query and returns the updated Job entity.
func (juo *JobUpdateOne) Save(ctx context.Context) (*Job, error) {
	juo.defaults()
	return withHooks(ctx, juo.sqlSave, juo.mutation, juo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (juo *JobUpdateOne) SaveX(ctx context.Context) *Job {
	node, err := juo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (juo *JobUpdateOne) Exec(ctx context.Context) error {
	_, err := juo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (juo *JobUpdateOne) ExecX(ctx context.Context) {
	if err := juo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (juo *JobUpdateOne) defaults() {
	if _, ok := juo.mutation.Mtime(); !ok {
		v := job.UpdateDefaultMtime()
		juo.mutation.SetMtime(v)
	}
}

func (juo *JobUpdateOne) sqlSave(ctx context.Context) (_node *Job, err error) {
	_spec := sqlgraph.NewUpdateSpec(job.Table, job.Columns, sqlgraph.NewFieldSpec(job.FieldID, field.TypeString))
	id, ok := juo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Job.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := juo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, job.FieldID)
		for _, f := range fields {
			if !job.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != job.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := juo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := juo.mutation.Stime(); ok {
		_spec.SetField(job.FieldStime, field.TypeTime, value)
	}
	if value, ok := juo.mutation.Mtime(); ok {
		_spec.SetField(job.FieldMtime, field.TypeTime, value)
	}
	if value, ok := juo.mutation.ClientID(); ok {
		_spec.SetField(job.FieldClientID, field.TypeString, value)
	}
	if value, ok := juo.mutation.Definition(); ok {
		_spec.SetField(job.FieldDefinition, field.TypeJSON, value)
	}
	if juo.mutation.DefinitionCleared() {
		_spec.ClearField(job.FieldDefinition, field.TypeJSON)
	}
	if value, ok := juo.mutation.Status(); ok {
		_spec.SetField(job.FieldStatus, field.TypeJSON, value)
	}
	if value, ok := juo.mutation.Group(); ok {
		_spec.SetField(job.FieldGroup, field.TypeString, value)
	}
	if juo.mutation.GroupCleared() {
		_spec.ClearField(job.FieldGroup, field.TypeString)
	}
	if juo.mutation.WorkflowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.WorkflowTable,
			Columns: []string{job.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.WorkflowTable,
			Columns: []string{job.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if juo.mutation.HistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.HistoryTable,
			Columns: []string{job.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.RemovedHistoryIDs(); len(nodes) > 0 && !juo.mutation.HistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.HistoryTable,
			Columns: []string{job.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.HistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.HistoryTable,
			Columns: []string{job.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if juo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   job.TagsTable,
			Columns: job.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !juo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   job.TagsTable,
			Columns: job.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   job.TagsTable,
			Columns: job.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Job{config: juo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, juo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{job.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	juo.mutation.done = true
	return _node, nil
}
