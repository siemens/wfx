// SPDX-FileCopyrightText: The entgo authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/siemens/wfx/generated/api"
	"github.com/siemens/wfx/generated/ent/history"
	"github.com/siemens/wfx/generated/ent/job"
)

// HistoryCreate is the builder for creating a History entity.
type HistoryCreate struct {
	config
	mutation *HistoryMutation
	hooks    []Hook
}

// SetMtime sets the "mtime" field.
func (_c *HistoryCreate) SetMtime(v time.Time) *HistoryCreate {
	_c.mutation.SetMtime(v)
	return _c
}

// SetStatus sets the "status" field.
func (_c *HistoryCreate) SetStatus(v api.JobStatus) *HistoryCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *HistoryCreate) SetNillableStatus(v *api.JobStatus) *HistoryCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetDefinition sets the "definition" field.
func (_c *HistoryCreate) SetDefinition(v map[string]interface{}) *HistoryCreate {
	_c.mutation.SetDefinition(v)
	return _c
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (_c *HistoryCreate) SetJobID(id string) *HistoryCreate {
	_c.mutation.SetJobID(id)
	return _c
}

// SetNillableJobID sets the "job" edge to the Job entity by ID if the given value is not nil.
func (_c *HistoryCreate) SetNillableJobID(id *string) *HistoryCreate {
	if id != nil {
		_c = _c.SetJobID(*id)
	}
	return _c
}

// SetJob sets the "job" edge to the Job entity.
func (_c *HistoryCreate) SetJob(v *Job) *HistoryCreate {
	return _c.SetJobID(v.ID)
}

// Mutation returns the HistoryMutation object of the builder.
func (_c *HistoryCreate) Mutation() *HistoryMutation {
	return _c.mutation
}

// Save creates the History in the database.
func (_c *HistoryCreate) Save(ctx context.Context) (*History, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *HistoryCreate) SaveX(ctx context.Context) *History {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *HistoryCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *HistoryCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *HistoryCreate) check() error {
	if _, ok := _c.mutation.Mtime(); !ok {
		return &ValidationError{Name: "mtime", err: errors.New(`ent: missing required field "History.mtime"`)}
	}
	return nil
}

func (_c *HistoryCreate) sqlSave(ctx context.Context) (*History, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *HistoryCreate) createSpec() (*History, *sqlgraph.CreateSpec) {
	var (
		_node = &History{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(history.Table, sqlgraph.NewFieldSpec(history.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.Mtime(); ok {
		_spec.SetField(history.FieldMtime, field.TypeTime, value)
		_node.Mtime = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(history.FieldStatus, field.TypeJSON, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.Definition(); ok {
		_spec.SetField(history.FieldDefinition, field.TypeJSON, value)
		_node.Definition = value
	}
	if nodes := _c.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   history.JobTable,
			Columns: []string{history.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.job_history = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// HistoryCreateBulk is the builder for creating many History entities in bulk.
type HistoryCreateBulk struct {
	config
	err      error
	builders []*HistoryCreate
}

// Save creates the History entities in the database.
func (_c *HistoryCreateBulk) Save(ctx context.Context) ([]*History, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*History, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *HistoryCreateBulk) SaveX(ctx context.Context) []*History {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *HistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *HistoryCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
