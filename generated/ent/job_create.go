// SPDX-FileCopyrightText: The entgo authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/siemens/wfx/generated/ent/history"
	"github.com/siemens/wfx/generated/ent/job"
	"github.com/siemens/wfx/generated/ent/tag"
	"github.com/siemens/wfx/generated/ent/workflow"
	"github.com/siemens/wfx/generated/model"
)

// JobCreate is the builder for creating a Job entity.
type JobCreate struct {
	config
	mutation *JobMutation
	hooks    []Hook
}

// SetStime sets the "stime" field.
func (jc *JobCreate) SetStime(t time.Time) *JobCreate {
	jc.mutation.SetStime(t)
	return jc
}

// SetNillableStime sets the "stime" field if the given value is not nil.
func (jc *JobCreate) SetNillableStime(t *time.Time) *JobCreate {
	if t != nil {
		jc.SetStime(*t)
	}
	return jc
}

// SetMtime sets the "mtime" field.
func (jc *JobCreate) SetMtime(t time.Time) *JobCreate {
	jc.mutation.SetMtime(t)
	return jc
}

// SetNillableMtime sets the "mtime" field if the given value is not nil.
func (jc *JobCreate) SetNillableMtime(t *time.Time) *JobCreate {
	if t != nil {
		jc.SetMtime(*t)
	}
	return jc
}

// SetClientID sets the "client_id" field.
func (jc *JobCreate) SetClientID(s string) *JobCreate {
	jc.mutation.SetClientID(s)
	return jc
}

// SetDefinition sets the "definition" field.
func (jc *JobCreate) SetDefinition(m map[string]interface{}) *JobCreate {
	jc.mutation.SetDefinition(m)
	return jc
}

// SetStatus sets the "status" field.
func (jc *JobCreate) SetStatus(ms model.JobStatus) *JobCreate {
	jc.mutation.SetStatus(ms)
	return jc
}

// SetGroup sets the "group" field.
func (jc *JobCreate) SetGroup(s string) *JobCreate {
	jc.mutation.SetGroup(s)
	return jc
}

// SetNillableGroup sets the "group" field if the given value is not nil.
func (jc *JobCreate) SetNillableGroup(s *string) *JobCreate {
	if s != nil {
		jc.SetGroup(*s)
	}
	return jc
}

// SetID sets the "id" field.
func (jc *JobCreate) SetID(s string) *JobCreate {
	jc.mutation.SetID(s)
	return jc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (jc *JobCreate) SetNillableID(s *string) *JobCreate {
	if s != nil {
		jc.SetID(*s)
	}
	return jc
}

// SetWorkflowID sets the "workflow" edge to the Workflow entity by ID.
func (jc *JobCreate) SetWorkflowID(id int) *JobCreate {
	jc.mutation.SetWorkflowID(id)
	return jc
}

// SetNillableWorkflowID sets the "workflow" edge to the Workflow entity by ID if the given value is not nil.
func (jc *JobCreate) SetNillableWorkflowID(id *int) *JobCreate {
	if id != nil {
		jc = jc.SetWorkflowID(*id)
	}
	return jc
}

// SetWorkflow sets the "workflow" edge to the Workflow entity.
func (jc *JobCreate) SetWorkflow(w *Workflow) *JobCreate {
	return jc.SetWorkflowID(w.ID)
}

// AddHistoryIDs adds the "history" edge to the History entity by IDs.
func (jc *JobCreate) AddHistoryIDs(ids ...int) *JobCreate {
	jc.mutation.AddHistoryIDs(ids...)
	return jc
}

// AddHistory adds the "history" edges to the History entity.
func (jc *JobCreate) AddHistory(h ...*History) *JobCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return jc.AddHistoryIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (jc *JobCreate) AddTagIDs(ids ...int) *JobCreate {
	jc.mutation.AddTagIDs(ids...)
	return jc
}

// AddTags adds the "tags" edges to the Tag entity.
func (jc *JobCreate) AddTags(t ...*Tag) *JobCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return jc.AddTagIDs(ids...)
}

// Mutation returns the JobMutation object of the builder.
func (jc *JobCreate) Mutation() *JobMutation {
	return jc.mutation
}

// Save creates the Job in the database.
func (jc *JobCreate) Save(ctx context.Context) (*Job, error) {
	jc.defaults()
	return withHooks(ctx, jc.sqlSave, jc.mutation, jc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (jc *JobCreate) SaveX(ctx context.Context) *Job {
	v, err := jc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jc *JobCreate) Exec(ctx context.Context) error {
	_, err := jc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jc *JobCreate) ExecX(ctx context.Context) {
	if err := jc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jc *JobCreate) defaults() {
	if _, ok := jc.mutation.Stime(); !ok {
		v := job.DefaultStime()
		jc.mutation.SetStime(v)
	}
	if _, ok := jc.mutation.Mtime(); !ok {
		v := job.DefaultMtime()
		jc.mutation.SetMtime(v)
	}
	if _, ok := jc.mutation.ID(); !ok {
		v := job.DefaultID()
		jc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jc *JobCreate) check() error {
	if _, ok := jc.mutation.Stime(); !ok {
		return &ValidationError{Name: "stime", err: errors.New(`ent: missing required field "Job.stime"`)}
	}
	if _, ok := jc.mutation.Mtime(); !ok {
		return &ValidationError{Name: "mtime", err: errors.New(`ent: missing required field "Job.mtime"`)}
	}
	if _, ok := jc.mutation.ClientID(); !ok {
		return &ValidationError{Name: "client_id", err: errors.New(`ent: missing required field "Job.client_id"`)}
	}
	if _, ok := jc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Job.status"`)}
	}
	if v, ok := jc.mutation.ID(); ok {
		if err := job.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Job.id": %w`, err)}
		}
	}
	return nil
}

func (jc *JobCreate) sqlSave(ctx context.Context) (*Job, error) {
	if err := jc.check(); err != nil {
		return nil, err
	}
	_node, _spec := jc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Job.ID type: %T", _spec.ID.Value)
		}
	}
	jc.mutation.id = &_node.ID
	jc.mutation.done = true
	return _node, nil
}

func (jc *JobCreate) createSpec() (*Job, *sqlgraph.CreateSpec) {
	var (
		_node = &Job{config: jc.config}
		_spec = sqlgraph.NewCreateSpec(job.Table, sqlgraph.NewFieldSpec(job.FieldID, field.TypeString))
	)
	if id, ok := jc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := jc.mutation.Stime(); ok {
		_spec.SetField(job.FieldStime, field.TypeTime, value)
		_node.Stime = value
	}
	if value, ok := jc.mutation.Mtime(); ok {
		_spec.SetField(job.FieldMtime, field.TypeTime, value)
		_node.Mtime = value
	}
	if value, ok := jc.mutation.ClientID(); ok {
		_spec.SetField(job.FieldClientID, field.TypeString, value)
		_node.ClientID = value
	}
	if value, ok := jc.mutation.Definition(); ok {
		_spec.SetField(job.FieldDefinition, field.TypeJSON, value)
		_node.Definition = value
	}
	if value, ok := jc.mutation.Status(); ok {
		_spec.SetField(job.FieldStatus, field.TypeJSON, value)
		_node.Status = value
	}
	if value, ok := jc.mutation.Group(); ok {
		_spec.SetField(job.FieldGroup, field.TypeString, value)
		_node.Group = value
	}
	if nodes := jc.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.WorkflowTable,
			Columns: []string{job.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.workflow_jobs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jc.mutation.HistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.HistoryTable,
			Columns: []string{job.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jc.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   job.TagsTable,
			Columns: job.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// JobCreateBulk is the builder for creating many Job entities in bulk.
type JobCreateBulk struct {
	config
	err      error
	builders []*JobCreate
}

// Save creates the Job entities in the database.
func (jcb *JobCreateBulk) Save(ctx context.Context) ([]*Job, error) {
	if jcb.err != nil {
		return nil, jcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(jcb.builders))
	nodes := make([]*Job, len(jcb.builders))
	mutators := make([]Mutator, len(jcb.builders))
	for i := range jcb.builders {
		func(i int, root context.Context) {
			builder := jcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jcb *JobCreateBulk) SaveX(ctx context.Context) []*Job {
	v, err := jcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jcb *JobCreateBulk) Exec(ctx context.Context) error {
	_, err := jcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jcb *JobCreateBulk) ExecX(ctx context.Context) {
	if err := jcb.Exec(ctx); err != nil {
		panic(err)
	}
}
