// SPDX-FileCopyrightText: The entgo authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/siemens/wfx/generated/api"
	"github.com/siemens/wfx/generated/ent/job"
	"github.com/siemens/wfx/generated/ent/predicate"
	"github.com/siemens/wfx/generated/ent/workflow"
)

// WorkflowUpdate is the builder for updating Workflow entities.
type WorkflowUpdate struct {
	config
	hooks    []Hook
	mutation *WorkflowMutation
}

// Where appends a list predicates to the WorkflowUpdate builder.
func (_u *WorkflowUpdate) Where(ps ...predicate.Workflow) *WorkflowUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *WorkflowUpdate) SetName(v string) *WorkflowUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *WorkflowUpdate) SetNillableName(v *string) *WorkflowUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *WorkflowUpdate) SetDescription(v string) *WorkflowUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *WorkflowUpdate) SetNillableDescription(v *string) *WorkflowUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *WorkflowUpdate) ClearDescription() *WorkflowUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetStates sets the "states" field.
func (_u *WorkflowUpdate) SetStates(v []api.State) *WorkflowUpdate {
	_u.mutation.SetStates(v)
	return _u
}

// AppendStates appends value to the "states" field.
func (_u *WorkflowUpdate) AppendStates(v []api.State) *WorkflowUpdate {
	_u.mutation.AppendStates(v)
	return _u
}

// SetTransitions sets the "transitions" field.
func (_u *WorkflowUpdate) SetTransitions(v []api.Transition) *WorkflowUpdate {
	_u.mutation.SetTransitions(v)
	return _u
}

// AppendTransitions appends value to the "transitions" field.
func (_u *WorkflowUpdate) AppendTransitions(v []api.Transition) *WorkflowUpdate {
	_u.mutation.AppendTransitions(v)
	return _u
}

// SetGroups sets the "groups" field.
func (_u *WorkflowUpdate) SetGroups(v []api.Group) *WorkflowUpdate {
	_u.mutation.SetGroups(v)
	return _u
}

// AppendGroups appends value to the "groups" field.
func (_u *WorkflowUpdate) AppendGroups(v []api.Group) *WorkflowUpdate {
	_u.mutation.AppendGroups(v)
	return _u
}

// AddJobIDs adds the "jobs" edge to the Job entity by IDs.
func (_u *WorkflowUpdate) AddJobIDs(ids ...string) *WorkflowUpdate {
	_u.mutation.AddJobIDs(ids...)
	return _u
}

// AddJobs adds the "jobs" edges to the Job entity.
func (_u *WorkflowUpdate) AddJobs(v ...*Job) *WorkflowUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddJobIDs(ids...)
}

// Mutation returns the WorkflowMutation object of the builder.
func (_u *WorkflowUpdate) Mutation() *WorkflowMutation {
	return _u.mutation
}

// ClearJobs clears all "jobs" edges to the Job entity.
func (_u *WorkflowUpdate) ClearJobs() *WorkflowUpdate {
	_u.mutation.ClearJobs()
	return _u
}

// RemoveJobIDs removes the "jobs" edge to Job entities by IDs.
func (_u *WorkflowUpdate) RemoveJobIDs(ids ...string) *WorkflowUpdate {
	_u.mutation.RemoveJobIDs(ids...)
	return _u
}

// RemoveJobs removes "jobs" edges to Job entities.
func (_u *WorkflowUpdate) RemoveJobs(v ...*Job) *WorkflowUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveJobIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *WorkflowUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *WorkflowUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *WorkflowUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *WorkflowUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *WorkflowUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := workflow.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Workflow.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Description(); ok {
		if err := workflow.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Workflow.description": %w`, err)}
		}
	}
	return nil
}

func (_u *WorkflowUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workflow.Table, workflow.Columns, sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(workflow.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(workflow.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(workflow.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.States(); ok {
		_spec.SetField(workflow.FieldStates, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedStates(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, workflow.FieldStates, value)
		})
	}
	if value, ok := _u.mutation.Transitions(); ok {
		_spec.SetField(workflow.FieldTransitions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTransitions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, workflow.FieldTransitions, value)
		})
	}
	if value, ok := _u.mutation.Groups(); ok {
		_spec.SetField(workflow.FieldGroups, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedGroups(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, workflow.FieldGroups, value)
		})
	}
	if _u.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.JobsTable,
			Columns: []string{workflow.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedJobsIDs(); len(nodes) > 0 && !_u.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.JobsTable,
			Columns: []string{workflow.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.JobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.JobsTable,
			Columns: []string{workflow.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// WorkflowUpdateOne is the builder for updating a single Workflow entity.
type WorkflowUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkflowMutation
}

// SetName sets the "name" field.
func (_u *WorkflowUpdateOne) SetName(v string) *WorkflowUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *WorkflowUpdateOne) SetNillableName(v *string) *WorkflowUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *WorkflowUpdateOne) SetDescription(v string) *WorkflowUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *WorkflowUpdateOne) SetNillableDescription(v *string) *WorkflowUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *WorkflowUpdateOne) ClearDescription() *WorkflowUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetStates sets the "states" field.
func (_u *WorkflowUpdateOne) SetStates(v []api.State) *WorkflowUpdateOne {
	_u.mutation.SetStates(v)
	return _u
}

// AppendStates appends value to the "states" field.
func (_u *WorkflowUpdateOne) AppendStates(v []api.State) *WorkflowUpdateOne {
	_u.mutation.AppendStates(v)
	return _u
}

// SetTransitions sets the "transitions" field.
func (_u *WorkflowUpdateOne) SetTransitions(v []api.Transition) *WorkflowUpdateOne {
	_u.mutation.SetTransitions(v)
	return _u
}

// AppendTransitions appends value to the "transitions" field.
func (_u *WorkflowUpdateOne) AppendTransitions(v []api.Transition) *WorkflowUpdateOne {
	_u.mutation.AppendTransitions(v)
	return _u
}

// SetGroups sets the "groups" field.
func (_u *WorkflowUpdateOne) SetGroups(v []api.Group) *WorkflowUpdateOne {
	_u.mutation.SetGroups(v)
	return _u
}

// AppendGroups appends value to the "groups" field.
func (_u *WorkflowUpdateOne) AppendGroups(v []api.Group) *WorkflowUpdateOne {
	_u.mutation.AppendGroups(v)
	return _u
}

// AddJobIDs adds the "jobs" edge to the Job entity by IDs.
func (_u *WorkflowUpdateOne) AddJobIDs(ids ...string) *WorkflowUpdateOne {
	_u.mutation.AddJobIDs(ids...)
	return _u
}

// AddJobs adds the "jobs" edges to the Job entity.
func (_u *WorkflowUpdateOne) AddJobs(v ...*Job) *WorkflowUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddJobIDs(ids...)
}

// Mutation returns the WorkflowMutation object of the builder.
func (_u *WorkflowUpdateOne) Mutation() *WorkflowMutation {
	return _u.mutation
}

// ClearJobs clears all "jobs" edges to the Job entity.
func (_u *WorkflowUpdateOne) ClearJobs() *WorkflowUpdateOne {
	_u.mutation.ClearJobs()
	return _u
}

// RemoveJobIDs removes the "jobs" edge to Job entities by IDs.
func (_u *WorkflowUpdateOne) RemoveJobIDs(ids ...string) *WorkflowUpdateOne {
	_u.mutation.RemoveJobIDs(ids...)
	return _u
}

// RemoveJobs removes "jobs" edges to Job entities.
func (_u *WorkflowUpdateOne) RemoveJobs(v ...*Job) *WorkflowUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveJobIDs(ids...)
}

// Where appends a list predicates to the WorkflowUpdate builder.
func (_u *WorkflowUpdateOne) Where(ps ...predicate.Workflow) *WorkflowUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *WorkflowUpdateOne) Select(field string, fields ...string) *WorkflowUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Workflow entity.
func (_u *WorkflowUpdateOne) Save(ctx context.Context) (*Workflow, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *WorkflowUpdateOne) SaveX(ctx context.Context) *Workflow {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *WorkflowUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *WorkflowUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *WorkflowUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := workflow.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Workflow.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Description(); ok {
		if err := workflow.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Workflow.description": %w`, err)}
		}
	}
	return nil
}

func (_u *WorkflowUpdateOne) sqlSave(ctx context.Context) (_node *Workflow, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workflow.Table, workflow.Columns, sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Workflow.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workflow.FieldID)
		for _, f := range fields {
			if !workflow.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workflow.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(workflow.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(workflow.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(workflow.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.States(); ok {
		_spec.SetField(workflow.FieldStates, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedStates(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, workflow.FieldStates, value)
		})
	}
	if value, ok := _u.mutation.Transitions(); ok {
		_spec.SetField(workflow.FieldTransitions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTransitions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, workflow.FieldTransitions, value)
		})
	}
	if value, ok := _u.mutation.Groups(); ok {
		_spec.SetField(workflow.FieldGroups, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedGroups(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, workflow.FieldGroups, value)
		})
	}
	if _u.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.JobsTable,
			Columns: []string{workflow.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedJobsIDs(); len(nodes) > 0 && !_u.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.JobsTable,
			Columns: []string{workflow.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.JobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.JobsTable,
			Columns: []string{workflow.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Workflow{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
