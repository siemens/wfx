// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: 2023 Siemens AG
//
// SPDX-License-Identifier: Apache-2.0
//

package southbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetJobsEventsHandlerFunc turns a function with the right signature into a get jobs events handler
type GetJobsEventsHandlerFunc func(GetJobsEventsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetJobsEventsHandlerFunc) Handle(params GetJobsEventsParams) middleware.Responder {
	return fn(params)
}

// GetJobsEventsHandler interface for that can handle valid get jobs events params
type GetJobsEventsHandler interface {
	Handle(GetJobsEventsParams) middleware.Responder
}

// NewGetJobsEvents creates a new http.Handler for the get jobs events operation
func NewGetJobsEvents(ctx *middleware.Context, handler GetJobsEventsHandler) *GetJobsEvents {
	return &GetJobsEvents{Context: ctx, Handler: handler}
}

/*
	GetJobsEvents swagger:route GET /jobs/events southbound getJobsEvents

# Subscribe to job-related events such as status updates

Obtain instant notifications when there are job changes matching the criteria. This endpoint utilizes server-sent events (SSE), where responses are "chunked" with double newline breaks. For example, a single event might look like this:

	data: {"clientId":"example_client","state":"INSTALLING"}\n\n
*/
type GetJobsEvents struct {
	Context *middleware.Context
	Handler GetJobsEventsHandler
}

func (o *GetJobsEvents) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetJobsEventsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
