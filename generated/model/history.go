// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: 2023 Siemens AG
//
// SPDX-License-Identifier: Apache-2.0
//

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// History history
//
// swagger:model History
type History struct {

	// definition
	// Example: { \"userDefined\": {} }\n
	Definition map[string]interface{} `json:"definition,omitempty"`

	// Date and time (ISO8601) when the job was modified (set by wfx)
	// Read Only: true
	// Format: date-time
	Mtime strfmt.DateTime `json:"mtime,omitempty"`

	// A previous job status
	Status *JobStatus `json:"status,omitempty"`
}

// Validate validates this history
func (m *History) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMtime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *History) validateMtime(formats strfmt.Registry) error {
	if swag.IsZero(m.Mtime) { // not required
		return nil
	}

	if err := validate.FormatOf("mtime", "body", "date-time", m.Mtime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *History) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this history based on the context it is used
func (m *History) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMtime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *History) contextValidateMtime(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "mtime", "body", strfmt.DateTime(m.Mtime)); err != nil {
		return err
	}

	return nil
}

func (m *History) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {

		if swag.IsZero(m.Status) { // not required
			return nil
		}

		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *History) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *History) UnmarshalBinary(b []byte) error {
	var res History
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
