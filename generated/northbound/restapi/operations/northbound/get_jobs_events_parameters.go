// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: 2023 Siemens AG
//
// SPDX-License-Identifier: Apache-2.0
//

package northbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
)

// NewGetJobsEventsParams creates a new GetJobsEventsParams object
//
// There are no default values defined in the spec.
func NewGetJobsEventsParams() GetJobsEventsParams {

	return GetJobsEventsParams{}
}

// GetJobsEventsParams contains all the bound params for the get jobs events operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetJobsEvents
type GetJobsEventsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The job's clientId must be one of these clientIds (comma-separated).
	  In: query
	*/
	ClientIds *string
	/*The job's id must be one of these ids (comma-separated).
	  In: query
	*/
	JobIds *string
	/*A (comma-separated) list of tags to include into each job event. This can be used to aggregrate events from multiple wfx instances.

	  In: query
	*/
	Tags *string
	/*The job's workflow must be equal to one of the provided workflow names (comma-separated).
	  In: query
	*/
	Workflows *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetJobsEventsParams() beforehand.
func (o *GetJobsEventsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qClientIds, qhkClientIds, _ := qs.GetOK("clientIds")
	if err := o.bindClientIds(qClientIds, qhkClientIds, route.Formats); err != nil {
		res = append(res, err)
	}

	qJobIds, qhkJobIds, _ := qs.GetOK("jobIds")
	if err := o.bindJobIds(qJobIds, qhkJobIds, route.Formats); err != nil {
		res = append(res, err)
	}

	qTags, qhkTags, _ := qs.GetOK("tags")
	if err := o.bindTags(qTags, qhkTags, route.Formats); err != nil {
		res = append(res, err)
	}

	qWorkflows, qhkWorkflows, _ := qs.GetOK("workflows")
	if err := o.bindWorkflows(qWorkflows, qhkWorkflows, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindClientIds binds and validates parameter ClientIds from query.
func (o *GetJobsEventsParams) bindClientIds(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.ClientIds = &raw

	return nil
}

// bindJobIds binds and validates parameter JobIds from query.
func (o *GetJobsEventsParams) bindJobIds(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.JobIds = &raw

	return nil
}

// bindTags binds and validates parameter Tags from query.
func (o *GetJobsEventsParams) bindTags(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Tags = &raw

	return nil
}

// bindWorkflows binds and validates parameter Workflows from query.
func (o *GetJobsEventsParams) bindWorkflows(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Workflows = &raw

	return nil
}
