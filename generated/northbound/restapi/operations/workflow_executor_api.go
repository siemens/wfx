// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: 2023 Siemens AG
//
// SPDX-License-Identifier: Apache-2.0
//

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/siemens/wfx/generated/northbound/restapi/operations/northbound"
)

// NewWorkflowExecutorAPI creates a new WorkflowExecutor instance
func NewWorkflowExecutorAPI(spec *loads.Document) *WorkflowExecutorAPI {
	return &WorkflowExecutorAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),
		TextEventStreamProducer: runtime.ProducerFunc(func(w io.Writer, data interface{}) error {
			return errors.NotImplemented("textEventStream producer has not yet been implemented")
		}),

		NorthboundDeleteJobsIDHandler: northbound.DeleteJobsIDHandlerFunc(func(params northbound.DeleteJobsIDParams) middleware.Responder {
			return middleware.NotImplemented("operation northbound.DeleteJobsID has not yet been implemented")
		}),
		NorthboundDeleteJobsIDTagsHandler: northbound.DeleteJobsIDTagsHandlerFunc(func(params northbound.DeleteJobsIDTagsParams) middleware.Responder {
			return middleware.NotImplemented("operation northbound.DeleteJobsIDTags has not yet been implemented")
		}),
		NorthboundDeleteWorkflowsNameHandler: northbound.DeleteWorkflowsNameHandlerFunc(func(params northbound.DeleteWorkflowsNameParams) middleware.Responder {
			return middleware.NotImplemented("operation northbound.DeleteWorkflowsName has not yet been implemented")
		}),
		NorthboundGetJobsHandler: northbound.GetJobsHandlerFunc(func(params northbound.GetJobsParams) middleware.Responder {
			return middleware.NotImplemented("operation northbound.GetJobs has not yet been implemented")
		}),
		NorthboundGetJobsEventsHandler: northbound.GetJobsEventsHandlerFunc(func(params northbound.GetJobsEventsParams) middleware.Responder {
			return middleware.NotImplemented("operation northbound.GetJobsEvents has not yet been implemented")
		}),
		NorthboundGetJobsIDHandler: northbound.GetJobsIDHandlerFunc(func(params northbound.GetJobsIDParams) middleware.Responder {
			return middleware.NotImplemented("operation northbound.GetJobsID has not yet been implemented")
		}),
		NorthboundGetJobsIDDefinitionHandler: northbound.GetJobsIDDefinitionHandlerFunc(func(params northbound.GetJobsIDDefinitionParams) middleware.Responder {
			return middleware.NotImplemented("operation northbound.GetJobsIDDefinition has not yet been implemented")
		}),
		NorthboundGetJobsIDStatusHandler: northbound.GetJobsIDStatusHandlerFunc(func(params northbound.GetJobsIDStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation northbound.GetJobsIDStatus has not yet been implemented")
		}),
		NorthboundGetJobsIDTagsHandler: northbound.GetJobsIDTagsHandlerFunc(func(params northbound.GetJobsIDTagsParams) middleware.Responder {
			return middleware.NotImplemented("operation northbound.GetJobsIDTags has not yet been implemented")
		}),
		NorthboundGetWorkflowsHandler: northbound.GetWorkflowsHandlerFunc(func(params northbound.GetWorkflowsParams) middleware.Responder {
			return middleware.NotImplemented("operation northbound.GetWorkflows has not yet been implemented")
		}),
		NorthboundGetWorkflowsNameHandler: northbound.GetWorkflowsNameHandlerFunc(func(params northbound.GetWorkflowsNameParams) middleware.Responder {
			return middleware.NotImplemented("operation northbound.GetWorkflowsName has not yet been implemented")
		}),
		NorthboundPostJobsHandler: northbound.PostJobsHandlerFunc(func(params northbound.PostJobsParams) middleware.Responder {
			return middleware.NotImplemented("operation northbound.PostJobs has not yet been implemented")
		}),
		NorthboundPostJobsIDTagsHandler: northbound.PostJobsIDTagsHandlerFunc(func(params northbound.PostJobsIDTagsParams) middleware.Responder {
			return middleware.NotImplemented("operation northbound.PostJobsIDTags has not yet been implemented")
		}),
		NorthboundPostWorkflowsHandler: northbound.PostWorkflowsHandlerFunc(func(params northbound.PostWorkflowsParams) middleware.Responder {
			return middleware.NotImplemented("operation northbound.PostWorkflows has not yet been implemented")
		}),
		NorthboundPutJobsIDDefinitionHandler: northbound.PutJobsIDDefinitionHandlerFunc(func(params northbound.PutJobsIDDefinitionParams) middleware.Responder {
			return middleware.NotImplemented("operation northbound.PutJobsIDDefinition has not yet been implemented")
		}),
		NorthboundPutJobsIDStatusHandler: northbound.PutJobsIDStatusHandlerFunc(func(params northbound.PutJobsIDStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation northbound.PutJobsIDStatus has not yet been implemented")
		}),
	}
}

/*WorkflowExecutorAPI the workflow executor API */
type WorkflowExecutorAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer
	// TextEventStreamProducer registers a producer for the following mime types:
	//   - text/event-stream
	TextEventStreamProducer runtime.Producer

	// NorthboundDeleteJobsIDHandler sets the operation handler for the delete jobs ID operation
	NorthboundDeleteJobsIDHandler northbound.DeleteJobsIDHandler
	// NorthboundDeleteJobsIDTagsHandler sets the operation handler for the delete jobs ID tags operation
	NorthboundDeleteJobsIDTagsHandler northbound.DeleteJobsIDTagsHandler
	// NorthboundDeleteWorkflowsNameHandler sets the operation handler for the delete workflows name operation
	NorthboundDeleteWorkflowsNameHandler northbound.DeleteWorkflowsNameHandler
	// NorthboundGetJobsHandler sets the operation handler for the get jobs operation
	NorthboundGetJobsHandler northbound.GetJobsHandler
	// NorthboundGetJobsEventsHandler sets the operation handler for the get jobs events operation
	NorthboundGetJobsEventsHandler northbound.GetJobsEventsHandler
	// NorthboundGetJobsIDHandler sets the operation handler for the get jobs ID operation
	NorthboundGetJobsIDHandler northbound.GetJobsIDHandler
	// NorthboundGetJobsIDDefinitionHandler sets the operation handler for the get jobs ID definition operation
	NorthboundGetJobsIDDefinitionHandler northbound.GetJobsIDDefinitionHandler
	// NorthboundGetJobsIDStatusHandler sets the operation handler for the get jobs ID status operation
	NorthboundGetJobsIDStatusHandler northbound.GetJobsIDStatusHandler
	// NorthboundGetJobsIDTagsHandler sets the operation handler for the get jobs ID tags operation
	NorthboundGetJobsIDTagsHandler northbound.GetJobsIDTagsHandler
	// NorthboundGetWorkflowsHandler sets the operation handler for the get workflows operation
	NorthboundGetWorkflowsHandler northbound.GetWorkflowsHandler
	// NorthboundGetWorkflowsNameHandler sets the operation handler for the get workflows name operation
	NorthboundGetWorkflowsNameHandler northbound.GetWorkflowsNameHandler
	// NorthboundPostJobsHandler sets the operation handler for the post jobs operation
	NorthboundPostJobsHandler northbound.PostJobsHandler
	// NorthboundPostJobsIDTagsHandler sets the operation handler for the post jobs ID tags operation
	NorthboundPostJobsIDTagsHandler northbound.PostJobsIDTagsHandler
	// NorthboundPostWorkflowsHandler sets the operation handler for the post workflows operation
	NorthboundPostWorkflowsHandler northbound.PostWorkflowsHandler
	// NorthboundPutJobsIDDefinitionHandler sets the operation handler for the put jobs ID definition operation
	NorthboundPutJobsIDDefinitionHandler northbound.PutJobsIDDefinitionHandler
	// NorthboundPutJobsIDStatusHandler sets the operation handler for the put jobs ID status operation
	NorthboundPutJobsIDStatusHandler northbound.PutJobsIDStatusHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *WorkflowExecutorAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *WorkflowExecutorAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *WorkflowExecutorAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *WorkflowExecutorAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *WorkflowExecutorAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *WorkflowExecutorAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *WorkflowExecutorAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *WorkflowExecutorAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *WorkflowExecutorAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the WorkflowExecutorAPI
func (o *WorkflowExecutorAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}
	if o.TextEventStreamProducer == nil {
		unregistered = append(unregistered, "TextEventStreamProducer")
	}

	if o.NorthboundDeleteJobsIDHandler == nil {
		unregistered = append(unregistered, "northbound.DeleteJobsIDHandler")
	}
	if o.NorthboundDeleteJobsIDTagsHandler == nil {
		unregistered = append(unregistered, "northbound.DeleteJobsIDTagsHandler")
	}
	if o.NorthboundDeleteWorkflowsNameHandler == nil {
		unregistered = append(unregistered, "northbound.DeleteWorkflowsNameHandler")
	}
	if o.NorthboundGetJobsHandler == nil {
		unregistered = append(unregistered, "northbound.GetJobsHandler")
	}
	if o.NorthboundGetJobsEventsHandler == nil {
		unregistered = append(unregistered, "northbound.GetJobsEventsHandler")
	}
	if o.NorthboundGetJobsIDHandler == nil {
		unregistered = append(unregistered, "northbound.GetJobsIDHandler")
	}
	if o.NorthboundGetJobsIDDefinitionHandler == nil {
		unregistered = append(unregistered, "northbound.GetJobsIDDefinitionHandler")
	}
	if o.NorthboundGetJobsIDStatusHandler == nil {
		unregistered = append(unregistered, "northbound.GetJobsIDStatusHandler")
	}
	if o.NorthboundGetJobsIDTagsHandler == nil {
		unregistered = append(unregistered, "northbound.GetJobsIDTagsHandler")
	}
	if o.NorthboundGetWorkflowsHandler == nil {
		unregistered = append(unregistered, "northbound.GetWorkflowsHandler")
	}
	if o.NorthboundGetWorkflowsNameHandler == nil {
		unregistered = append(unregistered, "northbound.GetWorkflowsNameHandler")
	}
	if o.NorthboundPostJobsHandler == nil {
		unregistered = append(unregistered, "northbound.PostJobsHandler")
	}
	if o.NorthboundPostJobsIDTagsHandler == nil {
		unregistered = append(unregistered, "northbound.PostJobsIDTagsHandler")
	}
	if o.NorthboundPostWorkflowsHandler == nil {
		unregistered = append(unregistered, "northbound.PostWorkflowsHandler")
	}
	if o.NorthboundPutJobsIDDefinitionHandler == nil {
		unregistered = append(unregistered, "northbound.PutJobsIDDefinitionHandler")
	}
	if o.NorthboundPutJobsIDStatusHandler == nil {
		unregistered = append(unregistered, "northbound.PutJobsIDStatusHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *WorkflowExecutorAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *WorkflowExecutorAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *WorkflowExecutorAPI) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *WorkflowExecutorAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *WorkflowExecutorAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		case "text/event-stream":
			result["text/event-stream"] = o.TextEventStreamProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *WorkflowExecutorAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the workflow executor API
func (o *WorkflowExecutorAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *WorkflowExecutorAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/jobs/{id}"] = northbound.NewDeleteJobsID(o.context, o.NorthboundDeleteJobsIDHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/jobs/{id}/tags"] = northbound.NewDeleteJobsIDTags(o.context, o.NorthboundDeleteJobsIDTagsHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/workflows/{name}"] = northbound.NewDeleteWorkflowsName(o.context, o.NorthboundDeleteWorkflowsNameHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/jobs"] = northbound.NewGetJobs(o.context, o.NorthboundGetJobsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/jobs/events"] = northbound.NewGetJobsEvents(o.context, o.NorthboundGetJobsEventsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/jobs/{id}"] = northbound.NewGetJobsID(o.context, o.NorthboundGetJobsIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/jobs/{id}/definition"] = northbound.NewGetJobsIDDefinition(o.context, o.NorthboundGetJobsIDDefinitionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/jobs/{id}/status"] = northbound.NewGetJobsIDStatus(o.context, o.NorthboundGetJobsIDStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/jobs/{id}/tags"] = northbound.NewGetJobsIDTags(o.context, o.NorthboundGetJobsIDTagsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/workflows"] = northbound.NewGetWorkflows(o.context, o.NorthboundGetWorkflowsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/workflows/{name}"] = northbound.NewGetWorkflowsName(o.context, o.NorthboundGetWorkflowsNameHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/jobs"] = northbound.NewPostJobs(o.context, o.NorthboundPostJobsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/jobs/{id}/tags"] = northbound.NewPostJobsIDTags(o.context, o.NorthboundPostJobsIDTagsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/workflows"] = northbound.NewPostWorkflows(o.context, o.NorthboundPostWorkflowsHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/jobs/{id}/definition"] = northbound.NewPutJobsIDDefinition(o.context, o.NorthboundPutJobsIDDefinitionHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/jobs/{id}/status"] = northbound.NewPutJobsIDStatus(o.context, o.NorthboundPutJobsIDStatusHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *WorkflowExecutorAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *WorkflowExecutorAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *WorkflowExecutorAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *WorkflowExecutorAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *WorkflowExecutorAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[um][path] = builder(h)
	}
}
