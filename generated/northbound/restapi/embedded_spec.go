// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: 2023 Siemens AG
//
// SPDX-License-Identifier: Apache-2.0
//

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Workflow Executor",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0",
    "x-visibility": "external"
  },
  "basePath": "/api/wfx/v1",
  "paths": {
    "/jobs": {
      "get": {
        "description": "List of job descriptions\nBy default, this endpoint returns the list of jobs in a specific order and predetermined paging properties.\nThese defaults are:\n  - Ascending sort on stime\n  - 10 entries per page\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "jobs",
          "southbound",
          "northbound"
        ],
        "summary": "List of job descriptions",
        "parameters": [
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/state"
          },
          {
            "$ref": "#/parameters/group"
          },
          {
            "$ref": "#/parameters/clientId"
          },
          {
            "$ref": "#/parameters/workflow"
          },
          {
            "$ref": "#/parameters/tag"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated job list.",
            "schema": {
              "$ref": "#/definitions/PaginatedJobList"
            }
          },
          "400": {
            "description": "If request is invalid",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation for invalid requests": {
                "errors": [
                  {
                    "code": "wfx.invalidRequest",
                    "logref": "96a37ea1f7d205ffbfa12334c6812727",
                    "message": "The request was invalid and could not be completed by the storage"
                  }
                ]
              }
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      },
      "post": {
        "description": "Add a new job\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "jobs",
          "northbound"
        ],
        "summary": "Add a new job",
        "parameters": [
          {
            "description": "Job which shall be created",
            "name": "Job",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JobRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Job was created",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation for invalid requests": {
                "errors": [
                  {
                    "code": "wfx.invalidRequest",
                    "logref": "96a37ea1f7d205ffbfa12334c6812727",
                    "message": "The request was invalid and could not be completed by the storage"
                  }
                ]
              }
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    },
    "/jobs/events": {
      "get": {
        "description": "Obtain instant notifications when there are job changes matching the criteria. This endpoint utilizes server-sent events (SSE), where responses are \"chunked\" with double newline breaks. For example, a single event might look like this:\n  data: {\"clientId\":\"example_client\",\"state\":\"INSTALLING\"}\\n\\n\n",
        "produces": [
          "application/json",
          "text/event-stream"
        ],
        "tags": [
          "jobs",
          "northbound",
          "southbound"
        ],
        "summary": "Subscribe to job-related events such as status updates",
        "parameters": [
          {
            "type": "string",
            "description": "The job's clientId must be one of these clientIds (comma-separated).",
            "name": "clientIds",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The job's id must be one of these ids (comma-separated).",
            "name": "jobIds",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The job's workflow must be equal to one of the provided workflow names (comma-separated).",
            "name": "workflows",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A (comma-separated) list of tags to include into each job event. This can be used to aggregrate events from multiple wfx instances.\n",
            "name": "tags",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A stream of server-sent events"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation for invalid requests": {
                "errors": [
                  {
                    "code": "wfx.jobTerminalState",
                    "logref": "916f0a913a3e4a52a96bd271e029c201",
                    "message": "The request was invalid because the job is in a terminal state"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation while updating a non-existent job": {
                "errors": [
                  {
                    "code": "wfx.jobNotFound",
                    "logref": "11cc67762090e15b79a1387eca65ba65",
                    "message": "Job ID was not found"
                  }
                ]
              }
            }
          },
          "default": {
            "description": "Other error with any status code and response body format"
          }
        }
      }
    },
    "/jobs/{id}": {
      "get": {
        "description": "Job description for a given ID\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "jobs",
          "southbound",
          "northbound"
        ],
        "summary": "Job description for a given ID",
        "parameters": [
          {
            "$ref": "#/parameters/jobId"
          },
          {
            "$ref": "#/parameters/history"
          }
        ],
        "responses": {
          "200": {
            "description": "Job description for for a given ID",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation for invalid requests": {
                "errors": [
                  {
                    "code": "wfx.invalidRequest",
                    "logref": "96a37ea1f7d205ffbfa12334c6812727",
                    "message": "The request was invalid and could not be completed by the storage"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation while querying a non-existent job": {
                "errors": [
                  {
                    "code": "wfx.jobNotFound",
                    "logref": "11cc67762090e15b79a1387eca65ba65",
                    "message": "Job ID was not found"
                  }
                ]
              }
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      },
      "delete": {
        "description": "Delete an existing job\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "jobs",
          "northbound"
        ],
        "summary": "Delete an existing job",
        "parameters": [
          {
            "$ref": "#/parameters/jobId"
          }
        ],
        "responses": {
          "204": {
            "description": "The job has been deleted."
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation while querying a non-existent workflow": {
                "errors": [
                  {
                    "code": "wfx.workflowNotFound",
                    "logref": "c452719774086b6e803bb8f6ecea9899",
                    "message": "Workflow not found for given name"
                  }
                ]
              }
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    },
    "/jobs/{id}/definition": {
      "get": {
        "description": "Retrieve the job definition",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "jobs",
          "northbound",
          "southbound"
        ],
        "summary": "Get job definition",
        "parameters": [
          {
            "$ref": "#/parameters/jobId"
          }
        ],
        "responses": {
          "200": {
            "description": "Job definition",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              },
              "example": "{ \"userDefined\": {} }\n"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation while updating a non-existent job": {
                "errors": [
                  {
                    "code": "wfx.jobNotFound",
                    "logref": "11cc67762090e15b79a1387eca65ba65",
                    "message": "Job ID was not found"
                  }
                ]
              }
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      },
      "put": {
        "description": "Modify the job definition of an existing job\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "jobs",
          "southbound",
          "northbound"
        ],
        "summary": "Modify job definition",
        "parameters": [
          {
            "$ref": "#/parameters/jobId"
          },
          {
            "description": "How to modify the job",
            "name": "JobDefinition",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              },
              "example": "{ \"userDefined\": {} }\n"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job modified successfully",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              },
              "example": "{ \"userDefined\": {} }\n"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation for invalid requests": {
                "errors": [
                  {
                    "code": "wfx.invalidRequest",
                    "logref": "96a37ea1f7d205ffbfa12334c6812727",
                    "message": "The request was invalid and could not be completed by the storage"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation while updating a non-existent job": {
                "errors": [
                  {
                    "code": "wfx.jobNotFound",
                    "logref": "11cc67762090e15b79a1387eca65ba65",
                    "message": "Job ID was not found"
                  }
                ]
              }
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    },
    "/jobs/{id}/status": {
      "get": {
        "description": "Retrieve the job status",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "jobs",
          "northbound",
          "southbound"
        ],
        "summary": "Get job status",
        "parameters": [
          {
            "$ref": "#/parameters/jobId"
          }
        ],
        "responses": {
          "200": {
            "description": "Job status",
            "schema": {
              "$ref": "#/definitions/JobStatus"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation while updating a non-existent job": {
                "errors": [
                  {
                    "code": "wfx.jobNotFound",
                    "logref": "11cc67762090e15b79a1387eca65ba65",
                    "message": "Job ID was not found"
                  }
                ]
              }
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      },
      "put": {
        "description": "Modify status of an existing job\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "jobs",
          "southbound",
          "northbound"
        ],
        "summary": "Modify status of an existing job",
        "parameters": [
          {
            "$ref": "#/parameters/jobId"
          },
          {
            "description": "This contains the new job status",
            "name": "New job status",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JobStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job modified successfully",
            "schema": {
              "$ref": "#/definitions/JobStatus"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation for invalid requests": {
                "errors": [
                  {
                    "code": "wfx.invalidRequest",
                    "logref": "96a37ea1f7d205ffbfa12334c6812727",
                    "message": "The request was invalid and could not be completed by the storage"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation while updating a non-existent job": {
                "errors": [
                  {
                    "code": "wfx.jobNotFound",
                    "logref": "11cc67762090e15b79a1387eca65ba65",
                    "message": "Job ID was not found"
                  }
                ]
              }
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    },
    "/jobs/{id}/tags": {
      "get": {
        "description": "Get the tags of a job",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "jobs",
          "northbound",
          "southbound"
        ],
        "summary": "Get tags",
        "parameters": [
          {
            "$ref": "#/parameters/jobId"
          }
        ],
        "responses": {
          "200": {
            "description": "Job tags",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "EUROPE_WEST"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation while updating a non-existent job": {
                "errors": [
                  {
                    "code": "wfx.jobNotFound",
                    "logref": "11cc67762090e15b79a1387eca65ba65",
                    "message": "Job ID was not found"
                  }
                ]
              }
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      },
      "post": {
        "description": "Add a tag to an existing job\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "jobs",
          "northbound"
        ],
        "summary": "Add a tag",
        "parameters": [
          {
            "$ref": "#/parameters/jobId"
          },
          {
            "description": "Tags to add",
            "name": "Tags",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "maxItems": 16,
              "minItems": 1,
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added tag to job",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "EUROPE_WEST"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation for invalid requests": {
                "errors": [
                  {
                    "code": "wfx.invalidRequest",
                    "logref": "96a37ea1f7d205ffbfa12334c6812727",
                    "message": "The request was invalid and could not be completed by the storage"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation while updating a non-existent job": {
                "errors": [
                  {
                    "code": "wfx.jobNotFound",
                    "logref": "11cc67762090e15b79a1387eca65ba65",
                    "message": "Job ID was not found"
                  }
                ]
              }
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      },
      "delete": {
        "description": "Delete a tag from an existing job\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "jobs",
          "northbound"
        ],
        "summary": "Delete a tag",
        "parameters": [
          {
            "$ref": "#/parameters/jobId"
          },
          {
            "description": "Tags to add",
            "name": "Tags",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "maxItems": 16,
              "minItems": 1,
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted tag",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "EUROPE_WEST"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation for invalid requests": {
                "errors": [
                  {
                    "code": "wfx.invalidRequest",
                    "logref": "96a37ea1f7d205ffbfa12334c6812727",
                    "message": "The request was invalid and could not be completed by the storage"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation while updating a non-existent job": {
                "errors": [
                  {
                    "code": "wfx.jobNotFound",
                    "logref": "11cc67762090e15b79a1387eca65ba65",
                    "message": "Job ID was not found"
                  }
                ]
              }
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    },
    "/workflows": {
      "get": {
        "description": "List of available workflows",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "workflows",
          "northbound",
          "southbound"
        ],
        "summary": "List of available workflows",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of workflows",
            "schema": {
              "$ref": "#/definitions/PaginatedWorkflowList"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      },
      "post": {
        "description": "Add a new workflow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "workflows",
          "northbound"
        ],
        "summary": "Add a new workflow",
        "parameters": [
          {
            "description": "Workflow object to be added",
            "name": "Workflow",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Workflow was created",
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation for invalid requests": {
                "errors": [
                  {
                    "code": "wfx.workflowNotUnique",
                    "logref": "e1ee1f2aea859b9dd34579610e386da6",
                    "message": "Workflow with name already exists"
                  },
                  {
                    "code": "wfx.workflowInvalid",
                    "logref": "18f57adc70dd79c7fb4f1246be8a6e04",
                    "message": "Workflow validation failed"
                  }
                ]
              }
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    },
    "/workflows/{name}": {
      "get": {
        "description": "Workflow description for a given name",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "workflows",
          "northbound",
          "southbound"
        ],
        "summary": "Workflow description for a given name",
        "parameters": [
          {
            "type": "string",
            "description": "Unique name for the workflow",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow description with the provided key",
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          },
          "400": {
            "description": "If request is invalid",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation for invalid requests": {
                "errors": [
                  {
                    "code": "wfx.invalidRequest",
                    "logref": "96a37ea1f7d205ffbfa12334c6812727",
                    "message": "The request was invalid and could not be completed by the storage"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation while querying a non-existent workflow": {
                "errors": [
                  {
                    "code": "wfx.workflowNotFound",
                    "logref": "c452719774086b6e803bb8f6ecea9899",
                    "message": "Workflow not found for given name"
                  }
                ]
              }
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      },
      "delete": {
        "description": "Delete an existing workflow\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "workflows",
          "northbound"
        ],
        "summary": "Delete an existing workflow",
        "parameters": [
          {
            "type": "string",
            "description": "Workflow name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "The workflow has been deleted."
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation while querying a non-existent workflow": {
                "errors": [
                  {
                    "code": "wfx.workflowNotFound",
                    "logref": "c452719774086b6e803bb8f6ecea9899",
                    "message": "Workflow not found for given name"
                  }
                ]
              }
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    }
  },
  "definitions": {
    "ActionEnum": {
      "type": "string",
      "enum": [
        "IMMEDIATE",
        "WAIT"
      ]
    },
    "EligibleEnum": {
      "type": "string",
      "enum": [
        "CLIENT",
        "WFX"
      ],
      "x-nullable": false
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "description": "Identifier code for the reason of the error",
          "type": "string"
        },
        "logref": {
          "description": "Log correlation ID",
          "type": "string"
        },
        "message": {
          "description": "Error message",
          "type": "string"
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "maxItems": 128,
          "items": {
            "$ref": "#/definitions/Error"
          }
        }
      }
    },
    "Group": {
      "type": "object",
      "required": [
        "name",
        "states"
      ],
      "properties": {
        "description": {
          "type": "string",
          "example": "Description of the group"
        },
        "name": {
          "type": "string",
          "x-nullable": false,
          "example": "OPEN"
        },
        "states": {
          "description": "A list of states belonging to this group",
          "type": "array",
          "maxItems": 4096,
          "minItems": 1,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "History": {
      "type": "object",
      "properties": {
        "definition": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "example": "{ \"userDefined\": {} }\n"
        },
        "mtime": {
          "description": "Date and time (ISO8601) when the job was modified (set by wfx)",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status": {
          "description": "A previous job status",
          "$ref": "#/definitions/JobStatus"
        }
      }
    },
    "Job": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string",
          "x-nullable": false,
          "example": "client42"
        },
        "definition": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "example": "{ \"userDefined\": {} }\n"
        },
        "history": {
          "description": "The job's history. Last in, first out (LIFO). Array is truncated if its length exceeds the maximum allowed length.\nBy default, the job history is omitted from responses unless explicitly requested by the client (see the ` + "`" + `history` + "`" + ` URL parameter).\n",
          "type": "array",
          "maxItems": 8192,
          "items": {
            "$ref": "#/definitions/History"
          },
          "x-omitempty": true
        },
        "id": {
          "description": "Unique job ID (wfx-generated)",
          "type": "string",
          "maxLength": 36,
          "x-nullable": false,
          "readOnly": true,
          "example": "3307e5cb-074c-49b7-99d4-5e61839a4c2d"
        },
        "mtime": {
          "description": "Date and time (ISO8601) when the job was last modified (set by wfx)",
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "readOnly": true
        },
        "status": {
          "$ref": "#/definitions/JobStatus"
        },
        "stime": {
          "description": "Date and time (ISO8601) when the job was created (set by wfx). Although stime conceptually always exists, it's nullable because we don't want to serialize stime in some cases (e.g. for job events).",
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "readOnly": true
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string",
            "maxItems": 16
          },
          "x-omitempty": true
        },
        "workflow": {
          "$ref": "#/definitions/Workflow"
        }
      }
    },
    "JobRequest": {
      "type": "object",
      "required": [
        "clientId",
        "workflow"
      ],
      "properties": {
        "clientId": {
          "description": "Create job for the given client ID",
          "type": "string",
          "x-nullable": false,
          "example": "client42"
        },
        "definition": {
          "description": "The existing job definition will be replaced with this if this property is not empty.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "example": "{ \"userDefined\": {} }\n"
        },
        "tags": {
          "type": "array",
          "maxItems": 16,
          "items": {
            "type": "string",
            "example": "EUROPE_WEST"
          }
        },
        "workflow": {
          "description": "Workflow name",
          "type": "string",
          "x-nullable": false,
          "example": "wfx.workflow.dau.direct"
        }
      }
    },
    "JobStatus": {
      "description": "Job status information",
      "type": "object",
      "required": [
        "state"
      ],
      "properties": {
        "clientId": {
          "description": "Client which sent the status update",
          "type": "string",
          "x-nullable": false,
          "example": "client42"
        },
        "context": {
          "description": "Client-specific JSON object to report additional context information such as error details, stack traces, etc",
          "type": "object",
          "maxLength": 20000,
          "additionalProperties": {
            "type": "object"
          },
          "example": "{\n  \"lines\": [ \"line1\", \"line2\" ]\n}\n"
        },
        "definitionHash": {
          "description": "Job definition hash",
          "type": "string",
          "maxLength": 64,
          "readOnly": true
        },
        "message": {
          "description": "Reason message/info, free text from client",
          "type": "string",
          "maxLength": 1024
        },
        "progress": {
          "description": "Current job progress percentage",
          "type": "number",
          "format": "int32",
          "maximum": 100
        },
        "state": {
          "description": "Name of the new workflow state",
          "type": "string",
          "x-nullable": false,
          "example": "END"
        }
      }
    },
    "PaginatedJobList": {
      "description": "Paginated list of jobs",
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Job"
          }
        },
        "pagination": {
          "type": "object",
          "properties": {
            "limit": {
              "description": "the maximum number of items to return",
              "type": "integer",
              "format": "int32",
              "example": 20
            },
            "offset": {
              "description": "the number of items to skip before starting to return results",
              "type": "integer",
              "format": "int64",
              "example": 0
            },
            "total": {
              "description": "the total number of items",
              "type": "integer",
              "format": "int64",
              "example": 1000
            }
          }
        }
      }
    },
    "PaginatedWorkflowList": {
      "description": "Paginated list of workflows",
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Workflow"
          }
        },
        "pagination": {
          "type": "object",
          "properties": {
            "limit": {
              "description": "the maximum number of items to return",
              "type": "integer",
              "format": "int32",
              "example": 20
            },
            "offset": {
              "description": "the number of items to skip before starting to return results",
              "type": "integer",
              "format": "int64",
              "example": 0
            },
            "total": {
              "description": "the total number of items",
              "type": "integer",
              "format": "int64",
              "example": 1000
            }
          }
        }
      }
    },
    "State": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "description": {
          "type": "string",
          "example": "Description of the state"
        },
        "name": {
          "type": "string",
          "x-nullable": false,
          "example": "START"
        }
      }
    },
    "Transition": {
      "type": "object",
      "required": [
        "from",
        "to",
        "eligible"
      ],
      "properties": {
        "action": {
          "description": "The transition execution action (default: WAIT)",
          "$ref": "#/definitions/ActionEnum",
          "example": "WAIT"
        },
        "description": {
          "type": "string",
          "example": "Description of the transition"
        },
        "eligible": {
          "description": "The entity that may execute the transition",
          "$ref": "#/definitions/EligibleEnum",
          "example": "CLIENT"
        },
        "from": {
          "type": "string",
          "x-nullable": false,
          "example": "START"
        },
        "to": {
          "type": "string",
          "x-nullable": false,
          "example": "END"
        }
      }
    },
    "Workflow": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "description": {
          "description": "Description of the workflow",
          "type": "string",
          "maxLength": 1024,
          "example": "This is a workflow"
        },
        "groups": {
          "type": "array",
          "maxItems": 1024,
          "items": {
            "$ref": "#/definitions/Group"
          },
          "x-omitempty": true
        },
        "name": {
          "description": "User provided unique workflow name",
          "type": "string",
          "maxLength": 64,
          "minLength": 1,
          "pattern": "^[a-zA-Z0-9\\-\\.]+$",
          "x-nullable": false,
          "example": "wfx.workflow.dau.direct"
        },
        "states": {
          "type": "array",
          "maxItems": 4096,
          "items": {
            "$ref": "#/definitions/State"
          },
          "x-omitempty": true
        },
        "transitions": {
          "type": "array",
          "maxItems": 16384,
          "items": {
            "$ref": "#/definitions/Transition"
          },
          "x-omitempty": true
        }
      }
    }
  },
  "parameters": {
    "clientId": {
      "type": "string",
      "description": "Filter jobs belonging to a specific client with clientId",
      "name": "clientId",
      "in": "query"
    },
    "group": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Filter jobs based on the group they are in",
      "name": "group",
      "in": "query"
    },
    "history": {
      "type": "boolean",
      "description": "Boolean flag to include the transition history of the job",
      "name": "history",
      "in": "query"
    },
    "jobId": {
      "type": "string",
      "description": "Job ID",
      "name": "id",
      "in": "path",
      "required": true
    },
    "limit": {
      "maxItems": 1024,
      "type": "integer",
      "format": "int32",
      "default": 10,
      "description": "the maximum number of items to return",
      "name": "limit",
      "in": "query"
    },
    "offset": {
      "type": "integer",
      "format": "int64",
      "default": 0,
      "description": "the number of items to skip before starting to return results",
      "name": "offset",
      "in": "query"
    },
    "sort": {
      "enum": [
        "asc",
        "desc"
      ],
      "type": "string",
      "default": "asc",
      "description": "the order of returned elements",
      "name": "sort",
      "in": "query"
    },
    "state": {
      "type": "string",
      "description": "Filter jobs based on the current state value",
      "name": "state",
      "in": "query"
    },
    "tag": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Filter jobs by tags",
      "name": "tag",
      "in": "query"
    },
    "workflow": {
      "type": "string",
      "description": "Filter jobs matching by workflow",
      "name": "workflow",
      "in": "query"
    }
  },
  "tags": [
    {
      "description": "Workflows used to instantiate jobs",
      "name": "workflows"
    },
    {
      "description": "Jobs derived from workflows and executed by a client",
      "name": "jobs"
    },
    {
      "description": "All southbound API endpoints",
      "name": "southbound"
    },
    {
      "description": "All northbound API endpoints",
      "name": "northbound"
    }
  ],
  "x-definitions-templates": {
    "Limits": {
      "maxErrorCount": {
        "maxItems": 128
      },
      "maxGroupCount": {
        "maxItems": 1024
      },
      "maxHistoryCount": {
        "maxItems": 8192
      },
      "maxItemsCount": {
        "maxItems": 1024
      },
      "maxStateCount": {
        "maxItems": 4096
      },
      "maxTagsCount": {
        "maxItems": 16
      },
      "maxTransitionCount": {
        "maxItems": 16384
      }
    },
    "Pagination": {
      "pagination": {
        "properties": {
          "limit": {
            "description": "the maximum number of items to return",
            "example": 20,
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "description": "the number of items to skip before starting to return results",
            "example": 0,
            "format": "int64",
            "type": "integer"
          },
          "total": {
            "description": "the total number of items",
            "example": 1000,
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      }
    }
  },
  "x-paths-templates": {
    "Errors": {
      "invalidRequestError": {
        "code": "wfx.invalidRequest",
        "logref": "96a37ea1f7d205ffbfa12334c6812727",
        "message": "The request was invalid and could not be completed by the storage"
      },
      "jobNotFoundError": {
        "code": "wfx.jobNotFound",
        "logref": "11cc67762090e15b79a1387eca65ba65",
        "message": "Job ID was not found"
      },
      "jobTerminalStateError": {
        "code": "wfx.jobTerminalState",
        "logref": "916f0a913a3e4a52a96bd271e029c201",
        "message": "The request was invalid because the job is in a terminal state"
      },
      "workflowInvalidError": {
        "code": "wfx.workflowInvalid",
        "logref": "18f57adc70dd79c7fb4f1246be8a6e04",
        "message": "Workflow validation failed"
      },
      "workflowNotFoundError": {
        "code": "wfx.workflowNotFound",
        "logref": "c452719774086b6e803bb8f6ecea9899",
        "message": "Workflow not found for given name"
      },
      "workflowNotUniqueError": {
        "code": "wfx.workflowNotUnique",
        "logref": "e1ee1f2aea859b9dd34579610e386da6",
        "message": "Workflow with name already exists"
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Workflow Executor",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0",
    "x-visibility": "external"
  },
  "basePath": "/api/wfx/v1",
  "paths": {
    "/jobs": {
      "get": {
        "description": "List of job descriptions\nBy default, this endpoint returns the list of jobs in a specific order and predetermined paging properties.\nThese defaults are:\n  - Ascending sort on stime\n  - 10 entries per page\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "jobs",
          "southbound",
          "northbound"
        ],
        "summary": "List of job descriptions",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "the number of items to skip before starting to return results",
            "name": "offset",
            "in": "query"
          },
          {
            "maxItems": 1024,
            "type": "integer",
            "format": "int32",
            "default": 10,
            "description": "the maximum number of items to return",
            "name": "limit",
            "in": "query"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "default": "asc",
            "description": "the order of returned elements",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter jobs based on the current state value",
            "name": "state",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter jobs based on the group they are in",
            "name": "group",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter jobs belonging to a specific client with clientId",
            "name": "clientId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter jobs matching by workflow",
            "name": "workflow",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter jobs by tags",
            "name": "tag",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated job list.",
            "schema": {
              "$ref": "#/definitions/PaginatedJobList"
            }
          },
          "400": {
            "description": "If request is invalid",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation for invalid requests": {
                "errors": [
                  {
                    "code": "wfx.invalidRequest",
                    "logref": "96a37ea1f7d205ffbfa12334c6812727",
                    "message": "The request was invalid and could not be completed by the storage"
                  }
                ]
              }
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      },
      "post": {
        "description": "Add a new job\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "jobs",
          "northbound"
        ],
        "summary": "Add a new job",
        "parameters": [
          {
            "description": "Job which shall be created",
            "name": "Job",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JobRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Job was created",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation for invalid requests": {
                "errors": [
                  {
                    "code": "wfx.invalidRequest",
                    "logref": "96a37ea1f7d205ffbfa12334c6812727",
                    "message": "The request was invalid and could not be completed by the storage"
                  }
                ]
              }
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    },
    "/jobs/events": {
      "get": {
        "description": "Obtain instant notifications when there are job changes matching the criteria. This endpoint utilizes server-sent events (SSE), where responses are \"chunked\" with double newline breaks. For example, a single event might look like this:\n  data: {\"clientId\":\"example_client\",\"state\":\"INSTALLING\"}\\n\\n\n",
        "produces": [
          "application/json",
          "text/event-stream"
        ],
        "tags": [
          "jobs",
          "northbound",
          "southbound"
        ],
        "summary": "Subscribe to job-related events such as status updates",
        "parameters": [
          {
            "type": "string",
            "description": "The job's clientId must be one of these clientIds (comma-separated).",
            "name": "clientIds",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The job's id must be one of these ids (comma-separated).",
            "name": "jobIds",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The job's workflow must be equal to one of the provided workflow names (comma-separated).",
            "name": "workflows",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A (comma-separated) list of tags to include into each job event. This can be used to aggregrate events from multiple wfx instances.\n",
            "name": "tags",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A stream of server-sent events"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation for invalid requests": {
                "errors": [
                  {
                    "code": "wfx.jobTerminalState",
                    "logref": "916f0a913a3e4a52a96bd271e029c201",
                    "message": "The request was invalid because the job is in a terminal state"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation while updating a non-existent job": {
                "errors": [
                  {
                    "code": "wfx.jobNotFound",
                    "logref": "11cc67762090e15b79a1387eca65ba65",
                    "message": "Job ID was not found"
                  }
                ]
              }
            }
          },
          "default": {
            "description": "Other error with any status code and response body format"
          }
        }
      }
    },
    "/jobs/{id}": {
      "get": {
        "description": "Job description for a given ID\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "jobs",
          "southbound",
          "northbound"
        ],
        "summary": "Job description for a given ID",
        "parameters": [
          {
            "type": "string",
            "description": "Job ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Boolean flag to include the transition history of the job",
            "name": "history",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Job description for for a given ID",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation for invalid requests": {
                "errors": [
                  {
                    "code": "wfx.invalidRequest",
                    "logref": "96a37ea1f7d205ffbfa12334c6812727",
                    "message": "The request was invalid and could not be completed by the storage"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation while querying a non-existent job": {
                "errors": [
                  {
                    "code": "wfx.jobNotFound",
                    "logref": "11cc67762090e15b79a1387eca65ba65",
                    "message": "Job ID was not found"
                  }
                ]
              }
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      },
      "delete": {
        "description": "Delete an existing job\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "jobs",
          "northbound"
        ],
        "summary": "Delete an existing job",
        "parameters": [
          {
            "type": "string",
            "description": "Job ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "The job has been deleted."
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation while querying a non-existent workflow": {
                "errors": [
                  {
                    "code": "wfx.workflowNotFound",
                    "logref": "c452719774086b6e803bb8f6ecea9899",
                    "message": "Workflow not found for given name"
                  }
                ]
              }
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    },
    "/jobs/{id}/definition": {
      "get": {
        "description": "Retrieve the job definition",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "jobs",
          "northbound",
          "southbound"
        ],
        "summary": "Get job definition",
        "parameters": [
          {
            "type": "string",
            "description": "Job ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Job definition",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              },
              "example": "{ \"userDefined\": {} }\n"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation while updating a non-existent job": {
                "errors": [
                  {
                    "code": "wfx.jobNotFound",
                    "logref": "11cc67762090e15b79a1387eca65ba65",
                    "message": "Job ID was not found"
                  }
                ]
              }
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      },
      "put": {
        "description": "Modify the job definition of an existing job\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "jobs",
          "southbound",
          "northbound"
        ],
        "summary": "Modify job definition",
        "parameters": [
          {
            "type": "string",
            "description": "Job ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "How to modify the job",
            "name": "JobDefinition",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              },
              "example": "{ \"userDefined\": {} }\n"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job modified successfully",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              },
              "example": "{ \"userDefined\": {} }\n"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation for invalid requests": {
                "errors": [
                  {
                    "code": "wfx.invalidRequest",
                    "logref": "96a37ea1f7d205ffbfa12334c6812727",
                    "message": "The request was invalid and could not be completed by the storage"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation while updating a non-existent job": {
                "errors": [
                  {
                    "code": "wfx.jobNotFound",
                    "logref": "11cc67762090e15b79a1387eca65ba65",
                    "message": "Job ID was not found"
                  }
                ]
              }
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    },
    "/jobs/{id}/status": {
      "get": {
        "description": "Retrieve the job status",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "jobs",
          "northbound",
          "southbound"
        ],
        "summary": "Get job status",
        "parameters": [
          {
            "type": "string",
            "description": "Job ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Job status",
            "schema": {
              "$ref": "#/definitions/JobStatus"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation while updating a non-existent job": {
                "errors": [
                  {
                    "code": "wfx.jobNotFound",
                    "logref": "11cc67762090e15b79a1387eca65ba65",
                    "message": "Job ID was not found"
                  }
                ]
              }
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      },
      "put": {
        "description": "Modify status of an existing job\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "jobs",
          "southbound",
          "northbound"
        ],
        "summary": "Modify status of an existing job",
        "parameters": [
          {
            "type": "string",
            "description": "Job ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "This contains the new job status",
            "name": "New job status",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JobStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job modified successfully",
            "schema": {
              "$ref": "#/definitions/JobStatus"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation for invalid requests": {
                "errors": [
                  {
                    "code": "wfx.invalidRequest",
                    "logref": "96a37ea1f7d205ffbfa12334c6812727",
                    "message": "The request was invalid and could not be completed by the storage"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation while updating a non-existent job": {
                "errors": [
                  {
                    "code": "wfx.jobNotFound",
                    "logref": "11cc67762090e15b79a1387eca65ba65",
                    "message": "Job ID was not found"
                  }
                ]
              }
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    },
    "/jobs/{id}/tags": {
      "get": {
        "description": "Get the tags of a job",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "jobs",
          "northbound",
          "southbound"
        ],
        "summary": "Get tags",
        "parameters": [
          {
            "type": "string",
            "description": "Job ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Job tags",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "EUROPE_WEST"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation while updating a non-existent job": {
                "errors": [
                  {
                    "code": "wfx.jobNotFound",
                    "logref": "11cc67762090e15b79a1387eca65ba65",
                    "message": "Job ID was not found"
                  }
                ]
              }
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      },
      "post": {
        "description": "Add a tag to an existing job\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "jobs",
          "northbound"
        ],
        "summary": "Add a tag",
        "parameters": [
          {
            "type": "string",
            "description": "Job ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Tags to add",
            "name": "Tags",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "maxItems": 16,
              "minItems": 1,
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added tag to job",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "EUROPE_WEST"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation for invalid requests": {
                "errors": [
                  {
                    "code": "wfx.invalidRequest",
                    "logref": "96a37ea1f7d205ffbfa12334c6812727",
                    "message": "The request was invalid and could not be completed by the storage"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation while updating a non-existent job": {
                "errors": [
                  {
                    "code": "wfx.jobNotFound",
                    "logref": "11cc67762090e15b79a1387eca65ba65",
                    "message": "Job ID was not found"
                  }
                ]
              }
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      },
      "delete": {
        "description": "Delete a tag from an existing job\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "jobs",
          "northbound"
        ],
        "summary": "Delete a tag",
        "parameters": [
          {
            "type": "string",
            "description": "Job ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Tags to add",
            "name": "Tags",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "maxItems": 16,
              "minItems": 1,
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted tag",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "EUROPE_WEST"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation for invalid requests": {
                "errors": [
                  {
                    "code": "wfx.invalidRequest",
                    "logref": "96a37ea1f7d205ffbfa12334c6812727",
                    "message": "The request was invalid and could not be completed by the storage"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation while updating a non-existent job": {
                "errors": [
                  {
                    "code": "wfx.jobNotFound",
                    "logref": "11cc67762090e15b79a1387eca65ba65",
                    "message": "Job ID was not found"
                  }
                ]
              }
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    },
    "/workflows": {
      "get": {
        "description": "List of available workflows",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "workflows",
          "northbound",
          "southbound"
        ],
        "summary": "List of available workflows",
        "parameters": [
          {
            "maxItems": 1024,
            "type": "integer",
            "format": "int32",
            "default": 10,
            "description": "the maximum number of items to return",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "the number of items to skip before starting to return results",
            "name": "offset",
            "in": "query"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "default": "asc",
            "description": "the order of returned elements",
            "name": "sort",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of workflows",
            "schema": {
              "$ref": "#/definitions/PaginatedWorkflowList"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      },
      "post": {
        "description": "Add a new workflow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "workflows",
          "northbound"
        ],
        "summary": "Add a new workflow",
        "parameters": [
          {
            "description": "Workflow object to be added",
            "name": "Workflow",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Workflow was created",
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation for invalid requests": {
                "errors": [
                  {
                    "code": "wfx.workflowNotUnique",
                    "logref": "e1ee1f2aea859b9dd34579610e386da6",
                    "message": "Workflow with name already exists"
                  },
                  {
                    "code": "wfx.workflowInvalid",
                    "logref": "18f57adc70dd79c7fb4f1246be8a6e04",
                    "message": "Workflow validation failed"
                  }
                ]
              }
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    },
    "/workflows/{name}": {
      "get": {
        "description": "Workflow description for a given name",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "workflows",
          "northbound",
          "southbound"
        ],
        "summary": "Workflow description for a given name",
        "parameters": [
          {
            "type": "string",
            "description": "Unique name for the workflow",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow description with the provided key",
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          },
          "400": {
            "description": "If request is invalid",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation for invalid requests": {
                "errors": [
                  {
                    "code": "wfx.invalidRequest",
                    "logref": "96a37ea1f7d205ffbfa12334c6812727",
                    "message": "The request was invalid and could not be completed by the storage"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation while querying a non-existent workflow": {
                "errors": [
                  {
                    "code": "wfx.workflowNotFound",
                    "logref": "c452719774086b6e803bb8f6ecea9899",
                    "message": "Workflow not found for given name"
                  }
                ]
              }
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      },
      "delete": {
        "description": "Delete an existing workflow\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "workflows",
          "northbound"
        ],
        "summary": "Delete an existing workflow",
        "parameters": [
          {
            "type": "string",
            "description": "Workflow name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "The workflow has been deleted."
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "Error responses occurring at this operation while querying a non-existent workflow": {
                "errors": [
                  {
                    "code": "wfx.workflowNotFound",
                    "logref": "c452719774086b6e803bb8f6ecea9899",
                    "message": "Workflow not found for given name"
                  }
                ]
              }
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    }
  },
  "definitions": {
    "ActionEnum": {
      "type": "string",
      "enum": [
        "IMMEDIATE",
        "WAIT"
      ]
    },
    "EligibleEnum": {
      "type": "string",
      "enum": [
        "CLIENT",
        "WFX"
      ],
      "x-nullable": false
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "description": "Identifier code for the reason of the error",
          "type": "string"
        },
        "logref": {
          "description": "Log correlation ID",
          "type": "string"
        },
        "message": {
          "description": "Error message",
          "type": "string"
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "maxItems": 128,
          "items": {
            "$ref": "#/definitions/Error"
          }
        }
      }
    },
    "Group": {
      "type": "object",
      "required": [
        "name",
        "states"
      ],
      "properties": {
        "description": {
          "type": "string",
          "example": "Description of the group"
        },
        "name": {
          "type": "string",
          "x-nullable": false,
          "example": "OPEN"
        },
        "states": {
          "description": "A list of states belonging to this group",
          "type": "array",
          "maxItems": 4096,
          "minItems": 1,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "History": {
      "type": "object",
      "properties": {
        "definition": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "example": "{ \"userDefined\": {} }\n"
        },
        "mtime": {
          "description": "Date and time (ISO8601) when the job was modified (set by wfx)",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status": {
          "description": "A previous job status",
          "$ref": "#/definitions/JobStatus"
        }
      }
    },
    "Job": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string",
          "x-nullable": false,
          "example": "client42"
        },
        "definition": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "example": "{ \"userDefined\": {} }\n"
        },
        "history": {
          "description": "The job's history. Last in, first out (LIFO). Array is truncated if its length exceeds the maximum allowed length.\nBy default, the job history is omitted from responses unless explicitly requested by the client (see the ` + "`" + `history` + "`" + ` URL parameter).\n",
          "type": "array",
          "maxItems": 8192,
          "items": {
            "$ref": "#/definitions/History"
          },
          "x-omitempty": true
        },
        "id": {
          "description": "Unique job ID (wfx-generated)",
          "type": "string",
          "maxLength": 36,
          "x-nullable": false,
          "readOnly": true,
          "example": "3307e5cb-074c-49b7-99d4-5e61839a4c2d"
        },
        "mtime": {
          "description": "Date and time (ISO8601) when the job was last modified (set by wfx)",
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "readOnly": true
        },
        "status": {
          "$ref": "#/definitions/JobStatus"
        },
        "stime": {
          "description": "Date and time (ISO8601) when the job was created (set by wfx). Although stime conceptually always exists, it's nullable because we don't want to serialize stime in some cases (e.g. for job events).",
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "readOnly": true
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": true
        },
        "workflow": {
          "$ref": "#/definitions/Workflow"
        }
      }
    },
    "JobRequest": {
      "type": "object",
      "required": [
        "clientId",
        "workflow"
      ],
      "properties": {
        "clientId": {
          "description": "Create job for the given client ID",
          "type": "string",
          "x-nullable": false,
          "example": "client42"
        },
        "definition": {
          "description": "The existing job definition will be replaced with this if this property is not empty.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "example": "{ \"userDefined\": {} }\n"
        },
        "tags": {
          "type": "array",
          "maxItems": 16,
          "items": {
            "type": "string",
            "example": "EUROPE_WEST"
          }
        },
        "workflow": {
          "description": "Workflow name",
          "type": "string",
          "x-nullable": false,
          "example": "wfx.workflow.dau.direct"
        }
      }
    },
    "JobStatus": {
      "description": "Job status information",
      "type": "object",
      "required": [
        "state"
      ],
      "properties": {
        "clientId": {
          "description": "Client which sent the status update",
          "type": "string",
          "x-nullable": false,
          "example": "client42"
        },
        "context": {
          "description": "Client-specific JSON object to report additional context information such as error details, stack traces, etc",
          "type": "object",
          "maxLength": 20000,
          "minLength": 0,
          "additionalProperties": {
            "type": "object"
          },
          "example": "{\n  \"lines\": [ \"line1\", \"line2\" ]\n}\n"
        },
        "definitionHash": {
          "description": "Job definition hash",
          "type": "string",
          "maxLength": 64,
          "readOnly": true
        },
        "message": {
          "description": "Reason message/info, free text from client",
          "type": "string",
          "maxLength": 1024
        },
        "progress": {
          "description": "Current job progress percentage",
          "type": "number",
          "format": "int32",
          "maximum": 100
        },
        "state": {
          "description": "Name of the new workflow state",
          "type": "string",
          "x-nullable": false,
          "example": "END"
        }
      }
    },
    "PaginatedJobList": {
      "description": "Paginated list of jobs",
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Job"
          }
        },
        "pagination": {
          "type": "object",
          "properties": {
            "limit": {
              "description": "the maximum number of items to return",
              "type": "integer",
              "format": "int32",
              "example": 20
            },
            "offset": {
              "description": "the number of items to skip before starting to return results",
              "type": "integer",
              "format": "int64",
              "example": 0
            },
            "total": {
              "description": "the total number of items",
              "type": "integer",
              "format": "int64",
              "example": 1000
            }
          }
        }
      }
    },
    "PaginatedJobListPagination": {
      "type": "object",
      "properties": {
        "limit": {
          "description": "the maximum number of items to return",
          "type": "integer",
          "format": "int32",
          "example": 20
        },
        "offset": {
          "description": "the number of items to skip before starting to return results",
          "type": "integer",
          "format": "int64",
          "example": 0
        },
        "total": {
          "description": "the total number of items",
          "type": "integer",
          "format": "int64",
          "example": 1000
        }
      }
    },
    "PaginatedWorkflowList": {
      "description": "Paginated list of workflows",
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Workflow"
          }
        },
        "pagination": {
          "type": "object",
          "properties": {
            "limit": {
              "description": "the maximum number of items to return",
              "type": "integer",
              "format": "int32",
              "example": 20
            },
            "offset": {
              "description": "the number of items to skip before starting to return results",
              "type": "integer",
              "format": "int64",
              "example": 0
            },
            "total": {
              "description": "the total number of items",
              "type": "integer",
              "format": "int64",
              "example": 1000
            }
          }
        }
      }
    },
    "PaginatedWorkflowListPagination": {
      "type": "object",
      "properties": {
        "limit": {
          "description": "the maximum number of items to return",
          "type": "integer",
          "format": "int32",
          "example": 20
        },
        "offset": {
          "description": "the number of items to skip before starting to return results",
          "type": "integer",
          "format": "int64",
          "example": 0
        },
        "total": {
          "description": "the total number of items",
          "type": "integer",
          "format": "int64",
          "example": 1000
        }
      }
    },
    "State": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "description": {
          "type": "string",
          "example": "Description of the state"
        },
        "name": {
          "type": "string",
          "x-nullable": false,
          "example": "START"
        }
      }
    },
    "Transition": {
      "type": "object",
      "required": [
        "from",
        "to",
        "eligible"
      ],
      "properties": {
        "action": {
          "description": "The transition execution action (default: WAIT)",
          "$ref": "#/definitions/ActionEnum",
          "example": "WAIT"
        },
        "description": {
          "type": "string",
          "example": "Description of the transition"
        },
        "eligible": {
          "description": "The entity that may execute the transition",
          "$ref": "#/definitions/EligibleEnum",
          "example": "CLIENT"
        },
        "from": {
          "type": "string",
          "x-nullable": false,
          "example": "START"
        },
        "to": {
          "type": "string",
          "x-nullable": false,
          "example": "END"
        }
      }
    },
    "Workflow": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "description": {
          "description": "Description of the workflow",
          "type": "string",
          "maxLength": 1024,
          "example": "This is a workflow"
        },
        "groups": {
          "type": "array",
          "maxItems": 1024,
          "items": {
            "$ref": "#/definitions/Group"
          },
          "x-omitempty": true
        },
        "name": {
          "description": "User provided unique workflow name",
          "type": "string",
          "maxLength": 64,
          "minLength": 1,
          "pattern": "^[a-zA-Z0-9\\-\\.]+$",
          "x-nullable": false,
          "example": "wfx.workflow.dau.direct"
        },
        "states": {
          "type": "array",
          "maxItems": 4096,
          "items": {
            "$ref": "#/definitions/State"
          },
          "x-omitempty": true
        },
        "transitions": {
          "type": "array",
          "maxItems": 16384,
          "items": {
            "$ref": "#/definitions/Transition"
          },
          "x-omitempty": true
        }
      }
    }
  },
  "parameters": {
    "clientId": {
      "type": "string",
      "description": "Filter jobs belonging to a specific client with clientId",
      "name": "clientId",
      "in": "query"
    },
    "group": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Filter jobs based on the group they are in",
      "name": "group",
      "in": "query"
    },
    "history": {
      "type": "boolean",
      "description": "Boolean flag to include the transition history of the job",
      "name": "history",
      "in": "query"
    },
    "jobId": {
      "type": "string",
      "description": "Job ID",
      "name": "id",
      "in": "path",
      "required": true
    },
    "limit": {
      "maxItems": 1024,
      "type": "integer",
      "format": "int32",
      "default": 10,
      "description": "the maximum number of items to return",
      "name": "limit",
      "in": "query"
    },
    "offset": {
      "type": "integer",
      "format": "int64",
      "default": 0,
      "description": "the number of items to skip before starting to return results",
      "name": "offset",
      "in": "query"
    },
    "sort": {
      "enum": [
        "asc",
        "desc"
      ],
      "type": "string",
      "default": "asc",
      "description": "the order of returned elements",
      "name": "sort",
      "in": "query"
    },
    "state": {
      "type": "string",
      "description": "Filter jobs based on the current state value",
      "name": "state",
      "in": "query"
    },
    "tag": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Filter jobs by tags",
      "name": "tag",
      "in": "query"
    },
    "workflow": {
      "type": "string",
      "description": "Filter jobs matching by workflow",
      "name": "workflow",
      "in": "query"
    }
  },
  "tags": [
    {
      "description": "Workflows used to instantiate jobs",
      "name": "workflows"
    },
    {
      "description": "Jobs derived from workflows and executed by a client",
      "name": "jobs"
    },
    {
      "description": "All southbound API endpoints",
      "name": "southbound"
    },
    {
      "description": "All northbound API endpoints",
      "name": "northbound"
    }
  ],
  "x-definitions-templates": {
    "Limits": {
      "maxErrorCount": {
        "maxItems": 128
      },
      "maxGroupCount": {
        "maxItems": 1024
      },
      "maxHistoryCount": {
        "maxItems": 8192
      },
      "maxItemsCount": {
        "maxItems": 1024
      },
      "maxStateCount": {
        "maxItems": 4096
      },
      "maxTagsCount": {
        "maxItems": 16
      },
      "maxTransitionCount": {
        "maxItems": 16384
      }
    },
    "Pagination": {
      "pagination": {
        "properties": {
          "limit": {
            "description": "the maximum number of items to return",
            "example": 20,
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "description": "the number of items to skip before starting to return results",
            "example": 0,
            "format": "int64",
            "type": "integer"
          },
          "total": {
            "description": "the total number of items",
            "example": 1000,
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      }
    }
  },
  "x-paths-templates": {
    "Errors": {
      "invalidRequestError": {
        "code": "wfx.invalidRequest",
        "logref": "96a37ea1f7d205ffbfa12334c6812727",
        "message": "The request was invalid and could not be completed by the storage"
      },
      "jobNotFoundError": {
        "code": "wfx.jobNotFound",
        "logref": "11cc67762090e15b79a1387eca65ba65",
        "message": "Job ID was not found"
      },
      "jobTerminalStateError": {
        "code": "wfx.jobTerminalState",
        "logref": "916f0a913a3e4a52a96bd271e029c201",
        "message": "The request was invalid because the job is in a terminal state"
      },
      "workflowInvalidError": {
        "code": "wfx.workflowInvalid",
        "logref": "18f57adc70dd79c7fb4f1246be8a6e04",
        "message": "Workflow validation failed"
      },
      "workflowNotFoundError": {
        "code": "wfx.workflowNotFound",
        "logref": "c452719774086b6e803bb8f6ecea9899",
        "message": "Workflow not found for given name"
      },
      "workflowNotUniqueError": {
        "code": "wfx.workflowNotUnique",
        "logref": "e1ee1f2aea859b9dd34579610e386da6",
        "message": "Workflow with name already exists"
      }
    }
  }
}`))
}
