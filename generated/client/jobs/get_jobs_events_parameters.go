// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: 2023 Siemens AG
//
// SPDX-License-Identifier: Apache-2.0
//

package jobs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetJobsEventsParams creates a new GetJobsEventsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetJobsEventsParams() *GetJobsEventsParams {
	return &GetJobsEventsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetJobsEventsParamsWithTimeout creates a new GetJobsEventsParams object
// with the ability to set a timeout on a request.
func NewGetJobsEventsParamsWithTimeout(timeout time.Duration) *GetJobsEventsParams {
	return &GetJobsEventsParams{
		timeout: timeout,
	}
}

// NewGetJobsEventsParamsWithContext creates a new GetJobsEventsParams object
// with the ability to set a context for a request.
func NewGetJobsEventsParamsWithContext(ctx context.Context) *GetJobsEventsParams {
	return &GetJobsEventsParams{
		Context: ctx,
	}
}

// NewGetJobsEventsParamsWithHTTPClient creates a new GetJobsEventsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetJobsEventsParamsWithHTTPClient(client *http.Client) *GetJobsEventsParams {
	return &GetJobsEventsParams{
		HTTPClient: client,
	}
}

/*
GetJobsEventsParams contains all the parameters to send to the API endpoint

	for the get jobs events operation.

	Typically these are written to a http.Request.
*/
type GetJobsEventsParams struct {

	/* ClientIds.

	   The job's clientId must be one of these clientIds (comma-separated).
	*/
	ClientIds *string

	/* JobIds.

	   The job's id must be one of these ids (comma-separated).
	*/
	JobIds *string

	/* Tags.

	   A (comma-separated) list of tags to include into each job event. This can be used to aggregrate events from multiple wfx instances.

	*/
	Tags *string

	/* Workflows.

	   The job's workflow must be equal to one of the provided workflow names (comma-separated).
	*/
	Workflows *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get jobs events params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetJobsEventsParams) WithDefaults() *GetJobsEventsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get jobs events params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetJobsEventsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get jobs events params
func (o *GetJobsEventsParams) WithTimeout(timeout time.Duration) *GetJobsEventsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get jobs events params
func (o *GetJobsEventsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get jobs events params
func (o *GetJobsEventsParams) WithContext(ctx context.Context) *GetJobsEventsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get jobs events params
func (o *GetJobsEventsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get jobs events params
func (o *GetJobsEventsParams) WithHTTPClient(client *http.Client) *GetJobsEventsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get jobs events params
func (o *GetJobsEventsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClientIds adds the clientIds to the get jobs events params
func (o *GetJobsEventsParams) WithClientIds(clientIds *string) *GetJobsEventsParams {
	o.SetClientIds(clientIds)
	return o
}

// SetClientIds adds the clientIds to the get jobs events params
func (o *GetJobsEventsParams) SetClientIds(clientIds *string) {
	o.ClientIds = clientIds
}

// WithJobIds adds the jobIds to the get jobs events params
func (o *GetJobsEventsParams) WithJobIds(jobIds *string) *GetJobsEventsParams {
	o.SetJobIds(jobIds)
	return o
}

// SetJobIds adds the jobIds to the get jobs events params
func (o *GetJobsEventsParams) SetJobIds(jobIds *string) {
	o.JobIds = jobIds
}

// WithTags adds the tags to the get jobs events params
func (o *GetJobsEventsParams) WithTags(tags *string) *GetJobsEventsParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the get jobs events params
func (o *GetJobsEventsParams) SetTags(tags *string) {
	o.Tags = tags
}

// WithWorkflows adds the workflows to the get jobs events params
func (o *GetJobsEventsParams) WithWorkflows(workflows *string) *GetJobsEventsParams {
	o.SetWorkflows(workflows)
	return o
}

// SetWorkflows adds the workflows to the get jobs events params
func (o *GetJobsEventsParams) SetWorkflows(workflows *string) {
	o.Workflows = workflows
}

// WriteToRequest writes these params to a swagger request
func (o *GetJobsEventsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClientIds != nil {

		// query param clientIds
		var qrClientIds string

		if o.ClientIds != nil {
			qrClientIds = *o.ClientIds
		}
		qClientIds := qrClientIds
		if qClientIds != "" {

			if err := r.SetQueryParam("clientIds", qClientIds); err != nil {
				return err
			}
		}
	}

	if o.JobIds != nil {

		// query param jobIds
		var qrJobIds string

		if o.JobIds != nil {
			qrJobIds = *o.JobIds
		}
		qJobIds := qrJobIds
		if qJobIds != "" {

			if err := r.SetQueryParam("jobIds", qJobIds); err != nil {
				return err
			}
		}
	}

	if o.Tags != nil {

		// query param tags
		var qrTags string

		if o.Tags != nil {
			qrTags = *o.Tags
		}
		qTags := qrTags
		if qTags != "" {

			if err := r.SetQueryParam("tags", qTags); err != nil {
				return err
			}
		}
	}

	if o.Workflows != nil {

		// query param workflows
		var qrWorkflows string

		if o.Workflows != nil {
			qrWorkflows = *o.Workflows
		}
		qWorkflows := qrWorkflows
		if qWorkflows != "" {

			if err := r.SetQueryParam("workflows", qWorkflows); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
