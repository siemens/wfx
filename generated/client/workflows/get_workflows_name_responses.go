// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: 2023 Siemens AG
//
// SPDX-License-Identifier: Apache-2.0
//

package workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/siemens/wfx/generated/model"
)

// GetWorkflowsNameReader is a Reader for the GetWorkflowsName structure.
type GetWorkflowsNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetWorkflowsNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetWorkflowsNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetWorkflowsNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetWorkflowsNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetWorkflowsNameDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetWorkflowsNameOK creates a GetWorkflowsNameOK with default headers values
func NewGetWorkflowsNameOK() *GetWorkflowsNameOK {
	return &GetWorkflowsNameOK{}
}

/*
GetWorkflowsNameOK describes a response with status code 200, with default header values.

Workflow description with the provided key
*/
type GetWorkflowsNameOK struct {
	Payload *model.Workflow
}

// IsSuccess returns true when this get workflows name o k response has a 2xx status code
func (o *GetWorkflowsNameOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get workflows name o k response has a 3xx status code
func (o *GetWorkflowsNameOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workflows name o k response has a 4xx status code
func (o *GetWorkflowsNameOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get workflows name o k response has a 5xx status code
func (o *GetWorkflowsNameOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get workflows name o k response a status code equal to that given
func (o *GetWorkflowsNameOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get workflows name o k response
func (o *GetWorkflowsNameOK) Code() int {
	return 200
}

func (o *GetWorkflowsNameOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workflows/{name}][%d] getWorkflowsNameOK %s", 200, payload)
}

func (o *GetWorkflowsNameOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workflows/{name}][%d] getWorkflowsNameOK %s", 200, payload)
}

func (o *GetWorkflowsNameOK) GetPayload() *model.Workflow {
	return o.Payload
}

func (o *GetWorkflowsNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(model.Workflow)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkflowsNameBadRequest creates a GetWorkflowsNameBadRequest with default headers values
func NewGetWorkflowsNameBadRequest() *GetWorkflowsNameBadRequest {
	return &GetWorkflowsNameBadRequest{}
}

/*
GetWorkflowsNameBadRequest describes a response with status code 400, with default header values.

If request is invalid
*/
type GetWorkflowsNameBadRequest struct {
	Payload *model.ErrorResponse
}

// IsSuccess returns true when this get workflows name bad request response has a 2xx status code
func (o *GetWorkflowsNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get workflows name bad request response has a 3xx status code
func (o *GetWorkflowsNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workflows name bad request response has a 4xx status code
func (o *GetWorkflowsNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get workflows name bad request response has a 5xx status code
func (o *GetWorkflowsNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get workflows name bad request response a status code equal to that given
func (o *GetWorkflowsNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get workflows name bad request response
func (o *GetWorkflowsNameBadRequest) Code() int {
	return 400
}

func (o *GetWorkflowsNameBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workflows/{name}][%d] getWorkflowsNameBadRequest %s", 400, payload)
}

func (o *GetWorkflowsNameBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workflows/{name}][%d] getWorkflowsNameBadRequest %s", 400, payload)
}

func (o *GetWorkflowsNameBadRequest) GetPayload() *model.ErrorResponse {
	return o.Payload
}

func (o *GetWorkflowsNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(model.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkflowsNameNotFound creates a GetWorkflowsNameNotFound with default headers values
func NewGetWorkflowsNameNotFound() *GetWorkflowsNameNotFound {
	return &GetWorkflowsNameNotFound{}
}

/*
GetWorkflowsNameNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetWorkflowsNameNotFound struct {
	Payload *model.ErrorResponse
}

// IsSuccess returns true when this get workflows name not found response has a 2xx status code
func (o *GetWorkflowsNameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get workflows name not found response has a 3xx status code
func (o *GetWorkflowsNameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workflows name not found response has a 4xx status code
func (o *GetWorkflowsNameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get workflows name not found response has a 5xx status code
func (o *GetWorkflowsNameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get workflows name not found response a status code equal to that given
func (o *GetWorkflowsNameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get workflows name not found response
func (o *GetWorkflowsNameNotFound) Code() int {
	return 404
}

func (o *GetWorkflowsNameNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workflows/{name}][%d] getWorkflowsNameNotFound %s", 404, payload)
}

func (o *GetWorkflowsNameNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workflows/{name}][%d] getWorkflowsNameNotFound %s", 404, payload)
}

func (o *GetWorkflowsNameNotFound) GetPayload() *model.ErrorResponse {
	return o.Payload
}

func (o *GetWorkflowsNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(model.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkflowsNameDefault creates a GetWorkflowsNameDefault with default headers values
func NewGetWorkflowsNameDefault(code int) *GetWorkflowsNameDefault {
	return &GetWorkflowsNameDefault{
		_statusCode: code,
	}
}

/*
GetWorkflowsNameDefault describes a response with status code -1, with default header values.

Other error with any status code and response body format.
*/
type GetWorkflowsNameDefault struct {
	_statusCode int
}

// IsSuccess returns true when this get workflows name default response has a 2xx status code
func (o *GetWorkflowsNameDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get workflows name default response has a 3xx status code
func (o *GetWorkflowsNameDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get workflows name default response has a 4xx status code
func (o *GetWorkflowsNameDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get workflows name default response has a 5xx status code
func (o *GetWorkflowsNameDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get workflows name default response a status code equal to that given
func (o *GetWorkflowsNameDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get workflows name default response
func (o *GetWorkflowsNameDefault) Code() int {
	return o._statusCode
}

func (o *GetWorkflowsNameDefault) Error() string {
	return fmt.Sprintf("[GET /workflows/{name}][%d] GetWorkflowsName default", o._statusCode)
}

func (o *GetWorkflowsNameDefault) String() string {
	return fmt.Sprintf("[GET /workflows/{name}][%d] GetWorkflowsName default", o._statusCode)
}

func (o *GetWorkflowsNameDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
