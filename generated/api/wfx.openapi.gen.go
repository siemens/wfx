//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Defines values for ActionEnum.
const (
	IMMEDIATE ActionEnum = "IMMEDIATE"
	WAIT      ActionEnum = "WAIT"
)

// Defines values for AvailabilityStatus.
const (
	Down    AvailabilityStatus = "down"
	Unknown AvailabilityStatus = "unknown"
	Up      AvailabilityStatus = "up"
)

// Defines values for EligibleEnum.
const (
	CLIENT EligibleEnum = "CLIENT"
	WFX    EligibleEnum = "WFX"
)

// Defines values for JobEventAction.
const (
	ADDTAGS          JobEventAction = "ADD_TAGS"
	CREATE           JobEventAction = "CREATE"
	DELETE           JobEventAction = "DELETE"
	DELETETAGS       JobEventAction = "DELETE_TAGS"
	UPDATEDEFINITION JobEventAction = "UPDATE_DEFINITION"
	UPDATESTATUS     JobEventAction = "UPDATE_STATUS"
)

// Defines values for SortEnum.
const (
	Asc  SortEnum = "asc"
	Desc SortEnum = "desc"
)

// ActionEnum defines model for ActionEnum.
type ActionEnum string

// AvailabilityStatus Enumeration of possible availability statuses.
type AvailabilityStatus string

// CheckResult Health information for a checked component.
type CheckResult struct {
	// Error The check error message, if the check failed.
	Error string `json:"error,omitempty"`

	// Status Enumeration of possible availability statuses.
	Status AvailabilityStatus `json:"status,omitempty"`

	// Timestamp The time when the check was executed.
	Timestamp time.Time `json:"timestamp,omitempty"`
}

// CheckerResult defines model for CheckerResult.
type CheckerResult struct {
	// Details Details contains health information for all checked components.
	Details *map[string]CheckResult `json:"details,omitempty"`

	// Info Info contains additional information about this health result.
	Info *map[string]interface{} `json:"info,omitempty"`

	// Status Enumeration of possible availability statuses.
	Status AvailabilityStatus `json:"status,omitempty"`
}

// EligibleEnum defines model for EligibleEnum.
type EligibleEnum string

// Error defines model for Error.
type Error struct {
	// Code Identifier code for the reason of the error
	Code string `json:"code"`

	// Logref Log correlation ID
	Logref string `json:"logref"`

	// Message Error message
	Message string `json:"message"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Errors *[]Error `json:"errors,omitempty"`
}

// Group defines model for Group.
type Group struct {
	Description string `json:"description,omitempty"`
	Name        string `json:"name"`

	// States A list of states belonging to this group
	States []string `json:"states"`
}

// History defines model for History.
type History struct {
	Definition *map[string]interface{} `json:"definition,omitempty"`

	// Mtime Date and time (ISO8601) when the job was modified (set by wfx)
	Mtime *time.Time `json:"mtime,omitempty"`

	// Status Job status information
	Status *JobStatus `json:"status,omitempty"`
}

// Job defines model for Job.
type Job struct {
	ClientID   string                 `json:"clientId,omitempty"`
	Definition map[string]interface{} `json:"definition,omitempty"`

	// History The job's history. Last in, first out (LIFO). Array is truncated if its length exceeds the maximum allowed length.
	// By default, the job history is omitted from responses unless explicitly requested by the client (see the `history` URL parameter).
	History *[]History `json:"history,omitempty"`

	// ID Unique job ID (wfx-generated)
	ID string `json:"id,omitempty"`

	// Mtime Date and time (ISO8601) when the job was last modified (set by wfx)
	Mtime *time.Time `json:"mtime"`

	// Status Job status information
	Status *JobStatus `json:"status,omitempty"`

	// Stime Date and time (ISO8601) when the job was created (set by wfx). Although stime conceptually always exists, it's nullable because we don't want to serialize stime in some cases (e.g. for job events).
	Stime    *time.Time `json:"stime"`
	Tags     TagList    `json:"tags,omitempty"`
	Workflow *Workflow  `json:"workflow,omitempty"`
}

// JobEvent defines model for JobEvent.
type JobEvent struct {
	Action JobEventAction `json:"action"`

	// Ctime Date and time (ISO8601) when the event was created
	Ctime time.Time `json:"ctime"`
	Job   Job       `json:"job"`
	Tags  *[]string `json:"tags,omitempty"`
}

// JobEventAction defines model for JobEventAction.
type JobEventAction string

// JobRequest defines model for JobRequest.
type JobRequest struct {
	// ClientID Create job for the given client ID
	ClientID string `json:"clientId"`

	// Definition The existing job definition will be replaced with this if this property is not empty.
	Definition map[string]interface{} `json:"definition,omitempty"`
	Tags       TagList                `json:"tags,omitempty"`

	// Workflow Workflow name
	Workflow string `json:"workflow"`
}

// JobStatus Job status information
type JobStatus struct {
	// ClientID Client which sent the status update
	ClientID string `json:"clientId,omitempty"`

	// Context Client-specific JSON object to report additional context information such as error details, stack traces, etc
	Context *map[string]interface{} `json:"context,omitempty"`

	// DefinitionHash Job definition hash
	DefinitionHash string `json:"definitionHash,omitempty"`

	// Message Reason message/info, free text from client
	Message string `json:"message,omitempty"`

	// Progress Current job progress percentage
	Progress *int32 `json:"progress,omitempty"`

	// State Name of the new workflow state
	State string `json:"state"`
}

// PaginatedJobList Paginated list of jobs
type PaginatedJobList struct {
	Content    []Job      `json:"content"`
	Pagination Pagination `json:"pagination"`
}

// PaginatedWorkflowList Paginated list of workflows
type PaginatedWorkflowList struct {
	Content    []Workflow `json:"content"`
	Pagination Pagination `json:"pagination"`
}

// Pagination defines model for Pagination.
type Pagination struct {
	// Limit the maximum number of items to return
	Limit int32 `json:"limit"`

	// Offset the number of items to skip before starting to return results
	Offset int64 `json:"offset"`

	// Total the total number of items
	Total int64 `json:"total"`
}

// SortEnum defines model for SortEnum.
type SortEnum string

// State defines model for State.
type State struct {
	Description string `json:"description,omitempty"`
	Name        string `json:"name"`
}

// TagList defines model for TagList.
type TagList = []string

// Transition defines model for Transition.
type Transition struct {
	Action      *ActionEnum  `json:"action,omitempty"`
	Description string       `json:"description,omitempty"`
	Eligible    EligibleEnum `json:"eligible"`
	From        string       `json:"from"`
	To          string       `json:"to"`
}

// Workflow defines model for Workflow.
type Workflow struct {
	// Description Description of the workflow
	Description string  `json:"description,omitempty"`
	Groups      []Group `json:"groups,omitempty"`

	// Name User provided unique workflow name
	Name        string       `json:"name"`
	States      []State      `json:"states,omitempty"`
	Transitions []Transition `json:"transitions,omitempty"`
}

// paramClientID defines model for clientId.
type paramClientID = string

// paramGroup defines model for group.
type paramGroup = []string

// paramHistory defines model for history.
type paramHistory = bool

// paramLimit defines model for limit.
type paramLimit = int32

// paramOffset defines model for offset.
type paramOffset = int64

// ResponseFilter defines model for responseFilter.
type ResponseFilter = string

// paramSort defines model for sort.
type paramSort = SortEnum

// paramState defines model for state.
type paramState = string

// paramTag defines model for tag.
type paramTag = TagList

// GetJobsParams defines parameters for GetJobs.
type GetJobsParams struct {
	// ParamLimit the maximum number of items to return
	ParamLimit *paramLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// ParamOffset the number of items to skip before starting to return results
	ParamOffset *paramOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// ParamSort the order of returned elements
	ParamSort *paramSort `form:"sort,omitempty" json:"sort,omitempty"`

	// ParamState Filter jobs based on the current state value
	ParamState *paramState `form:"state,omitempty" json:"state,omitempty"`

	// ParamGroup Filter jobs based on the group they are in
	ParamGroup *paramGroup `form:"group,omitempty" json:"group,omitempty"`

	// ParamClientID Filter jobs belonging to a specific client with clientId
	ParamClientID *paramClientID `form:"clientId,omitempty" json:"clientId,omitempty"`

	// ParamTag A list of tags
	ParamTag *paramTag `form:"tag,omitempty" json:"tag,omitempty"`

	// ParamWorkflow Filter jobs matching by workflow
	ParamWorkflow *string `form:"workflow,omitempty" json:"workflow,omitempty"`

	// XResponseFilter Apply a jq-like filter to the response
	XResponseFilter *ResponseFilter `json:"X-Response-Filter,omitempty"`
}

// PostJobsParams defines parameters for PostJobs.
type PostJobsParams struct {
	// XResponseFilter Apply a jq-like filter to the response
	XResponseFilter *ResponseFilter `json:"X-Response-Filter,omitempty"`
}

// GetJobsEventsParams defines parameters for GetJobsEvents.
type GetJobsEventsParams struct {
	// ClientIDs Subscribe to events whose clientID matches one of the given clientIds (comma-separated). This is a filter.
	ClientIDs *string `form:"clientIds,omitempty" json:"clientIds,omitempty"`

	// JobIds Subscribe to events whose job ID is one of the given jobIds (comma-separated). This is a filter.
	JobIds *string `form:"jobIds,omitempty" json:"jobIds,omitempty"`

	// Workflows Subscribe to events whose workflow name is one of the given workflow names (comma-separated). This is a filter.
	Workflows *string `form:"workflows,omitempty" json:"workflows,omitempty"`

	// Actions Subscribe to events whose job event action is one of the given actions (comma-separated, case-insenstive). This is a filter.
	Actions *string `form:"actions,omitempty" json:"actions,omitempty"`

	// Tags A (comma-separated) list of tags to apply to each job event. This can be used to aggregrate events from multiple wfx instances.
	Tags *string `form:"tags,omitempty" json:"tags,omitempty"`
}

// GetJobsIdParams defines parameters for GetJobsId.
type GetJobsIdParams struct {
	// ParamHistory Boolean flag to include the transition history of the job
	ParamHistory *paramHistory `form:"history,omitempty" json:"history,omitempty"`

	// XResponseFilter Apply a jq-like filter to the response
	XResponseFilter *ResponseFilter `json:"X-Response-Filter,omitempty"`
}

// GetJobsIdDefinitionParams defines parameters for GetJobsIdDefinition.
type GetJobsIdDefinitionParams struct {
	// XResponseFilter Apply a jq-like filter to the response
	XResponseFilter *ResponseFilter `json:"X-Response-Filter,omitempty"`
}

// PutJobsIdDefinitionJSONBody defines parameters for PutJobsIdDefinition.
type PutJobsIdDefinitionJSONBody = map[string]interface{}

// PutJobsIdDefinitionParams defines parameters for PutJobsIdDefinition.
type PutJobsIdDefinitionParams struct {
	// XResponseFilter Apply a jq-like filter to the response
	XResponseFilter *ResponseFilter `json:"X-Response-Filter,omitempty"`
}

// GetJobsIdStatusParams defines parameters for GetJobsIdStatus.
type GetJobsIdStatusParams struct {
	// XResponseFilter Apply a jq-like filter to the response
	XResponseFilter *ResponseFilter `json:"X-Response-Filter,omitempty"`
}

// PutJobsIdStatusParams defines parameters for PutJobsIdStatus.
type PutJobsIdStatusParams struct {
	// XResponseFilter Apply a jq-like filter to the response
	XResponseFilter *ResponseFilter `json:"X-Response-Filter,omitempty"`
}

// DeleteJobsIdTagsJSONBody defines parameters for DeleteJobsIdTags.
type DeleteJobsIdTagsJSONBody = []string

// DeleteJobsIdTagsParams defines parameters for DeleteJobsIdTags.
type DeleteJobsIdTagsParams struct {
	// XResponseFilter Apply a jq-like filter to the response
	XResponseFilter *ResponseFilter `json:"X-Response-Filter,omitempty"`
}

// GetJobsIdTagsParams defines parameters for GetJobsIdTags.
type GetJobsIdTagsParams struct {
	// XResponseFilter Apply a jq-like filter to the response
	XResponseFilter *ResponseFilter `json:"X-Response-Filter,omitempty"`
}

// PostJobsIdTagsJSONBody defines parameters for PostJobsIdTags.
type PostJobsIdTagsJSONBody = []string

// PostJobsIdTagsParams defines parameters for PostJobsIdTags.
type PostJobsIdTagsParams struct {
	// XResponseFilter Apply a jq-like filter to the response
	XResponseFilter *ResponseFilter `json:"X-Response-Filter,omitempty"`
}

// GetWorkflowsParams defines parameters for GetWorkflows.
type GetWorkflowsParams struct {
	// ParamLimit the maximum number of items to return
	ParamLimit *paramLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// ParamOffset the number of items to skip before starting to return results
	ParamOffset *paramOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// ParamSort the order of returned elements
	ParamSort *paramSort `form:"sort,omitempty" json:"sort,omitempty"`

	// XResponseFilter Apply a jq-like filter to the response
	XResponseFilter *ResponseFilter `json:"X-Response-Filter,omitempty"`
}

// PostWorkflowsParams defines parameters for PostWorkflows.
type PostWorkflowsParams struct {
	// XResponseFilter Apply a jq-like filter to the response
	XResponseFilter *ResponseFilter `json:"X-Response-Filter,omitempty"`
}

// GetWorkflowsNameParams defines parameters for GetWorkflowsName.
type GetWorkflowsNameParams struct {
	// XResponseFilter Apply a jq-like filter to the response
	XResponseFilter *ResponseFilter `json:"X-Response-Filter,omitempty"`
}

// PostJobsJSONRequestBody defines body for PostJobs for application/json ContentType.
type PostJobsJSONRequestBody = JobRequest

// PutJobsIdDefinitionJSONRequestBody defines body for PutJobsIdDefinition for application/json ContentType.
type PutJobsIdDefinitionJSONRequestBody = PutJobsIdDefinitionJSONBody

// PutJobsIdStatusJSONRequestBody defines body for PutJobsIdStatus for application/json ContentType.
type PutJobsIdStatusJSONRequestBody = JobStatus

// DeleteJobsIdTagsJSONRequestBody defines body for DeleteJobsIdTags for application/json ContentType.
type DeleteJobsIdTagsJSONRequestBody = DeleteJobsIdTagsJSONBody

// PostJobsIdTagsJSONRequestBody defines body for PostJobsIdTags for application/json ContentType.
type PostJobsIdTagsJSONRequestBody = PostJobsIdTagsJSONBody

// PostWorkflowsJSONRequestBody defines body for PostWorkflows for application/json ContentType.
type PostWorkflowsJSONRequestBody = Workflow

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetHealth request
	GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobs request
	GetJobs(ctx context.Context, params *GetJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJobsWithBody request with any body
	PostJobsWithBody(ctx context.Context, params *PostJobsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJobs(ctx context.Context, params *PostJobsParams, body PostJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobsEvents request
	GetJobsEvents(ctx context.Context, params *GetJobsEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteJobsId request
	DeleteJobsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobsId request
	GetJobsId(ctx context.Context, id string, params *GetJobsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobsIdDefinition request
	GetJobsIdDefinition(ctx context.Context, id string, params *GetJobsIdDefinitionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutJobsIdDefinitionWithBody request with any body
	PutJobsIdDefinitionWithBody(ctx context.Context, id string, params *PutJobsIdDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutJobsIdDefinition(ctx context.Context, id string, params *PutJobsIdDefinitionParams, body PutJobsIdDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobsIdStatus request
	GetJobsIdStatus(ctx context.Context, id string, params *GetJobsIdStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutJobsIdStatusWithBody request with any body
	PutJobsIdStatusWithBody(ctx context.Context, id string, params *PutJobsIdStatusParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutJobsIdStatus(ctx context.Context, id string, params *PutJobsIdStatusParams, body PutJobsIdStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteJobsIdTagsWithBody request with any body
	DeleteJobsIdTagsWithBody(ctx context.Context, id string, params *DeleteJobsIdTagsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteJobsIdTags(ctx context.Context, id string, params *DeleteJobsIdTagsParams, body DeleteJobsIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobsIdTags request
	GetJobsIdTags(ctx context.Context, id string, params *GetJobsIdTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJobsIdTagsWithBody request with any body
	PostJobsIdTagsWithBody(ctx context.Context, id string, params *PostJobsIdTagsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJobsIdTags(ctx context.Context, id string, params *PostJobsIdTagsParams, body PostJobsIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVersion request
	GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkflows request
	GetWorkflows(ctx context.Context, params *GetWorkflowsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostWorkflowsWithBody request with any body
	PostWorkflowsWithBody(ctx context.Context, params *PostWorkflowsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostWorkflows(ctx context.Context, params *PostWorkflowsParams, body PostWorkflowsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkflowsName request
	DeleteWorkflowsName(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkflowsName request
	GetWorkflowsName(ctx context.Context, name string, params *GetWorkflowsNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobs(ctx context.Context, params *GetJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJobsWithBody(ctx context.Context, params *PostJobsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJobsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJobs(ctx context.Context, params *PostJobsParams, body PostJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJobsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobsEvents(ctx context.Context, params *GetJobsEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobsEventsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteJobsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteJobsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobsId(ctx context.Context, id string, params *GetJobsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobsIdDefinition(ctx context.Context, id string, params *GetJobsIdDefinitionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobsIdDefinitionRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutJobsIdDefinitionWithBody(ctx context.Context, id string, params *PutJobsIdDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutJobsIdDefinitionRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutJobsIdDefinition(ctx context.Context, id string, params *PutJobsIdDefinitionParams, body PutJobsIdDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutJobsIdDefinitionRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobsIdStatus(ctx context.Context, id string, params *GetJobsIdStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobsIdStatusRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutJobsIdStatusWithBody(ctx context.Context, id string, params *PutJobsIdStatusParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutJobsIdStatusRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutJobsIdStatus(ctx context.Context, id string, params *PutJobsIdStatusParams, body PutJobsIdStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutJobsIdStatusRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteJobsIdTagsWithBody(ctx context.Context, id string, params *DeleteJobsIdTagsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteJobsIdTagsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteJobsIdTags(ctx context.Context, id string, params *DeleteJobsIdTagsParams, body DeleteJobsIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteJobsIdTagsRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobsIdTags(ctx context.Context, id string, params *GetJobsIdTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobsIdTagsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJobsIdTagsWithBody(ctx context.Context, id string, params *PostJobsIdTagsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJobsIdTagsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJobsIdTags(ctx context.Context, id string, params *PostJobsIdTagsParams, body PostJobsIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJobsIdTagsRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkflows(ctx context.Context, params *GetWorkflowsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkflowsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWorkflowsWithBody(ctx context.Context, params *PostWorkflowsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWorkflowsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWorkflows(ctx context.Context, params *PostWorkflowsParams, body PostWorkflowsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWorkflowsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkflowsName(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkflowsNameRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkflowsName(ctx context.Context, name string, params *GetWorkflowsNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkflowsNameRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetHealthRequest generates requests for GetHealth
func NewGetHealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobsRequest generates requests for GetJobs
func NewGetJobsRequest(server string, params *GetJobsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ParamLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.ParamLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParamOffset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.ParamOffset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParamSort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.ParamSort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParamState != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.ParamState); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParamGroup != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "group", runtime.ParamLocationQuery, *params.ParamGroup); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParamClientID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clientId", runtime.ParamLocationQuery, *params.ParamClientID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParamTag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "tag", runtime.ParamLocationQuery, *params.ParamTag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParamWorkflow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workflow", runtime.ParamLocationQuery, *params.ParamWorkflow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XResponseFilter != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Response-Filter", runtime.ParamLocationHeader, *params.XResponseFilter)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Response-Filter", headerParam0)
		}

	}

	return req, nil
}

// NewPostJobsRequest calls the generic PostJobs builder with application/json body
func NewPostJobsRequest(server string, params *PostJobsParams, body PostJobsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJobsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostJobsRequestWithBody generates requests for PostJobs with any type of body
func NewPostJobsRequestWithBody(server string, params *PostJobsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XResponseFilter != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Response-Filter", runtime.ParamLocationHeader, *params.XResponseFilter)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Response-Filter", headerParam0)
		}

	}

	return req, nil
}

// NewGetJobsEventsRequest generates requests for GetJobsEvents
func NewGetJobsEventsRequest(server string, params *GetJobsEventsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ClientIDs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clientIds", runtime.ParamLocationQuery, *params.ClientIDs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JobIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "jobIds", runtime.ParamLocationQuery, *params.JobIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Workflows != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workflows", runtime.ParamLocationQuery, *params.Workflows); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Actions != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "actions", runtime.ParamLocationQuery, *params.Actions); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteJobsIdRequest generates requests for DeleteJobsId
func NewDeleteJobsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobsIdRequest generates requests for GetJobsId
func NewGetJobsIdRequest(server string, id string, params *GetJobsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ParamHistory != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "history", runtime.ParamLocationQuery, *params.ParamHistory); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XResponseFilter != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Response-Filter", runtime.ParamLocationHeader, *params.XResponseFilter)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Response-Filter", headerParam0)
		}

	}

	return req, nil
}

// NewGetJobsIdDefinitionRequest generates requests for GetJobsIdDefinition
func NewGetJobsIdDefinitionRequest(server string, id string, params *GetJobsIdDefinitionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/definition", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XResponseFilter != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Response-Filter", runtime.ParamLocationHeader, *params.XResponseFilter)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Response-Filter", headerParam0)
		}

	}

	return req, nil
}

// NewPutJobsIdDefinitionRequest calls the generic PutJobsIdDefinition builder with application/json body
func NewPutJobsIdDefinitionRequest(server string, id string, params *PutJobsIdDefinitionParams, body PutJobsIdDefinitionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutJobsIdDefinitionRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutJobsIdDefinitionRequestWithBody generates requests for PutJobsIdDefinition with any type of body
func NewPutJobsIdDefinitionRequestWithBody(server string, id string, params *PutJobsIdDefinitionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/definition", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XResponseFilter != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Response-Filter", runtime.ParamLocationHeader, *params.XResponseFilter)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Response-Filter", headerParam0)
		}

	}

	return req, nil
}

// NewGetJobsIdStatusRequest generates requests for GetJobsIdStatus
func NewGetJobsIdStatusRequest(server string, id string, params *GetJobsIdStatusParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XResponseFilter != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Response-Filter", runtime.ParamLocationHeader, *params.XResponseFilter)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Response-Filter", headerParam0)
		}

	}

	return req, nil
}

// NewPutJobsIdStatusRequest calls the generic PutJobsIdStatus builder with application/json body
func NewPutJobsIdStatusRequest(server string, id string, params *PutJobsIdStatusParams, body PutJobsIdStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutJobsIdStatusRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutJobsIdStatusRequestWithBody generates requests for PutJobsIdStatus with any type of body
func NewPutJobsIdStatusRequestWithBody(server string, id string, params *PutJobsIdStatusParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XResponseFilter != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Response-Filter", runtime.ParamLocationHeader, *params.XResponseFilter)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Response-Filter", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteJobsIdTagsRequest calls the generic DeleteJobsIdTags builder with application/json body
func NewDeleteJobsIdTagsRequest(server string, id string, params *DeleteJobsIdTagsParams, body DeleteJobsIdTagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteJobsIdTagsRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewDeleteJobsIdTagsRequestWithBody generates requests for DeleteJobsIdTags with any type of body
func NewDeleteJobsIdTagsRequestWithBody(server string, id string, params *DeleteJobsIdTagsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/tags", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XResponseFilter != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Response-Filter", runtime.ParamLocationHeader, *params.XResponseFilter)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Response-Filter", headerParam0)
		}

	}

	return req, nil
}

// NewGetJobsIdTagsRequest generates requests for GetJobsIdTags
func NewGetJobsIdTagsRequest(server string, id string, params *GetJobsIdTagsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/tags", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XResponseFilter != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Response-Filter", runtime.ParamLocationHeader, *params.XResponseFilter)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Response-Filter", headerParam0)
		}

	}

	return req, nil
}

// NewPostJobsIdTagsRequest calls the generic PostJobsIdTags builder with application/json body
func NewPostJobsIdTagsRequest(server string, id string, params *PostJobsIdTagsParams, body PostJobsIdTagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJobsIdTagsRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostJobsIdTagsRequestWithBody generates requests for PostJobsIdTags with any type of body
func NewPostJobsIdTagsRequestWithBody(server string, id string, params *PostJobsIdTagsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/tags", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XResponseFilter != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Response-Filter", runtime.ParamLocationHeader, *params.XResponseFilter)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Response-Filter", headerParam0)
		}

	}

	return req, nil
}

// NewGetVersionRequest generates requests for GetVersion
func NewGetVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkflowsRequest generates requests for GetWorkflows
func NewGetWorkflowsRequest(server string, params *GetWorkflowsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workflows")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ParamLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.ParamLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParamOffset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.ParamOffset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParamSort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.ParamSort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XResponseFilter != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Response-Filter", runtime.ParamLocationHeader, *params.XResponseFilter)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Response-Filter", headerParam0)
		}

	}

	return req, nil
}

// NewPostWorkflowsRequest calls the generic PostWorkflows builder with application/json body
func NewPostWorkflowsRequest(server string, params *PostWorkflowsParams, body PostWorkflowsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostWorkflowsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostWorkflowsRequestWithBody generates requests for PostWorkflows with any type of body
func NewPostWorkflowsRequestWithBody(server string, params *PostWorkflowsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workflows")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XResponseFilter != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Response-Filter", runtime.ParamLocationHeader, *params.XResponseFilter)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Response-Filter", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteWorkflowsNameRequest generates requests for DeleteWorkflowsName
func NewDeleteWorkflowsNameRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workflows/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkflowsNameRequest generates requests for GetWorkflowsName
func NewGetWorkflowsNameRequest(server string, name string, params *GetWorkflowsNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workflows/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XResponseFilter != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Response-Filter", runtime.ParamLocationHeader, *params.XResponseFilter)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Response-Filter", headerParam0)
		}

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetHealthWithResponse request
	GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error)

	// GetJobsWithResponse request
	GetJobsWithResponse(ctx context.Context, params *GetJobsParams, reqEditors ...RequestEditorFn) (*GetJobsResponse, error)

	// PostJobsWithBodyWithResponse request with any body
	PostJobsWithBodyWithResponse(ctx context.Context, params *PostJobsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJobsResponse, error)

	PostJobsWithResponse(ctx context.Context, params *PostJobsParams, body PostJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJobsResponse, error)

	// GetJobsEventsWithResponse request
	GetJobsEventsWithResponse(ctx context.Context, params *GetJobsEventsParams, reqEditors ...RequestEditorFn) (*GetJobsEventsResponse, error)

	// DeleteJobsIdWithResponse request
	DeleteJobsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteJobsIdResponse, error)

	// GetJobsIdWithResponse request
	GetJobsIdWithResponse(ctx context.Context, id string, params *GetJobsIdParams, reqEditors ...RequestEditorFn) (*GetJobsIdResponse, error)

	// GetJobsIdDefinitionWithResponse request
	GetJobsIdDefinitionWithResponse(ctx context.Context, id string, params *GetJobsIdDefinitionParams, reqEditors ...RequestEditorFn) (*GetJobsIdDefinitionResponse, error)

	// PutJobsIdDefinitionWithBodyWithResponse request with any body
	PutJobsIdDefinitionWithBodyWithResponse(ctx context.Context, id string, params *PutJobsIdDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutJobsIdDefinitionResponse, error)

	PutJobsIdDefinitionWithResponse(ctx context.Context, id string, params *PutJobsIdDefinitionParams, body PutJobsIdDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*PutJobsIdDefinitionResponse, error)

	// GetJobsIdStatusWithResponse request
	GetJobsIdStatusWithResponse(ctx context.Context, id string, params *GetJobsIdStatusParams, reqEditors ...RequestEditorFn) (*GetJobsIdStatusResponse, error)

	// PutJobsIdStatusWithBodyWithResponse request with any body
	PutJobsIdStatusWithBodyWithResponse(ctx context.Context, id string, params *PutJobsIdStatusParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutJobsIdStatusResponse, error)

	PutJobsIdStatusWithResponse(ctx context.Context, id string, params *PutJobsIdStatusParams, body PutJobsIdStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutJobsIdStatusResponse, error)

	// DeleteJobsIdTagsWithBodyWithResponse request with any body
	DeleteJobsIdTagsWithBodyWithResponse(ctx context.Context, id string, params *DeleteJobsIdTagsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteJobsIdTagsResponse, error)

	DeleteJobsIdTagsWithResponse(ctx context.Context, id string, params *DeleteJobsIdTagsParams, body DeleteJobsIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteJobsIdTagsResponse, error)

	// GetJobsIdTagsWithResponse request
	GetJobsIdTagsWithResponse(ctx context.Context, id string, params *GetJobsIdTagsParams, reqEditors ...RequestEditorFn) (*GetJobsIdTagsResponse, error)

	// PostJobsIdTagsWithBodyWithResponse request with any body
	PostJobsIdTagsWithBodyWithResponse(ctx context.Context, id string, params *PostJobsIdTagsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJobsIdTagsResponse, error)

	PostJobsIdTagsWithResponse(ctx context.Context, id string, params *PostJobsIdTagsParams, body PostJobsIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJobsIdTagsResponse, error)

	// GetVersionWithResponse request
	GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error)

	// GetWorkflowsWithResponse request
	GetWorkflowsWithResponse(ctx context.Context, params *GetWorkflowsParams, reqEditors ...RequestEditorFn) (*GetWorkflowsResponse, error)

	// PostWorkflowsWithBodyWithResponse request with any body
	PostWorkflowsWithBodyWithResponse(ctx context.Context, params *PostWorkflowsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWorkflowsResponse, error)

	PostWorkflowsWithResponse(ctx context.Context, params *PostWorkflowsParams, body PostWorkflowsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWorkflowsResponse, error)

	// DeleteWorkflowsNameWithResponse request
	DeleteWorkflowsNameWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*DeleteWorkflowsNameResponse, error)

	// GetWorkflowsNameWithResponse request
	GetWorkflowsNameWithResponse(ctx context.Context, name string, params *GetWorkflowsNameParams, reqEditors ...RequestEditorFn) (*GetWorkflowsNameResponse, error)
}

type GetHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckerResult
	JSON503      *CheckerResult
}

// Status returns HTTPResponse.Status
func (r GetHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedJobList
	JSON400      *ErrorResponse
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Job
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobsEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetJobsEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobsEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteJobsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteJobsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteJobsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Job
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetJobsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobsIdDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetJobsIdDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobsIdDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutJobsIdDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PutJobsIdDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutJobsIdDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobsIdStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobStatus
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetJobsIdStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobsIdStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutJobsIdStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobStatus
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PutJobsIdStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutJobsIdStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteJobsIdTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagList
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteJobsIdTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteJobsIdTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobsIdTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagList
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetJobsIdTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobsIdTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJobsIdTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagList
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostJobsIdTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJobsIdTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ApiVersion string `json:"apiVersion,omitempty"`
		Commit     string `json:"commit,omitempty"`
		Version    string `json:"version,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkflowsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedWorkflowList
}

// Status returns HTTPResponse.Status
func (r GetWorkflowsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkflowsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostWorkflowsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Workflow
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostWorkflowsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostWorkflowsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkflowsNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteWorkflowsNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkflowsNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkflowsNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workflow
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetWorkflowsNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkflowsNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetHealthWithResponse request returning *GetHealthResponse
func (c *ClientWithResponses) GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error) {
	rsp, err := c.GetHealth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHealthResponse(rsp)
}

// GetJobsWithResponse request returning *GetJobsResponse
func (c *ClientWithResponses) GetJobsWithResponse(ctx context.Context, params *GetJobsParams, reqEditors ...RequestEditorFn) (*GetJobsResponse, error) {
	rsp, err := c.GetJobs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobsResponse(rsp)
}

// PostJobsWithBodyWithResponse request with arbitrary body returning *PostJobsResponse
func (c *ClientWithResponses) PostJobsWithBodyWithResponse(ctx context.Context, params *PostJobsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJobsResponse, error) {
	rsp, err := c.PostJobsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJobsResponse(rsp)
}

func (c *ClientWithResponses) PostJobsWithResponse(ctx context.Context, params *PostJobsParams, body PostJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJobsResponse, error) {
	rsp, err := c.PostJobs(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJobsResponse(rsp)
}

// GetJobsEventsWithResponse request returning *GetJobsEventsResponse
func (c *ClientWithResponses) GetJobsEventsWithResponse(ctx context.Context, params *GetJobsEventsParams, reqEditors ...RequestEditorFn) (*GetJobsEventsResponse, error) {
	rsp, err := c.GetJobsEvents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobsEventsResponse(rsp)
}

// DeleteJobsIdWithResponse request returning *DeleteJobsIdResponse
func (c *ClientWithResponses) DeleteJobsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteJobsIdResponse, error) {
	rsp, err := c.DeleteJobsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteJobsIdResponse(rsp)
}

// GetJobsIdWithResponse request returning *GetJobsIdResponse
func (c *ClientWithResponses) GetJobsIdWithResponse(ctx context.Context, id string, params *GetJobsIdParams, reqEditors ...RequestEditorFn) (*GetJobsIdResponse, error) {
	rsp, err := c.GetJobsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobsIdResponse(rsp)
}

// GetJobsIdDefinitionWithResponse request returning *GetJobsIdDefinitionResponse
func (c *ClientWithResponses) GetJobsIdDefinitionWithResponse(ctx context.Context, id string, params *GetJobsIdDefinitionParams, reqEditors ...RequestEditorFn) (*GetJobsIdDefinitionResponse, error) {
	rsp, err := c.GetJobsIdDefinition(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobsIdDefinitionResponse(rsp)
}

// PutJobsIdDefinitionWithBodyWithResponse request with arbitrary body returning *PutJobsIdDefinitionResponse
func (c *ClientWithResponses) PutJobsIdDefinitionWithBodyWithResponse(ctx context.Context, id string, params *PutJobsIdDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutJobsIdDefinitionResponse, error) {
	rsp, err := c.PutJobsIdDefinitionWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutJobsIdDefinitionResponse(rsp)
}

func (c *ClientWithResponses) PutJobsIdDefinitionWithResponse(ctx context.Context, id string, params *PutJobsIdDefinitionParams, body PutJobsIdDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*PutJobsIdDefinitionResponse, error) {
	rsp, err := c.PutJobsIdDefinition(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutJobsIdDefinitionResponse(rsp)
}

// GetJobsIdStatusWithResponse request returning *GetJobsIdStatusResponse
func (c *ClientWithResponses) GetJobsIdStatusWithResponse(ctx context.Context, id string, params *GetJobsIdStatusParams, reqEditors ...RequestEditorFn) (*GetJobsIdStatusResponse, error) {
	rsp, err := c.GetJobsIdStatus(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobsIdStatusResponse(rsp)
}

// PutJobsIdStatusWithBodyWithResponse request with arbitrary body returning *PutJobsIdStatusResponse
func (c *ClientWithResponses) PutJobsIdStatusWithBodyWithResponse(ctx context.Context, id string, params *PutJobsIdStatusParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutJobsIdStatusResponse, error) {
	rsp, err := c.PutJobsIdStatusWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutJobsIdStatusResponse(rsp)
}

func (c *ClientWithResponses) PutJobsIdStatusWithResponse(ctx context.Context, id string, params *PutJobsIdStatusParams, body PutJobsIdStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutJobsIdStatusResponse, error) {
	rsp, err := c.PutJobsIdStatus(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutJobsIdStatusResponse(rsp)
}

// DeleteJobsIdTagsWithBodyWithResponse request with arbitrary body returning *DeleteJobsIdTagsResponse
func (c *ClientWithResponses) DeleteJobsIdTagsWithBodyWithResponse(ctx context.Context, id string, params *DeleteJobsIdTagsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteJobsIdTagsResponse, error) {
	rsp, err := c.DeleteJobsIdTagsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteJobsIdTagsResponse(rsp)
}

func (c *ClientWithResponses) DeleteJobsIdTagsWithResponse(ctx context.Context, id string, params *DeleteJobsIdTagsParams, body DeleteJobsIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteJobsIdTagsResponse, error) {
	rsp, err := c.DeleteJobsIdTags(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteJobsIdTagsResponse(rsp)
}

// GetJobsIdTagsWithResponse request returning *GetJobsIdTagsResponse
func (c *ClientWithResponses) GetJobsIdTagsWithResponse(ctx context.Context, id string, params *GetJobsIdTagsParams, reqEditors ...RequestEditorFn) (*GetJobsIdTagsResponse, error) {
	rsp, err := c.GetJobsIdTags(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobsIdTagsResponse(rsp)
}

// PostJobsIdTagsWithBodyWithResponse request with arbitrary body returning *PostJobsIdTagsResponse
func (c *ClientWithResponses) PostJobsIdTagsWithBodyWithResponse(ctx context.Context, id string, params *PostJobsIdTagsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJobsIdTagsResponse, error) {
	rsp, err := c.PostJobsIdTagsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJobsIdTagsResponse(rsp)
}

func (c *ClientWithResponses) PostJobsIdTagsWithResponse(ctx context.Context, id string, params *PostJobsIdTagsParams, body PostJobsIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJobsIdTagsResponse, error) {
	rsp, err := c.PostJobsIdTags(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJobsIdTagsResponse(rsp)
}

// GetVersionWithResponse request returning *GetVersionResponse
func (c *ClientWithResponses) GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error) {
	rsp, err := c.GetVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVersionResponse(rsp)
}

// GetWorkflowsWithResponse request returning *GetWorkflowsResponse
func (c *ClientWithResponses) GetWorkflowsWithResponse(ctx context.Context, params *GetWorkflowsParams, reqEditors ...RequestEditorFn) (*GetWorkflowsResponse, error) {
	rsp, err := c.GetWorkflows(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkflowsResponse(rsp)
}

// PostWorkflowsWithBodyWithResponse request with arbitrary body returning *PostWorkflowsResponse
func (c *ClientWithResponses) PostWorkflowsWithBodyWithResponse(ctx context.Context, params *PostWorkflowsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWorkflowsResponse, error) {
	rsp, err := c.PostWorkflowsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWorkflowsResponse(rsp)
}

func (c *ClientWithResponses) PostWorkflowsWithResponse(ctx context.Context, params *PostWorkflowsParams, body PostWorkflowsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWorkflowsResponse, error) {
	rsp, err := c.PostWorkflows(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWorkflowsResponse(rsp)
}

// DeleteWorkflowsNameWithResponse request returning *DeleteWorkflowsNameResponse
func (c *ClientWithResponses) DeleteWorkflowsNameWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*DeleteWorkflowsNameResponse, error) {
	rsp, err := c.DeleteWorkflowsName(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkflowsNameResponse(rsp)
}

// GetWorkflowsNameWithResponse request returning *GetWorkflowsNameResponse
func (c *ClientWithResponses) GetWorkflowsNameWithResponse(ctx context.Context, name string, params *GetWorkflowsNameParams, reqEditors ...RequestEditorFn) (*GetWorkflowsNameResponse, error) {
	rsp, err := c.GetWorkflowsName(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkflowsNameResponse(rsp)
}

// ParseGetHealthResponse parses an HTTP response from a GetHealthWithResponse call
func ParseGetHealthResponse(rsp *http.Response) (*GetHealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckerResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CheckerResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetJobsResponse parses an HTTP response from a GetJobsWithResponse call
func ParseGetJobsResponse(rsp *http.Response) (*GetJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedJobList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostJobsResponse parses an HTTP response from a PostJobsWithResponse call
func ParsePostJobsResponse(rsp *http.Response) (*PostJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Job
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetJobsEventsResponse parses an HTTP response from a GetJobsEventsWithResponse call
func ParseGetJobsEventsResponse(rsp *http.Response) (*GetJobsEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobsEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteJobsIdResponse parses an HTTP response from a DeleteJobsIdWithResponse call
func ParseDeleteJobsIdResponse(rsp *http.Response) (*DeleteJobsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteJobsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetJobsIdResponse parses an HTTP response from a GetJobsIdWithResponse call
func ParseGetJobsIdResponse(rsp *http.Response) (*GetJobsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Job
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetJobsIdDefinitionResponse parses an HTTP response from a GetJobsIdDefinitionWithResponse call
func ParseGetJobsIdDefinitionResponse(rsp *http.Response) (*GetJobsIdDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobsIdDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutJobsIdDefinitionResponse parses an HTTP response from a PutJobsIdDefinitionWithResponse call
func ParsePutJobsIdDefinitionResponse(rsp *http.Response) (*PutJobsIdDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutJobsIdDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetJobsIdStatusResponse parses an HTTP response from a GetJobsIdStatusWithResponse call
func ParseGetJobsIdStatusResponse(rsp *http.Response) (*GetJobsIdStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobsIdStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutJobsIdStatusResponse parses an HTTP response from a PutJobsIdStatusWithResponse call
func ParsePutJobsIdStatusResponse(rsp *http.Response) (*PutJobsIdStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutJobsIdStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteJobsIdTagsResponse parses an HTTP response from a DeleteJobsIdTagsWithResponse call
func ParseDeleteJobsIdTagsResponse(rsp *http.Response) (*DeleteJobsIdTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteJobsIdTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetJobsIdTagsResponse parses an HTTP response from a GetJobsIdTagsWithResponse call
func ParseGetJobsIdTagsResponse(rsp *http.Response) (*GetJobsIdTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobsIdTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostJobsIdTagsResponse parses an HTTP response from a PostJobsIdTagsWithResponse call
func ParsePostJobsIdTagsResponse(rsp *http.Response) (*PostJobsIdTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostJobsIdTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetVersionResponse parses an HTTP response from a GetVersionWithResponse call
func ParseGetVersionResponse(rsp *http.Response) (*GetVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ApiVersion string `json:"apiVersion,omitempty"`
			Commit     string `json:"commit,omitempty"`
			Version    string `json:"version,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetWorkflowsResponse parses an HTTP response from a GetWorkflowsWithResponse call
func ParseGetWorkflowsResponse(rsp *http.Response) (*GetWorkflowsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkflowsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedWorkflowList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostWorkflowsResponse parses an HTTP response from a PostWorkflowsWithResponse call
func ParsePostWorkflowsResponse(rsp *http.Response) (*PostWorkflowsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostWorkflowsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Workflow
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteWorkflowsNameResponse parses an HTTP response from a DeleteWorkflowsNameWithResponse call
func ParseDeleteWorkflowsNameResponse(rsp *http.Response) (*DeleteWorkflowsNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkflowsNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetWorkflowsNameResponse parses an HTTP response from a GetWorkflowsNameWithResponse call
func ParseGetWorkflowsNameResponse(rsp *http.Response) (*GetWorkflowsNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkflowsNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workflow
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Query wfx's health status
	// (GET /health)
	GetHealth(w http.ResponseWriter, r *http.Request)
	// List available jobs
	// (GET /jobs)
	GetJobs(w http.ResponseWriter, r *http.Request, params GetJobsParams)
	// Add a new job
	// (POST /jobs)
	PostJobs(w http.ResponseWriter, r *http.Request, params PostJobsParams)
	// Subscribe to job-related events such as status updates
	// (GET /jobs/events)
	GetJobsEvents(w http.ResponseWriter, r *http.Request, params GetJobsEventsParams)
	// Delete a specific job
	// (DELETE /jobs/{id})
	DeleteJobsId(w http.ResponseWriter, r *http.Request, id string)
	// Get specific job's details
	// (GET /jobs/{id})
	GetJobsId(w http.ResponseWriter, r *http.Request, id string, params GetJobsIdParams)
	// Get specific job's definition
	// (GET /jobs/{id}/definition)
	GetJobsIdDefinition(w http.ResponseWriter, r *http.Request, id string, params GetJobsIdDefinitionParams)
	// Modify specific job's definition
	// (PUT /jobs/{id}/definition)
	PutJobsIdDefinition(w http.ResponseWriter, r *http.Request, id string, params PutJobsIdDefinitionParams)
	// Get specific job's status
	// (GET /jobs/{id}/status)
	GetJobsIdStatus(w http.ResponseWriter, r *http.Request, id string, params GetJobsIdStatusParams)
	// Modify specific job's status
	// (PUT /jobs/{id}/status)
	PutJobsIdStatus(w http.ResponseWriter, r *http.Request, id string, params PutJobsIdStatusParams)
	// Delete a tag from a specific job
	// (DELETE /jobs/{id}/tags)
	DeleteJobsIdTags(w http.ResponseWriter, r *http.Request, id string, params DeleteJobsIdTagsParams)
	// Get specific job's tags
	// (GET /jobs/{id}/tags)
	GetJobsIdTags(w http.ResponseWriter, r *http.Request, id string, params GetJobsIdTagsParams)
	// Add a tag to a specific job
	// (POST /jobs/{id}/tags)
	PostJobsIdTags(w http.ResponseWriter, r *http.Request, id string, params PostJobsIdTagsParams)
	// Query wfx's version information
	// (GET /version)
	GetVersion(w http.ResponseWriter, r *http.Request)
	// List available workflows
	// (GET /workflows)
	GetWorkflows(w http.ResponseWriter, r *http.Request, params GetWorkflowsParams)
	// Add a new workflow
	// (POST /workflows)
	PostWorkflows(w http.ResponseWriter, r *http.Request, params PostWorkflowsParams)
	// Delete a specific workflow
	// (DELETE /workflows/{name})
	DeleteWorkflowsName(w http.ResponseWriter, r *http.Request, name string)
	// Get specific workflow's details
	// (GET /workflows/{name})
	GetWorkflowsName(w http.ResponseWriter, r *http.Request, name string, params GetWorkflowsNameParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealth(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetJobs operation middleware
func (siw *ServerInterfaceWrapper) GetJobs(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetJobsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.ParamLimit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.ParamOffset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.ParamSort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", r.URL.Query(), &params.ParamState)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "state", Err: err})
		return
	}

	// ------------- Optional query parameter "group" -------------

	err = runtime.BindQueryParameter("form", false, false, "group", r.URL.Query(), &params.ParamGroup)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "group", Err: err})
		return
	}

	// ------------- Optional query parameter "clientId" -------------

	err = runtime.BindQueryParameter("form", true, false, "clientId", r.URL.Query(), &params.ParamClientID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "clientId", Err: err})
		return
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", false, false, "tag", r.URL.Query(), &params.ParamTag)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tag", Err: err})
		return
	}

	// ------------- Optional query parameter "workflow" -------------

	err = runtime.BindQueryParameter("form", true, false, "workflow", r.URL.Query(), &params.ParamWorkflow)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflow", Err: err})
		return
	}

	headers := r.Header

	// ------------- Optional header parameter "X-Response-Filter" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Response-Filter")]; found {
		var XResponseFilter ResponseFilter
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "X-Response-Filter", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Response-Filter", valueList[0], &XResponseFilter, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X-Response-Filter", Err: err})
			return
		}

		params.XResponseFilter = &XResponseFilter

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetJobs(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostJobs operation middleware
func (siw *ServerInterfaceWrapper) PostJobs(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostJobsParams

	headers := r.Header

	// ------------- Optional header parameter "X-Response-Filter" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Response-Filter")]; found {
		var XResponseFilter ResponseFilter
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "X-Response-Filter", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Response-Filter", valueList[0], &XResponseFilter, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X-Response-Filter", Err: err})
			return
		}

		params.XResponseFilter = &XResponseFilter

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostJobs(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetJobsEvents operation middleware
func (siw *ServerInterfaceWrapper) GetJobsEvents(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetJobsEventsParams

	// ------------- Optional query parameter "clientIds" -------------

	err = runtime.BindQueryParameter("form", true, false, "clientIds", r.URL.Query(), &params.ClientIDs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "clientIds", Err: err})
		return
	}

	// ------------- Optional query parameter "jobIds" -------------

	err = runtime.BindQueryParameter("form", true, false, "jobIds", r.URL.Query(), &params.JobIds)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "jobIds", Err: err})
		return
	}

	// ------------- Optional query parameter "workflows" -------------

	err = runtime.BindQueryParameter("form", true, false, "workflows", r.URL.Query(), &params.Workflows)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflows", Err: err})
		return
	}

	// ------------- Optional query parameter "actions" -------------

	err = runtime.BindQueryParameter("form", true, false, "actions", r.URL.Query(), &params.Actions)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "actions", Err: err})
		return
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", r.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tags", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetJobsEvents(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteJobsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteJobsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteJobsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetJobsId operation middleware
func (siw *ServerInterfaceWrapper) GetJobsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetJobsIdParams

	// ------------- Optional query parameter "history" -------------

	err = runtime.BindQueryParameter("form", true, false, "history", r.URL.Query(), &params.ParamHistory)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "history", Err: err})
		return
	}

	headers := r.Header

	// ------------- Optional header parameter "X-Response-Filter" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Response-Filter")]; found {
		var XResponseFilter ResponseFilter
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "X-Response-Filter", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Response-Filter", valueList[0], &XResponseFilter, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X-Response-Filter", Err: err})
			return
		}

		params.XResponseFilter = &XResponseFilter

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetJobsId(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetJobsIdDefinition operation middleware
func (siw *ServerInterfaceWrapper) GetJobsIdDefinition(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetJobsIdDefinitionParams

	headers := r.Header

	// ------------- Optional header parameter "X-Response-Filter" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Response-Filter")]; found {
		var XResponseFilter ResponseFilter
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "X-Response-Filter", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Response-Filter", valueList[0], &XResponseFilter, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X-Response-Filter", Err: err})
			return
		}

		params.XResponseFilter = &XResponseFilter

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetJobsIdDefinition(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutJobsIdDefinition operation middleware
func (siw *ServerInterfaceWrapper) PutJobsIdDefinition(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PutJobsIdDefinitionParams

	headers := r.Header

	// ------------- Optional header parameter "X-Response-Filter" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Response-Filter")]; found {
		var XResponseFilter ResponseFilter
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "X-Response-Filter", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Response-Filter", valueList[0], &XResponseFilter, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X-Response-Filter", Err: err})
			return
		}

		params.XResponseFilter = &XResponseFilter

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutJobsIdDefinition(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetJobsIdStatus operation middleware
func (siw *ServerInterfaceWrapper) GetJobsIdStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetJobsIdStatusParams

	headers := r.Header

	// ------------- Optional header parameter "X-Response-Filter" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Response-Filter")]; found {
		var XResponseFilter ResponseFilter
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "X-Response-Filter", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Response-Filter", valueList[0], &XResponseFilter, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X-Response-Filter", Err: err})
			return
		}

		params.XResponseFilter = &XResponseFilter

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetJobsIdStatus(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutJobsIdStatus operation middleware
func (siw *ServerInterfaceWrapper) PutJobsIdStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PutJobsIdStatusParams

	headers := r.Header

	// ------------- Optional header parameter "X-Response-Filter" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Response-Filter")]; found {
		var XResponseFilter ResponseFilter
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "X-Response-Filter", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Response-Filter", valueList[0], &XResponseFilter, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X-Response-Filter", Err: err})
			return
		}

		params.XResponseFilter = &XResponseFilter

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutJobsIdStatus(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteJobsIdTags operation middleware
func (siw *ServerInterfaceWrapper) DeleteJobsIdTags(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteJobsIdTagsParams

	headers := r.Header

	// ------------- Optional header parameter "X-Response-Filter" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Response-Filter")]; found {
		var XResponseFilter ResponseFilter
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "X-Response-Filter", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Response-Filter", valueList[0], &XResponseFilter, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X-Response-Filter", Err: err})
			return
		}

		params.XResponseFilter = &XResponseFilter

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteJobsIdTags(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetJobsIdTags operation middleware
func (siw *ServerInterfaceWrapper) GetJobsIdTags(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetJobsIdTagsParams

	headers := r.Header

	// ------------- Optional header parameter "X-Response-Filter" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Response-Filter")]; found {
		var XResponseFilter ResponseFilter
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "X-Response-Filter", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Response-Filter", valueList[0], &XResponseFilter, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X-Response-Filter", Err: err})
			return
		}

		params.XResponseFilter = &XResponseFilter

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetJobsIdTags(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostJobsIdTags operation middleware
func (siw *ServerInterfaceWrapper) PostJobsIdTags(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostJobsIdTagsParams

	headers := r.Header

	// ------------- Optional header parameter "X-Response-Filter" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Response-Filter")]; found {
		var XResponseFilter ResponseFilter
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "X-Response-Filter", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Response-Filter", valueList[0], &XResponseFilter, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X-Response-Filter", Err: err})
			return
		}

		params.XResponseFilter = &XResponseFilter

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostJobsIdTags(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVersion operation middleware
func (siw *ServerInterfaceWrapper) GetVersion(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVersion(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetWorkflows operation middleware
func (siw *ServerInterfaceWrapper) GetWorkflows(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWorkflowsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.ParamLimit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.ParamOffset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.ParamSort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	headers := r.Header

	// ------------- Optional header parameter "X-Response-Filter" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Response-Filter")]; found {
		var XResponseFilter ResponseFilter
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "X-Response-Filter", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Response-Filter", valueList[0], &XResponseFilter, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X-Response-Filter", Err: err})
			return
		}

		params.XResponseFilter = &XResponseFilter

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWorkflows(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostWorkflows operation middleware
func (siw *ServerInterfaceWrapper) PostWorkflows(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostWorkflowsParams

	headers := r.Header

	// ------------- Optional header parameter "X-Response-Filter" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Response-Filter")]; found {
		var XResponseFilter ResponseFilter
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "X-Response-Filter", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Response-Filter", valueList[0], &XResponseFilter, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X-Response-Filter", Err: err})
			return
		}

		params.XResponseFilter = &XResponseFilter

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostWorkflows(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteWorkflowsName operation middleware
func (siw *ServerInterfaceWrapper) DeleteWorkflowsName(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", r.PathValue("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteWorkflowsName(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetWorkflowsName operation middleware
func (siw *ServerInterfaceWrapper) GetWorkflowsName(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", r.PathValue("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWorkflowsNameParams

	headers := r.Header

	// ------------- Optional header parameter "X-Response-Filter" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Response-Filter")]; found {
		var XResponseFilter ResponseFilter
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "X-Response-Filter", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Response-Filter", valueList[0], &XResponseFilter, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X-Response-Filter", Err: err})
			return
		}

		params.XResponseFilter = &XResponseFilter

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWorkflowsName(w, r, name, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/health", wrapper.GetHealth)
	m.HandleFunc("GET "+options.BaseURL+"/jobs", wrapper.GetJobs)
	m.HandleFunc("POST "+options.BaseURL+"/jobs", wrapper.PostJobs)
	m.HandleFunc("GET "+options.BaseURL+"/jobs/events", wrapper.GetJobsEvents)
	m.HandleFunc("DELETE "+options.BaseURL+"/jobs/{id}", wrapper.DeleteJobsId)
	m.HandleFunc("GET "+options.BaseURL+"/jobs/{id}", wrapper.GetJobsId)
	m.HandleFunc("GET "+options.BaseURL+"/jobs/{id}/definition", wrapper.GetJobsIdDefinition)
	m.HandleFunc("PUT "+options.BaseURL+"/jobs/{id}/definition", wrapper.PutJobsIdDefinition)
	m.HandleFunc("GET "+options.BaseURL+"/jobs/{id}/status", wrapper.GetJobsIdStatus)
	m.HandleFunc("PUT "+options.BaseURL+"/jobs/{id}/status", wrapper.PutJobsIdStatus)
	m.HandleFunc("DELETE "+options.BaseURL+"/jobs/{id}/tags", wrapper.DeleteJobsIdTags)
	m.HandleFunc("GET "+options.BaseURL+"/jobs/{id}/tags", wrapper.GetJobsIdTags)
	m.HandleFunc("POST "+options.BaseURL+"/jobs/{id}/tags", wrapper.PostJobsIdTags)
	m.HandleFunc("GET "+options.BaseURL+"/version", wrapper.GetVersion)
	m.HandleFunc("GET "+options.BaseURL+"/workflows", wrapper.GetWorkflows)
	m.HandleFunc("POST "+options.BaseURL+"/workflows", wrapper.PostWorkflows)
	m.HandleFunc("DELETE "+options.BaseURL+"/workflows/{name}", wrapper.DeleteWorkflowsName)
	m.HandleFunc("GET "+options.BaseURL+"/workflows/{name}", wrapper.GetWorkflowsName)

	return m
}

type GetHealthRequestObject struct {
}

type GetHealthResponseObject interface {
	VisitGetHealthResponse(w http.ResponseWriter) error
}

type GetHealth200ResponseHeaders struct {
	CacheControl string
	Expires      string
	Pragma       string
}

type GetHealth200JSONResponse struct {
	Body    CheckerResult
	Headers GetHealth200ResponseHeaders
}

func (response GetHealth200JSONResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("Expires", fmt.Sprint(response.Headers.Expires))
	w.Header().Set("Pragma", fmt.Sprint(response.Headers.Pragma))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetHealth503ResponseHeaders struct {
	CacheControl string
	Expires      string
	Pragma       string
}

type GetHealth503JSONResponse struct {
	Body    CheckerResult
	Headers GetHealth503ResponseHeaders
}

func (response GetHealth503JSONResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("Expires", fmt.Sprint(response.Headers.Expires))
	w.Header().Set("Pragma", fmt.Sprint(response.Headers.Pragma))
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetHealthdefaultResponse struct {
	StatusCode int
}

func (response GetHealthdefaultResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetJobsRequestObject struct {
	Params GetJobsParams
}

type GetJobsResponseObject interface {
	VisitGetJobsResponse(w http.ResponseWriter) error
}

type GetJobs200JSONResponse PaginatedJobList

func (response GetJobs200JSONResponse) VisitGetJobsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetJobs400JSONResponse ErrorResponse

func (response GetJobs400JSONResponse) VisitGetJobsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response GetJobsdefaultJSONResponse) VisitGetJobsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostJobsRequestObject struct {
	Params PostJobsParams
	Body   *PostJobsJSONRequestBody
}

type PostJobsResponseObject interface {
	VisitPostJobsResponse(w http.ResponseWriter) error
}

type PostJobs201JSONResponse Job

func (response PostJobs201JSONResponse) VisitPostJobsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostJobs400JSONResponse ErrorResponse

func (response PostJobs400JSONResponse) VisitPostJobsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostJobs403Response struct {
}

func (response PostJobs403Response) VisitPostJobsResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type PostJobsdefaultResponse struct {
	StatusCode int
}

func (response PostJobsdefaultResponse) VisitPostJobsResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetJobsEventsRequestObject struct {
	Params GetJobsEventsParams
}

type GetJobsEventsResponseObject interface {
	VisitGetJobsEventsResponse(w http.ResponseWriter) error
}

type GetJobsEvents200TexteventStreamResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetJobsEvents200TexteventStreamResponse) VisitGetJobsEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/event-stream")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetJobsEvents400JSONResponse ErrorResponse

func (response GetJobsEvents400JSONResponse) VisitGetJobsEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsEvents404JSONResponse ErrorResponse

func (response GetJobsEvents404JSONResponse) VisitGetJobsEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsEventsdefaultResponse struct {
	StatusCode int
}

func (response GetJobsEventsdefaultResponse) VisitGetJobsEventsResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type DeleteJobsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteJobsIdResponseObject interface {
	VisitDeleteJobsIdResponse(w http.ResponseWriter) error
}

type DeleteJobsId204Response struct {
}

func (response DeleteJobsId204Response) VisitDeleteJobsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteJobsId403Response struct {
}

func (response DeleteJobsId403Response) VisitDeleteJobsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type DeleteJobsId404JSONResponse ErrorResponse

func (response DeleteJobsId404JSONResponse) VisitDeleteJobsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteJobsIddefaultResponse struct {
	StatusCode int
}

func (response DeleteJobsIddefaultResponse) VisitDeleteJobsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetJobsIdRequestObject struct {
	Id     string `json:"id"`
	Params GetJobsIdParams
}

type GetJobsIdResponseObject interface {
	VisitGetJobsIdResponse(w http.ResponseWriter) error
}

type GetJobsId200JSONResponse Job

func (response GetJobsId200JSONResponse) VisitGetJobsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsId400JSONResponse ErrorResponse

func (response GetJobsId400JSONResponse) VisitGetJobsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsId404JSONResponse ErrorResponse

func (response GetJobsId404JSONResponse) VisitGetJobsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsIddefaultResponse struct {
	StatusCode int
}

func (response GetJobsIddefaultResponse) VisitGetJobsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetJobsIdDefinitionRequestObject struct {
	Id     string `json:"id"`
	Params GetJobsIdDefinitionParams
}

type GetJobsIdDefinitionResponseObject interface {
	VisitGetJobsIdDefinitionResponse(w http.ResponseWriter) error
}

type GetJobsIdDefinition200JSONResponse map[string]interface{}

func (response GetJobsIdDefinition200JSONResponse) VisitGetJobsIdDefinitionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsIdDefinition404JSONResponse ErrorResponse

func (response GetJobsIdDefinition404JSONResponse) VisitGetJobsIdDefinitionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsIdDefinitiondefaultResponse struct {
	StatusCode int
}

func (response GetJobsIdDefinitiondefaultResponse) VisitGetJobsIdDefinitionResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type PutJobsIdDefinitionRequestObject struct {
	Id     string `json:"id"`
	Params PutJobsIdDefinitionParams
	Body   *PutJobsIdDefinitionJSONRequestBody
}

type PutJobsIdDefinitionResponseObject interface {
	VisitPutJobsIdDefinitionResponse(w http.ResponseWriter) error
}

type PutJobsIdDefinition200JSONResponse map[string]interface{}

func (response PutJobsIdDefinition200JSONResponse) VisitPutJobsIdDefinitionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutJobsIdDefinition400JSONResponse ErrorResponse

func (response PutJobsIdDefinition400JSONResponse) VisitPutJobsIdDefinitionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutJobsIdDefinition404JSONResponse ErrorResponse

func (response PutJobsIdDefinition404JSONResponse) VisitPutJobsIdDefinitionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutJobsIdDefinitiondefaultResponse struct {
	StatusCode int
}

func (response PutJobsIdDefinitiondefaultResponse) VisitPutJobsIdDefinitionResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetJobsIdStatusRequestObject struct {
	Id     string `json:"id"`
	Params GetJobsIdStatusParams
}

type GetJobsIdStatusResponseObject interface {
	VisitGetJobsIdStatusResponse(w http.ResponseWriter) error
}

type GetJobsIdStatus200JSONResponse JobStatus

func (response GetJobsIdStatus200JSONResponse) VisitGetJobsIdStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsIdStatus404JSONResponse ErrorResponse

func (response GetJobsIdStatus404JSONResponse) VisitGetJobsIdStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsIdStatusdefaultResponse struct {
	StatusCode int
}

func (response GetJobsIdStatusdefaultResponse) VisitGetJobsIdStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type PutJobsIdStatusRequestObject struct {
	Id     string `json:"id"`
	Params PutJobsIdStatusParams
	Body   *PutJobsIdStatusJSONRequestBody
}

type PutJobsIdStatusResponseObject interface {
	VisitPutJobsIdStatusResponse(w http.ResponseWriter) error
}

type PutJobsIdStatus200JSONResponse JobStatus

func (response PutJobsIdStatus200JSONResponse) VisitPutJobsIdStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutJobsIdStatus400JSONResponse ErrorResponse

func (response PutJobsIdStatus400JSONResponse) VisitPutJobsIdStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutJobsIdStatus404JSONResponse ErrorResponse

func (response PutJobsIdStatus404JSONResponse) VisitPutJobsIdStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutJobsIdStatusdefaultResponse struct {
	StatusCode int
}

func (response PutJobsIdStatusdefaultResponse) VisitPutJobsIdStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type DeleteJobsIdTagsRequestObject struct {
	Id     string `json:"id"`
	Params DeleteJobsIdTagsParams
	Body   *DeleteJobsIdTagsJSONRequestBody
}

type DeleteJobsIdTagsResponseObject interface {
	VisitDeleteJobsIdTagsResponse(w http.ResponseWriter) error
}

type DeleteJobsIdTags200JSONResponse TagList

func (response DeleteJobsIdTags200JSONResponse) VisitDeleteJobsIdTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteJobsIdTags400JSONResponse ErrorResponse

func (response DeleteJobsIdTags400JSONResponse) VisitDeleteJobsIdTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteJobsIdTags403Response struct {
}

func (response DeleteJobsIdTags403Response) VisitDeleteJobsIdTagsResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type DeleteJobsIdTags404JSONResponse ErrorResponse

func (response DeleteJobsIdTags404JSONResponse) VisitDeleteJobsIdTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteJobsIdTagsdefaultResponse struct {
	StatusCode int
}

func (response DeleteJobsIdTagsdefaultResponse) VisitDeleteJobsIdTagsResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetJobsIdTagsRequestObject struct {
	Id     string `json:"id"`
	Params GetJobsIdTagsParams
}

type GetJobsIdTagsResponseObject interface {
	VisitGetJobsIdTagsResponse(w http.ResponseWriter) error
}

type GetJobsIdTags200JSONResponse TagList

func (response GetJobsIdTags200JSONResponse) VisitGetJobsIdTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsIdTags404JSONResponse ErrorResponse

func (response GetJobsIdTags404JSONResponse) VisitGetJobsIdTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsIdTagsdefaultResponse struct {
	StatusCode int
}

func (response GetJobsIdTagsdefaultResponse) VisitGetJobsIdTagsResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type PostJobsIdTagsRequestObject struct {
	Id     string `json:"id"`
	Params PostJobsIdTagsParams
	Body   *PostJobsIdTagsJSONRequestBody
}

type PostJobsIdTagsResponseObject interface {
	VisitPostJobsIdTagsResponse(w http.ResponseWriter) error
}

type PostJobsIdTags200JSONResponse TagList

func (response PostJobsIdTags200JSONResponse) VisitPostJobsIdTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostJobsIdTags400JSONResponse ErrorResponse

func (response PostJobsIdTags400JSONResponse) VisitPostJobsIdTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostJobsIdTags403Response struct {
}

func (response PostJobsIdTags403Response) VisitPostJobsIdTagsResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type PostJobsIdTags404JSONResponse ErrorResponse

func (response PostJobsIdTags404JSONResponse) VisitPostJobsIdTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostJobsIdTagsdefaultResponse struct {
	StatusCode int
}

func (response PostJobsIdTagsdefaultResponse) VisitPostJobsIdTagsResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetVersionRequestObject struct {
}

type GetVersionResponseObject interface {
	VisitGetVersionResponse(w http.ResponseWriter) error
}

type GetVersion200JSONResponse struct {
	ApiVersion string `json:"apiVersion,omitempty"`
	Commit     string `json:"commit,omitempty"`
	Version    string `json:"version,omitempty"`
}

func (response GetVersion200JSONResponse) VisitGetVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVersiondefaultResponse struct {
	StatusCode int
}

func (response GetVersiondefaultResponse) VisitGetVersionResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetWorkflowsRequestObject struct {
	Params GetWorkflowsParams
}

type GetWorkflowsResponseObject interface {
	VisitGetWorkflowsResponse(w http.ResponseWriter) error
}

type GetWorkflows200JSONResponse PaginatedWorkflowList

func (response GetWorkflows200JSONResponse) VisitGetWorkflowsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflowsdefaultResponse struct {
	StatusCode int
}

func (response GetWorkflowsdefaultResponse) VisitGetWorkflowsResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type PostWorkflowsRequestObject struct {
	Params PostWorkflowsParams
	Body   *PostWorkflowsJSONRequestBody
}

type PostWorkflowsResponseObject interface {
	VisitPostWorkflowsResponse(w http.ResponseWriter) error
}

type PostWorkflows201JSONResponse Workflow

func (response PostWorkflows201JSONResponse) VisitPostWorkflowsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostWorkflows400JSONResponse ErrorResponse

func (response PostWorkflows400JSONResponse) VisitPostWorkflowsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostWorkflows403Response struct {
}

func (response PostWorkflows403Response) VisitPostWorkflowsResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type PostWorkflowsdefaultResponse struct {
	StatusCode int
}

func (response PostWorkflowsdefaultResponse) VisitPostWorkflowsResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type DeleteWorkflowsNameRequestObject struct {
	Name string `json:"name"`
}

type DeleteWorkflowsNameResponseObject interface {
	VisitDeleteWorkflowsNameResponse(w http.ResponseWriter) error
}

type DeleteWorkflowsName204Response struct {
}

func (response DeleteWorkflowsName204Response) VisitDeleteWorkflowsNameResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteWorkflowsName403Response struct {
}

func (response DeleteWorkflowsName403Response) VisitDeleteWorkflowsNameResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type DeleteWorkflowsName404JSONResponse ErrorResponse

func (response DeleteWorkflowsName404JSONResponse) VisitDeleteWorkflowsNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteWorkflowsNamedefaultResponse struct {
	StatusCode int
}

func (response DeleteWorkflowsNamedefaultResponse) VisitDeleteWorkflowsNameResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetWorkflowsNameRequestObject struct {
	Name   string `json:"name"`
	Params GetWorkflowsNameParams
}

type GetWorkflowsNameResponseObject interface {
	VisitGetWorkflowsNameResponse(w http.ResponseWriter) error
}

type GetWorkflowsName200JSONResponse Workflow

func (response GetWorkflowsName200JSONResponse) VisitGetWorkflowsNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflowsName400JSONResponse ErrorResponse

func (response GetWorkflowsName400JSONResponse) VisitGetWorkflowsNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflowsName404JSONResponse ErrorResponse

func (response GetWorkflowsName404JSONResponse) VisitGetWorkflowsNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflowsNamedefaultResponse struct {
	StatusCode int
}

func (response GetWorkflowsNamedefaultResponse) VisitGetWorkflowsNameResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Query wfx's health status
	// (GET /health)
	GetHealth(ctx context.Context, request GetHealthRequestObject) (GetHealthResponseObject, error)
	// List available jobs
	// (GET /jobs)
	GetJobs(ctx context.Context, request GetJobsRequestObject) (GetJobsResponseObject, error)
	// Add a new job
	// (POST /jobs)
	PostJobs(ctx context.Context, request PostJobsRequestObject) (PostJobsResponseObject, error)
	// Subscribe to job-related events such as status updates
	// (GET /jobs/events)
	GetJobsEvents(ctx context.Context, request GetJobsEventsRequestObject) (GetJobsEventsResponseObject, error)
	// Delete a specific job
	// (DELETE /jobs/{id})
	DeleteJobsId(ctx context.Context, request DeleteJobsIdRequestObject) (DeleteJobsIdResponseObject, error)
	// Get specific job's details
	// (GET /jobs/{id})
	GetJobsId(ctx context.Context, request GetJobsIdRequestObject) (GetJobsIdResponseObject, error)
	// Get specific job's definition
	// (GET /jobs/{id}/definition)
	GetJobsIdDefinition(ctx context.Context, request GetJobsIdDefinitionRequestObject) (GetJobsIdDefinitionResponseObject, error)
	// Modify specific job's definition
	// (PUT /jobs/{id}/definition)
	PutJobsIdDefinition(ctx context.Context, request PutJobsIdDefinitionRequestObject) (PutJobsIdDefinitionResponseObject, error)
	// Get specific job's status
	// (GET /jobs/{id}/status)
	GetJobsIdStatus(ctx context.Context, request GetJobsIdStatusRequestObject) (GetJobsIdStatusResponseObject, error)
	// Modify specific job's status
	// (PUT /jobs/{id}/status)
	PutJobsIdStatus(ctx context.Context, request PutJobsIdStatusRequestObject) (PutJobsIdStatusResponseObject, error)
	// Delete a tag from a specific job
	// (DELETE /jobs/{id}/tags)
	DeleteJobsIdTags(ctx context.Context, request DeleteJobsIdTagsRequestObject) (DeleteJobsIdTagsResponseObject, error)
	// Get specific job's tags
	// (GET /jobs/{id}/tags)
	GetJobsIdTags(ctx context.Context, request GetJobsIdTagsRequestObject) (GetJobsIdTagsResponseObject, error)
	// Add a tag to a specific job
	// (POST /jobs/{id}/tags)
	PostJobsIdTags(ctx context.Context, request PostJobsIdTagsRequestObject) (PostJobsIdTagsResponseObject, error)
	// Query wfx's version information
	// (GET /version)
	GetVersion(ctx context.Context, request GetVersionRequestObject) (GetVersionResponseObject, error)
	// List available workflows
	// (GET /workflows)
	GetWorkflows(ctx context.Context, request GetWorkflowsRequestObject) (GetWorkflowsResponseObject, error)
	// Add a new workflow
	// (POST /workflows)
	PostWorkflows(ctx context.Context, request PostWorkflowsRequestObject) (PostWorkflowsResponseObject, error)
	// Delete a specific workflow
	// (DELETE /workflows/{name})
	DeleteWorkflowsName(ctx context.Context, request DeleteWorkflowsNameRequestObject) (DeleteWorkflowsNameResponseObject, error)
	// Get specific workflow's details
	// (GET /workflows/{name})
	GetWorkflowsName(ctx context.Context, request GetWorkflowsNameRequestObject) (GetWorkflowsNameResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetHealth operation middleware
func (sh *strictHandler) GetHealth(w http.ResponseWriter, r *http.Request) {
	var request GetHealthRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealth(ctx, request.(GetHealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealth")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetHealthResponseObject); ok {
		if err := validResponse.VisitGetHealthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetJobs operation middleware
func (sh *strictHandler) GetJobs(w http.ResponseWriter, r *http.Request, params GetJobsParams) {
	var request GetJobsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetJobs(ctx, request.(GetJobsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetJobs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetJobsResponseObject); ok {
		if err := validResponse.VisitGetJobsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostJobs operation middleware
func (sh *strictHandler) PostJobs(w http.ResponseWriter, r *http.Request, params PostJobsParams) {
	var request PostJobsRequestObject

	request.Params = params

	var body PostJobsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostJobs(ctx, request.(PostJobsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostJobs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostJobsResponseObject); ok {
		if err := validResponse.VisitPostJobsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetJobsEvents operation middleware
func (sh *strictHandler) GetJobsEvents(w http.ResponseWriter, r *http.Request, params GetJobsEventsParams) {
	var request GetJobsEventsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetJobsEvents(ctx, request.(GetJobsEventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetJobsEvents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetJobsEventsResponseObject); ok {
		if err := validResponse.VisitGetJobsEventsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteJobsId operation middleware
func (sh *strictHandler) DeleteJobsId(w http.ResponseWriter, r *http.Request, id string) {
	var request DeleteJobsIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteJobsId(ctx, request.(DeleteJobsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteJobsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteJobsIdResponseObject); ok {
		if err := validResponse.VisitDeleteJobsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetJobsId operation middleware
func (sh *strictHandler) GetJobsId(w http.ResponseWriter, r *http.Request, id string, params GetJobsIdParams) {
	var request GetJobsIdRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetJobsId(ctx, request.(GetJobsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetJobsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetJobsIdResponseObject); ok {
		if err := validResponse.VisitGetJobsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetJobsIdDefinition operation middleware
func (sh *strictHandler) GetJobsIdDefinition(w http.ResponseWriter, r *http.Request, id string, params GetJobsIdDefinitionParams) {
	var request GetJobsIdDefinitionRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetJobsIdDefinition(ctx, request.(GetJobsIdDefinitionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetJobsIdDefinition")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetJobsIdDefinitionResponseObject); ok {
		if err := validResponse.VisitGetJobsIdDefinitionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutJobsIdDefinition operation middleware
func (sh *strictHandler) PutJobsIdDefinition(w http.ResponseWriter, r *http.Request, id string, params PutJobsIdDefinitionParams) {
	var request PutJobsIdDefinitionRequestObject

	request.Id = id
	request.Params = params

	var body PutJobsIdDefinitionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutJobsIdDefinition(ctx, request.(PutJobsIdDefinitionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutJobsIdDefinition")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutJobsIdDefinitionResponseObject); ok {
		if err := validResponse.VisitPutJobsIdDefinitionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetJobsIdStatus operation middleware
func (sh *strictHandler) GetJobsIdStatus(w http.ResponseWriter, r *http.Request, id string, params GetJobsIdStatusParams) {
	var request GetJobsIdStatusRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetJobsIdStatus(ctx, request.(GetJobsIdStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetJobsIdStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetJobsIdStatusResponseObject); ok {
		if err := validResponse.VisitGetJobsIdStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutJobsIdStatus operation middleware
func (sh *strictHandler) PutJobsIdStatus(w http.ResponseWriter, r *http.Request, id string, params PutJobsIdStatusParams) {
	var request PutJobsIdStatusRequestObject

	request.Id = id
	request.Params = params

	var body PutJobsIdStatusJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutJobsIdStatus(ctx, request.(PutJobsIdStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutJobsIdStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutJobsIdStatusResponseObject); ok {
		if err := validResponse.VisitPutJobsIdStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteJobsIdTags operation middleware
func (sh *strictHandler) DeleteJobsIdTags(w http.ResponseWriter, r *http.Request, id string, params DeleteJobsIdTagsParams) {
	var request DeleteJobsIdTagsRequestObject

	request.Id = id
	request.Params = params

	var body DeleteJobsIdTagsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteJobsIdTags(ctx, request.(DeleteJobsIdTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteJobsIdTags")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteJobsIdTagsResponseObject); ok {
		if err := validResponse.VisitDeleteJobsIdTagsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetJobsIdTags operation middleware
func (sh *strictHandler) GetJobsIdTags(w http.ResponseWriter, r *http.Request, id string, params GetJobsIdTagsParams) {
	var request GetJobsIdTagsRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetJobsIdTags(ctx, request.(GetJobsIdTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetJobsIdTags")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetJobsIdTagsResponseObject); ok {
		if err := validResponse.VisitGetJobsIdTagsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostJobsIdTags operation middleware
func (sh *strictHandler) PostJobsIdTags(w http.ResponseWriter, r *http.Request, id string, params PostJobsIdTagsParams) {
	var request PostJobsIdTagsRequestObject

	request.Id = id
	request.Params = params

	var body PostJobsIdTagsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostJobsIdTags(ctx, request.(PostJobsIdTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostJobsIdTags")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostJobsIdTagsResponseObject); ok {
		if err := validResponse.VisitPostJobsIdTagsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVersion operation middleware
func (sh *strictHandler) GetVersion(w http.ResponseWriter, r *http.Request) {
	var request GetVersionRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVersion(ctx, request.(GetVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVersion")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVersionResponseObject); ok {
		if err := validResponse.VisitGetVersionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWorkflows operation middleware
func (sh *strictHandler) GetWorkflows(w http.ResponseWriter, r *http.Request, params GetWorkflowsParams) {
	var request GetWorkflowsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetWorkflows(ctx, request.(GetWorkflowsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWorkflows")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetWorkflowsResponseObject); ok {
		if err := validResponse.VisitGetWorkflowsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostWorkflows operation middleware
func (sh *strictHandler) PostWorkflows(w http.ResponseWriter, r *http.Request, params PostWorkflowsParams) {
	var request PostWorkflowsRequestObject

	request.Params = params

	var body PostWorkflowsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostWorkflows(ctx, request.(PostWorkflowsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostWorkflows")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostWorkflowsResponseObject); ok {
		if err := validResponse.VisitPostWorkflowsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteWorkflowsName operation middleware
func (sh *strictHandler) DeleteWorkflowsName(w http.ResponseWriter, r *http.Request, name string) {
	var request DeleteWorkflowsNameRequestObject

	request.Name = name

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteWorkflowsName(ctx, request.(DeleteWorkflowsNameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteWorkflowsName")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteWorkflowsNameResponseObject); ok {
		if err := validResponse.VisitDeleteWorkflowsNameResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWorkflowsName operation middleware
func (sh *strictHandler) GetWorkflowsName(w http.ResponseWriter, r *http.Request, name string, params GetWorkflowsNameParams) {
	var request GetWorkflowsNameRequestObject

	request.Name = name
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetWorkflowsName(ctx, request.(GetWorkflowsNameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWorkflowsName")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetWorkflowsNameResponseObject); ok {
		if err := validResponse.VisitGetWorkflowsNameResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9e3PbtrL4V8Hwd2aazE+S9bJs6f7lxkqqjOvkxurpmRPl9oDkUoJDASwAWlYz+u53",
	"8OBTlETZTm7TeqbTWCII7C72vQvoi+OxZcQoUCmc0RcnwhwvQQLXn7yQAJUTX/3tg/A4iSRh1Bk5r0ko",
	"gaNb5grkQsjonNA5kgxhJCLwSEA8ZN5GKyIXKJ2p4RD1/u8x8LXTcChegjNyco+Ft4AlVivKdaSeCckJ",
	"nTubhnPfnLOmfUMD+sq8dqkezjmLowOAYgE+YhTJBSA9Xv21RpgDItRpOHAfhcwHZxTgUEA1qGadPJxE",
	"wlJUAmy/wJzjtfos5DpUXwSML50KfN7ouTcNZ0GEZHy9jc6PjIWAKQpCrMlNqBfGPmiMJMdUEDUQ2fcR",
	"C/STW+buIHyyUAXdXbNUJeF/sq9tGk5IlkRuA6qWXeJ7soyXiMZLF7gCRpNKwc1BxpzuAMpMmQfJhwDH",
	"oXRGnXZDUw9LZ+QQKntdJyUzoRLmwCsBvtJTbhoOCwIBO+CtgFN8JhFyIWAckJCYS8vmBn7EQcShFDvw",
	"sGtVIlLCY9Cvh8c7M+Wm4XAQEaMCDINvI3QRReEaYXT7ezMknwEFRhAk0xyRvJ1AvgDsA89A/1fzgx3R",
	"tAsckEwvJAmgZiXN74zvIDXjvqG0IST4CEJYai1UTUs9VR6Gf3AInJHz/04yBXZinoqTG8blmMbLShKq",
	"h0YYsYQjFIYXc670mX4P3eEwhl2w6pmPU2U3+h2lM/C8YjNRSITU4oznoqamUjPVpdgUz6+IkHWU1BTP",
	"nc0mmVgrvgtPwakpPvrigP73ozP5+efx5eRiOnYazq8Xk6nzqbFNiIs7TELskpDItaJBLLaxVxMDx1qz",
	"sQBFTAjihoBw7l29LbEA0VLUsRBoRe2zlVI0Mf1M1V9bQFgU1ZdNJe5NptfFYTNiShS5M5I8BjWMLZVi",
	"iOTafLVpOK8W4H3+oLXANtw/AQ7lAhFqJF2BHzCOMPLUW+CjdCMU0BFnEXBJQFMAOGcVUj1VjKjeRnoA",
	"WoIQeA4NRIymN88CTELwNSXu8TLS2/kqWQtRJhEH7C2wG4LzpOQQ6Q7uY7aKPVeMT5YgJF5G1Virx2i1",
	"AJrDc4UFgnvwYlnGttvu9pqddrPdm3bao87pqNf+t5NTuT6W0FRTPiX+mcVn7i14Wpo0gwDPWKS4zT5I",
	"TEL9J/Z9YlZ6Xxiyj5J59ts0SlS7NHMjj1GJCRVosYMfw3CbI7UcbWGjXt3engkNWLZKhkdhJeyyWCK5",
	"ICkcxnhWrvNwPtKW8feYcPCVBrATfapYYxySuVIjZbX16moyvp4qnfX6X9XagsZhqGXHaF81VyKtxd31",
	"tIreIpcPVJKAAEdqgN4DY5OxMBpOfTIKoEJjhmyuaVKe9orNkcc4h9AQfHJZ9bZVGBVKNq9Ptt8s0VVj",
	"lsKSTVtJaDVz4k5sE0kjKgqO9L5NN6RWmOD7iXmh0z0v+9pVovgmiRDKIpgjw5ecDrnMHiSbkjj/D1IZ",
	"m8Qy5xd59358XbVP2ocQ+zwBM6IYfWnxSoDcHZcsCU1IV0G4/D5rgFNoqnb3pyxUKdM1IJRsk/ULmjmx",
	"AH6pnoM/c0boywZtZrRKESy1jt6iwqVywTD1jVV4Mbl5dz5od15m9uGWudo6LJmvJM1HLwRI5K7RKrh/",
	"ucsQcMD+OxquEw1fuSmH1dJb5ua00RZKb5lboSlykXZGKvNtv7uL46xblobB9Rnx8ZtTf62dwezUbNQP",
	"IolXW+gKC4kIbaCAcMXmsUQvriav371soQvFoIgIJHlMPSzBV04PkQKFQOdygeDeA/AFyoeeOAzZCnw7",
	"pDWjP66RjcEaKaMk0TIRSJl0NXPA2TINkgSKaQhC+RpRSDwiwzVSQgJCDXXXxiMx2Y4XAkw0/h8763/Q",
	"Lx+uUJpXednStKyl6nJRdqbszjvDbkloq30xUpG2+YWS32OD9OQSvVgF9805UOVbg/+y4ED1eu0zOPXc",
	"Zvus7zX7Q/esORz6/eYpDDrnvSHue13f0XBdadI6o97gkAQVufYofn2sHggVXx2lDDIjb1B5euWgXnkc",
	"Vh4HLQd5fFroIpQLFs8XSE+vHDMPIhnjMFwjHK7wWjEyEVI0EJE/CJRgilzwcCwArQD5jP4g0QpTqbMg",
	"wAkOyR9gpyQUCaamxko4XkBr3tJejIIL7hS+L1tPRlcd8dYPX1eMfw5Ctjr0yq/JuLLJI36lnXvL3LFC",
	"bVt3Yy/Rowc2Xr9vYmU1o/fA3dcUzu9/vcBm03Bujek5AGae6HVzm2X30EJgSWNW3kfVi5SGqRv+YWxS",
	"B5fjq7H+4+Ly8rfpxZub9Lvk0y/vLy+m499uphfTX3KfL8evJ9eT6eTddWXm4S1zPxglvt8cF3fnlSa5",
	"5vTEb5+TO6CJ/tda7eEWfMs0b1tMLbvK31MwZIPRioQhclUYEYXYA98k3rVHqJMDRCCLpLZ0lEmkDUYx",
	"cP4aDsAjJLiIfiKzyLqlGdir4L6VvNfycdzyCTdAHohjssJDuuwOPt2VnXrLXJt8yse7WwmdPSxl6yQL",
	"4i2QUH8qrrJTxpFvkolf3Sus9iJUWA/3chfUzbTa8/bm3TUyBDMJ8ohxmU8G2JkKSQERewuEhU1m2WRI",
	"Q+HufUaSYw9EA4H0iiw6owjNnJBQEIo/P9oPnZnTsH92Zw76NKM7gopMaH7CYlG9oznBWqhBBVdn0K/p",
	"6jyM5jtj9A8mQ2CfnyhKNlDAlcepKKudVsMdRXg77W7/SSGMuAr8RYU0vLJZcqWcklEoAu4BlSaxsFW+",
	"sb66ArNdVQTZkai/xktI4nIKK5TIL0rS7xnHjK8vD2oC81aV7L/Hc0KVnX3LXK2jtkBJR6TB+S1zxbYK",
	"UBJgPIha/n9ii0tVxMisVsPneJ+NLKObm6SRArYX+0T51iVBsh+Pp0Pmqv1JiGFXK2L1yEJoyq3d9n4Z",
	"yYlyTki+Vl0zBatewVIyicNqKPSjMiz5FTrtdp1FSnuXFIvTYqsBoWr30rJgvhDrYOHlSkbmk4K+0mm8",
	"SXTRw3OIiXp6uhzizfTiw/SggtPvVZElcb3y4pjTnb98ePd+/Nuv45tpZT45y8IOKtISD7Yw07SZ4aEB",
	"V64oWS6NHNihrJHiEdsEtrxwMJ+dL0NsGo4y4rW2V3F6aatqmLkULLuSnqWKK37NeeF7mb1cdNoiZ+pY",
	"503yVMclAuH846dxWZJmoPo1hbTvJsfN+fWfgJ8TqS3l4wRw5SbdER98FJvs3OoBUU7JOV0SmhJS2Ugp",
	"gav1/ucjbv5x0fx3uzmczZqzWevT///H/upDLfqlzQsZ/frt4aBWmjITtvrr5ZRDSQX1zvs1Vq0ucuQh",
	"2VPy2OTqoCHxwBa1bNR1EWFvAajbajsNJ+ahM3IWUkajk5PVatXC+mmL8fmJfVWcXE1eja9vxs1uq91a",
	"yGVoauFSb3ga8I51lVsXBO+AC8M9nVZHL3PfvCOCmDqoM3LgXu021hOxCCiOiDNyeq22HhxhudAEPjFl",
	"WPXnvMpz+O8YuE4p/pBWbG2KU09r+jFUPOu8AWlaHZysLUkv0W23S/4ejqKQePrVk1thFEi9DpViIV3v",
	"QqkyFoZIrIX2cOJIZ9B4TKlRHKa/SQP1Sm1B8xWjkrOwuP626hzfR4QbZPYNe8/x3DzbPUqNO233vh1B",
	"btgS0AtT4H+ZkgZzQLYl5k9ClNQVK3PgO7kAbnMDOpmFadLnYyrneo8twyGX+WtkvMeWaVCKl0vM1wdY",
	"2SSnPjqCxXLhspj6TsOhjCcfPpW626zUqAVOdJS3S35M+0UpJiwXoIhAQH1tP6zvbepX+XcQofm2WtM6",
	"p1CPOPgggS8JBR/pIGaOMlvdmtHpAgQk6+m9H80oQk10ITygvhovGJeIUZPZNw87bQRUcgI6clcTg06k",
	"bEn9Wxvl5pqGP1YzbTbkpNS4uGkcfCO0zZsHB7KkO/LgSGGaAA+Ps5bt4MC5dSEODkzzgDXGSjzXw3Z3",
	"KC6x9BZqG9113pGqagfMPT6mMTELvj99Re2+lWOpUvAoSpMMt8zVMtJSMPdrAZK6UVnLyccvzixut3ue",
	"+b+OMu9wSHxbGLC9Jp82ddsoi60uFThMgqRyrJxfu5pTVIJPQtCDkFjcCnpSUT7pqgwhSWIdqyHVvjT1",
	"u5uGE7GqbNGF7yOss3amNb2oWd4z8TSq5ZPx80DIH5m/fjLa5ipHFYR9y9wkl7/ApiST1ekyt9O6vyWJ",
	"6jwlkDuhy5UOvy/x+RH7KCW9grxX0cDNuEt8H6jzTXyLMisn0rJHQLDvK/nIfIgTUzTf6Uq8cyUmFBEq",
	"JDYNvMoT0Psj0rowB+3bKc3oLTCdQ8466AYVTiRwgltoWnA7YklC8gcIJIDfAW/qCpQBCL24uRm/bKgl",
	"OOTaYdQ6M8dbxPQz+DPHENBnsVIaFFYhoYBcDviz8kGumYQRmi7SIwiZwNqTNz5EQH21LAsQYG+BmMLn",
	"vxCmttitEQFhGn6QwJKIQLknatOStJrxj8DfXqY1o68ZR5aDG8qZInQeJpX0JZkvJAoZ+4z0SQnllWk3",
	"yccSj9CXWVq7mzmjWSIIv5kvZ05jZmJF/XByfTO9uLqaXL+ZOZvZjKr/drpO4zt74KGk5UpufOyqjy4g",
	"yZJ9WS2YSFqOJpcpeRhNKyL5ovTEF+iFx5ZL3BSg1pLgv7RsoFMwhmKtA4ezRH3PIak9igr3ZTc+ti2J",
	"VCByy9xHYmFm2IfCMaAWcjSVEBdGPAryfCHlSYBP23SQyaRWwm8ebQPe0F0/TUIFUCHJHRyBiZ3zODwu",
	"tmlXOA2jTx3qw04KT6U9UvwsZB6mygrHAnw9eD7nMFczJWTRhdNlHEoShaDiRKtqPR1EOTuP1+zH5LC/",
	"LOFeGt3fFJIDXhbNe5oLK+VfscR1u42cHY2A07SPaHLZqi6yJDko5TGYuSqyxMmgG2070I2aMVVrpRah",
	"CofeYK27mbeMzxO7JrfMnepQGYc6XfkNnJP+E8J+zeRr5Uw8PdjXTCI99dfxl0ruUkEr3TK3qc8rgJ+I",
	"YtIRUmh/OSoKWRjnL830Gg/rC/E3BqsQqroJLvX3+TxLVWRiRinbrVuG9trtt9qaJcojwjo9anUH2Y4F",
	"jtMk/Z3d1GiBBXIBKDKo+q16nvITsmtisL5bni37+LuYo4avbzbBuPuNau/+Dcik9UlpwgMsaH3HKv47",
	"PvH21Tj2cG4rORXwVdNKe4Lg3De6k9OczDS+j2nE/J7j4mfTUyHGStDysvWDSOTuAVmuOchSEK9MzEmx",
	"e3ePvKfthUeI/GU2+Z9Z+B8r0Q86K7ZLylOKPcvFUXKR47QHikazSPworsDhZ+aTYL139VJuOP4OZeFh",
	"KegnEoOp7Y8tHheokYv+PxPa9JyWiD0PhAjiMFw/W+S/oOapIf7HKh/NPOuy/tGDmA9zoE0rj00FV/LW",
	"W+bmFErJpmcn+3bac4v8Ebb8JmlA+Ova8bqHpCuVgEhPST7LTl2r/eCmlsRiZ0TfZ63xznV32Orvhde/",
	"Sql4N5ub5HRyb4rM2emUoE9rox8lkM9W+e9tlR+sXHIWOZ1jvzW+LopByRwnx0kPpnIlnpvSzhFZ3amp",
	"6vwlFdXDLoTZVlu26Gbp/y2VVHpKuKLbNaeVktQ3Mg10f+kOl2cdtj9lv1sJHJW9b5rbFPfrLa089qX5",
	"db36iCDh+9BG317YFQbSEvtZAOqGB7Zj4aHBQULwfS2dEpdvgd7X4Plsbo8wt9j3/5S2Fvu+sbS2ov9s",
	"cP+W+ma//Nfvij3C0KqwID0NV+MUmx1buqZly/T+0075SNkqnVmOyD8zULNk+V3nEWeMPba0dw7kbr49",
	"Dfq+3wuG593z09OeN4R+7wx3+8FZgPunHQyD9rAzCLqPWPauCpF2q9d6OC6bGqWBTOtkDKlZtmJfW843",
	"P1hWzV0FFk8Ipzk3a+usfYIsO5qR7wndYuBf8zdvfK9ns77JaaPCnSaVHYrbt5l8E8YqncTJb/eDjuMU",
	"wD90Jid3Umzbb3s65vpKKdfcxX5b+5mep84uqnLBeDDf9HBOLRi/3jGdXIOeuRE0uVR558iJ8cL+Zid6",
	"coJQ04FZ5W+VzFT8yRc15sgG1J1iaIamgnhtri/Y24xavjmvIjCyT75CV2p6FOK5NfUbtKYex7Q2w7XK",
	"XbF1ZJPqTjbNeyLVPPrYON9eZ6zP4CS3cZZPQT85k7e/rRXI96naGz0huzLmM6z/Kiegn6W8ZjIvwe7R",
	"7aurAv+ZEziGnubimhMckZNVcH9y19Heml1jl20R6Qkre1CV2JtyRdVZtsqsncKIk7vkAvZ0tCZU8ksv",
	"yF0jnN1zmZ3vq5pU3wqT0gRdvJ+kJ19F/telUqpVT5FRctcUOVpvNLH1RTtNCcsoTC5TGmc/dVEhZekP",
	"huh7noojst/aGDnDAe6dAe4EZ363fRoEboA73V6v7w3OO92z7lnu5ziM/U3kTTmUdlpNUI/Foa8vAnZB",
	"//KLKZrZC+2FZFzNYe6NLopSEdTc4zycnY7nDc7OBt32sA2dU/dsiDu98zPw8ODUxYPTApwmZatBVAAF",
	"iWxVH9vaWr8wpkCsziBo42Gnh3vQx6ddPBy4fvesA+3u0FMufR1iJRejJ3evE3sni7SrouSakGp/uQht",
	"aUiBYufB6Rn2vbO2758NvbPA7Qedbn/gwjkeQLtfADa1EHoa+3M+Ol+QB2TfvpXH5EHx+qfds87w7Kzf",
	"Ph+4Azhv91z3PBiAB3h4PhxWg5JunTbH5jCFlo8iRPmgYydIZlAeJugAdIIuBnx+OnSHvt/rn54NB502",
	"9M4HPh5Uw6QVr3YRcMgB+2t7+72+feh/AwAA///WdQjzAHMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
