<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>wfx on</title><link>https://siemens.github.io/wfx/</link><description>Recent content in wfx on</description><generator>Hugo</generator><language>en</language><atom:link href="https://siemens.github.io/wfx/index.xml" rel="self" type="application/rss+xml"/><item><title>Build and Installation</title><link>https://siemens.github.io/wfx/docs/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://siemens.github.io/wfx/docs/installation/</guid><description>Pre-built binaries, as well as Debian and RPM packages, are available here for Linux, specifically x86_64 and arm64 architectures.
To start a container hosting wfx, follow these commands:
# create a named volume to persist data (only needed the first time) docker volume create wfx-db docker run --rm -v wfx-db:/home/nonroot \ -p 8080:8080 -p 8081:8081 \ ghcr.io/siemens/wfx:latest If pre-built binaries are not available (refer to go tool dist list for alternative platforms and architectures, such as Windows or macOS), or if specific features need to be disabled during compilation, building wfx from source is necessary.</description></item><item><title>Configuration</title><link>https://siemens.github.io/wfx/docs/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://siemens.github.io/wfx/docs/configuration/</guid><description>wfx is configured in the following order of precedence using
command line parameters (e.g. --log-level), environment variables (prefixed with WFX_, e.g. WFX_LOG_LEVEL), configuration files in YAML format (either via the --config command line parameter or present in one of the default search locations, see wfx --help). Note that wfx supports configuration file live reloading so that a running wfx instance can be reconfigured without the need for restarting it.
Without configuration,</description></item><item><title>Device Artifact Update (DAU)</title><link>https://siemens.github.io/wfx/docs/workflows/dau/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://siemens.github.io/wfx/docs/workflows/dau/</guid><description>The Device Artifact Update Workflow Family has been specifically designed for updating software on devices.
The following clients have support for the Device Artifact Update Workflow Family:
SWUpdate - Software Update for Embedded Linux Devices. Workflows Currently, the DAU Workflow Family comprises two workflows that model the software update process for devices:
The wfx.workflow.dau.direct workflow caters for the fully automated software update use case while the wfx.workflow.dau.phased workflow operates in distinct phases requiring external input to advance the workflow.</description></item><item><title>Operations</title><link>https://siemens.github.io/wfx/docs/operations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://siemens.github.io/wfx/docs/operations/</guid><description>API wfx provides two RESTful APIs to interact with it: the northbound operator/management interface and the southbound interface used by clients as illustrated in the following figure:
Management │ │ ▼ Northbound API ┌──────────────────┐ │ wfx │ └──────────────────┘ ▲ Southbound API │ │ Device The northbound API is used to create jobs and execute server-side state transitions, whereas the southbound API is used for client-side transitions.
The complete wfx API specification is accessible at runtime via the /swagger.</description></item><item><title>REST API</title><link>https://siemens.github.io/wfx/docs/api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://siemens.github.io/wfx/docs/api/</guid><description/></item><item><title>Use Cases</title><link>https://siemens.github.io/wfx/docs/use-cases/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://siemens.github.io/wfx/docs/use-cases/</guid><description>This document presents a collection of use cases for employing wfx. Owing to wfx&amp;rsquo;s versatility, the list provided here is not exhaustive. Should you identify an important use case missing, please feel free to contribute.
Note: Each use case requires an appropriate client implementation to execute the specific &amp;ldquo;business logic&amp;rdquo;. If no such client exists yet, this implies writing custom code.
Software Update Perform over-the-air (OTA) firmware updates using SWUpdate and the Device Artifact Update (DAU) Workflow Family.</description></item></channel></rss>