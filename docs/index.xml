<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Documentation on</title><link>/docs/</link><description>Recent content in Documentation on</description><generator>Hugo</generator><language>en</language><atom:link href="/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Build and Installation</title><link>/docs/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/installation/</guid><description>&lt;p&gt;Pre-built binaries, as well as Debian and RPM packages, are available 
&lt;a href="https://github.com/siemens/wfx/releases" target="_blank"&gt;here&lt;/a&gt;
for Linux, specifically 
&lt;a href="https://go.dev/wiki/MinimumRequirements#amd64" target="_blank"&gt;x86_64&lt;/a&gt; and

&lt;a href="https://go.dev/wiki/MinimumRequirements#arm64" target="_blank"&gt;arm64&lt;/a&gt; architectures.&lt;/p&gt;
&lt;p&gt;To start a container hosting wfx, follow these commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;# create a named volume to persist data (only needed the first time)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;docker volume create wfx-db
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;docker run --rm -v wfx-db:/home/nonroot &lt;span style="color:#0a3069"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#0a3069"&gt;&lt;/span&gt; -p 8080:8080 -p 8081:8081 &lt;span style="color:#0a3069"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#0a3069"&gt;&lt;/span&gt; ghcr.io/siemens/wfx:latest
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If pre-built binaries are not available (refer to &lt;code&gt;go tool dist list&lt;/code&gt; for alternative platforms and architectures, such
as Windows or macOS), or if specific features need to be disabled during compilation, building wfx from source is
necessary.&lt;/p&gt;</description></item><item><title>Configuration</title><link>/docs/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/configuration/</guid><description>&lt;p&gt;wfx is configured in the following order of precedence using&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;command line parameters (e.g. &lt;code&gt;--log-level&lt;/code&gt;),&lt;/li&gt;
&lt;li&gt;environment variables (prefixed with &lt;code&gt;WFX_&lt;/code&gt;, e.g. &lt;code&gt;WFX_LOG_LEVEL&lt;/code&gt;),&lt;/li&gt;
&lt;li&gt;configuration files in 
&lt;a href="https://github.com/go-yaml/yaml#compatibility" target="_blank"&gt;YAML&lt;/a&gt; format (either via the &lt;code&gt;--config&lt;/code&gt;
command line parameter or present in one of the default search locations, see &lt;code&gt;wfx --help&lt;/code&gt;).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that wfx supports configuration file live reloading so that a running wfx instance can be reconfigured without the
need for restarting it.&lt;/p&gt;
&lt;p&gt;Without configuration,&lt;/p&gt;</description></item><item><title>Operations</title><link>/docs/operations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/operations/</guid><description>&lt;h2 id="api"&gt;API&lt;/h2&gt;
&lt;p&gt;wfx provides two RESTful APIs to interact with it: the northbound operator/management interface and the southbound
interface used by clients as illustrated in the following figure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-txt" data-lang="txt"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Management
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; │
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; │
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ▼ Northbound API
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;┌──────────────────┐
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;│ wfx │
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;└──────────────────┘
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ▲ Southbound API
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; │
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; │
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Device
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The northbound API is used to create jobs and execute server-side state transitions, whereas the southbound API is used
for client-side transitions.&lt;/p&gt;</description></item><item><title>REST API</title><link>/docs/api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/api/</guid><description>&lt;div id="docsy_swagger_ui"&gt;&lt;/div&gt;
&lt;script&gt;
 window.onload = function () {
 const ui = SwaggerUIBundle({
 url: "/wfx/wfx.openapi.yml",
 dom_id: '#docsy_swagger_ui',
 presets: [
 SwaggerUIBundle.presets.apis,
 SwaggerUIStandalonePreset
 ]
 });
 window.ui = ui;
 };
&lt;/script&gt;</description></item><item><title>Use Cases</title><link>/docs/use-cases/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/use-cases/</guid><description>&lt;p&gt;This document presents a collection of use cases for employing wfx. Owing to wfx&amp;rsquo;s versatility, the list provided here
is not exhaustive. Should you identify an important use case missing, please feel free to

&lt;a href="https://github.com/siemens/wfx/tree/main/CONTRIBUTING.md" target="_blank"&gt;contribute&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Each use case requires an appropriate client implementation to execute the specific &amp;ldquo;business logic&amp;rdquo;. If no
such client exists yet, this implies writing custom code.&lt;/p&gt;
&lt;h2 id="software-update"&gt;Software Update&lt;/h2&gt;
&lt;p&gt;Perform over-the-air (OTA) firmware updates using 
&lt;a href="https://swupdate.org/" target="_blank"&gt;SWUpdate&lt;/a&gt; and the 
&lt;a href="../docs/workflows/dau/"&gt;Device Artifact Update
(DAU) Workflow Family&lt;/a&gt;. See also SWUpdate&amp;rsquo;s 
&lt;a href="https://github.com/sbabic/swupdate/blob/master/doc/source/suricatta.rst#support-for-wfx" target="_blank"&gt;Suricatta
documentation&lt;/a&gt;.&lt;/p&gt;</description></item></channel></rss>