<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>– Documentation</title><link>https://siemens.github.io/wfx/docs/</link><description>Recent content in Documentation on</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://siemens.github.io/wfx/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Build and Installation</title><link>https://siemens.github.io/wfx/docs/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://siemens.github.io/wfx/docs/installation/</guid><description>
&lt;p>Pre-built binaries, as well as Debian and RPM packages, are available
&lt;a href="https://github.com/siemens/wfx/releases" target="_blank">here&lt;/a>
for Linux, specifically
&lt;a href="https://github.com/golang/go/wiki/MinimumRequirements#amd64" target="_blank">x86_64&lt;/a> and
&lt;a href="https://github.com/golang/go/wiki/MinimumRequirements#arm64" target="_blank">arm64&lt;/a> architectures.&lt;/p>
&lt;p>To start a container hosting wfx, follow these commands:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic"># create a named volume to persist data (only needed the first time)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker volume create wfx-db
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker run --rm -v wfx-db:/home/nonroot &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> -p 8080:8080 -p 8081:8081 &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> ghcr.io/siemens/wfx:latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If pre-built binaries are not available (refer to &lt;code>go tool dist list&lt;/code> for alternative platforms and architectures, such
as Windows or macOS), or if specific features need to be disabled during compilation, building wfx from source is
necessary.&lt;/p>
&lt;h2 id="building-wfx">Building wfx&lt;/h2>
&lt;p>A recent
&lt;a href="https://go.dev/" target="_blank">Go compiler&lt;/a> (see &lt;code>go.mod&lt;/code>) as well as
&lt;a href="https://www.gnu.org/software/make/" target="_blank">GNU make&lt;/a>
wrapping the &lt;code>go build&lt;/code> commands is required to build wfx and its associated tools:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>make
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The above command produces the following binaries:&lt;/p>
&lt;ul>
&lt;li>&lt;code>wfx&lt;/code>: The server component providing the RESTful APIs for managing workflows and jobs.&lt;/li>
&lt;li>&lt;code>wfxctl&lt;/code>: Command line client for interacting with the wfx.&lt;/li>
&lt;li>&lt;code>wfx-loadtest&lt;/code>: Command line tool for load-testing a wfx instance.&lt;/li>
&lt;li>&lt;code>wfx-viewer&lt;/code>: Convenience tool to visualize workflows in different formats (e.g. PlantUML, Mermaid).&lt;/li>
&lt;/ul>
&lt;p>All binaries have extensive help texts when invoked with &lt;code>--help&lt;/code>.&lt;/p>
&lt;h3 id="build-tags">Build Tags&lt;/h3>
&lt;p>Go
&lt;a href="https://pkg.go.dev/go/build" target="_blank">build tags&lt;/a> are used to select compiled-in support for various features. The following
persistent storage selection build tags are available:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Build Tag&lt;/th>
&lt;th style="text-align:left">Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;code>sqlite&lt;/code>&lt;/td>
&lt;td style="text-align:left">Enable built-in
&lt;a href="https://www.sqlite.org/" target="_blank">SQLite&lt;/a> support&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>libsqlite3&lt;/code>&lt;/td>
&lt;td style="text-align:left">Dynamically link against &lt;code>libsqlite3&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>postgres&lt;/code>&lt;/td>
&lt;td style="text-align:left">Enable built-in
&lt;a href="https://www.postgresql.org" target="_blank">PostgreSQL&lt;/a> support&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>mysql&lt;/code>&lt;/td>
&lt;td style="text-align:left">Enable built-in
&lt;a href="https://www.mysql.com/" target="_blank">MySQL&lt;/a> support&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>plugin&lt;/code>&lt;/td>
&lt;td style="text-align:left">Enable support for
&lt;a href="https://siemens.github.io/wfx/docs/operations/#Plugins">external plugins&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>By default, all built-in persistent storage options are enabled (wfx requires at least one persistent storage to save
workflows and jobs).&lt;/p>
&lt;p>Note that the selection of build tags can impact the size of the &lt;code>wfx&lt;/code> binary file and may as well have implications for
the software clearing process, including obligations that must be met.&lt;/p>
&lt;p>To build and compile-in, e.g., SQLite persistent storage support only, according &lt;code>GO_TAGS&lt;/code> must be given:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>make &lt;span style="color:#008080">GO_TAGS&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>sqlite
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="debian">Debian&lt;/h3>
&lt;p>The Go toolchain provided by Debian &lt;em>stable&lt;/em> is often outdated; it&amp;rsquo;s typically end-of-life upstream but still maintained
by Debian&amp;rsquo;s security team. Therefore, to compile wfx from source in Debian &lt;em>stable&lt;/em>, the &lt;code>-backports&lt;/code> repository is
necessary. In contrast, for Debian &lt;em>testing&lt;/em>, it usually works out of the box since it ships with a recent version of
the Go toolchain.&lt;/p>
&lt;h2 id="installing-wfx">Installing wfx&lt;/h2>
&lt;p>wfx&amp;rsquo;s release binaries are statically linked and self-contained. Hence, an installation isn&amp;rsquo;t strictly necessary,
although if available, it&amp;rsquo;s recommended to pick the distro packages (e.g. &lt;code>*.deb&lt;/code> for Debian-based distros).&lt;/p>
&lt;p>Nevertheless, for convenience on UNIXy systems,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>make &lt;span style="color:#008080">DESTDIR&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#008080">prefix&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span> install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>installs the binaries to &lt;code>/bin&lt;/code>. Giving a different &lt;code>DESTDIR&lt;/code> and/or &lt;code>prefix&lt;/code> allows to adjust to other locations.&lt;/p>
&lt;p>Alternatively, a pre-built
&lt;a href="https://www.debian.org" target="_blank">Debian&lt;/a> package is
&lt;a href="https://github.com/siemens/wfx/releases" target="_blank">provided&lt;/a>.&lt;/p>
&lt;p>For convenience and ease of use, all binaries come with shell completions available for
&lt;a href="https://www.gnu.org/software/bash/" target="_blank">Bash&lt;/a>,
&lt;a href="https://fishshell.com" target="_blank">Fish&lt;/a> and
&lt;a href="https://www.zsh.org" target="_blank">Zsh&lt;/a>. To install the
completions, refer to the binary&amp;rsquo;s &lt;code>completion --help&lt;/code> output, e.g. &lt;code>wfx completion bash --help&lt;/code>.&lt;/p></description></item><item><title>Docs: Configuration</title><link>https://siemens.github.io/wfx/docs/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://siemens.github.io/wfx/docs/configuration/</guid><description>
&lt;p>wfx is configured in the following order of precedence using&lt;/p>
&lt;ol>
&lt;li>command line parameters (e.g. &lt;code>--log-level&lt;/code>),&lt;/li>
&lt;li>environment variables (prefixed with &lt;code>WFX_&lt;/code>, e.g. &lt;code>WFX_LOG_LEVEL&lt;/code>),&lt;/li>
&lt;li>configuration files in
&lt;a href="https://github.com/go-yaml/yaml#compatibility" target="_blank">YAML&lt;/a> format (either via the &lt;code>--config&lt;/code>
command line parameter or present in one of the default search locations, see &lt;code>wfx --help&lt;/code>).&lt;/li>
&lt;/ol>
&lt;p>Note that wfx supports configuration file live reloading so that a running wfx instance can be reconfigured without the
need for restarting it.&lt;/p>
&lt;p>Without configuration,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>/usr/bin/wfx
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>starts wfx using the built-in SQLite-based persistent storage. The northbound (management) API is available at
&lt;a href="http://127.0.0.1:8081/api/wfx/v1/" target="_blank">
&lt;a href="http://127.0.0.1:8081/api/wfx/v1/" target="_blank">http://127.0.0.1:8081/api/wfx/v1/&lt;/a>&lt;/a>, whereas the southbound (client) API is
available at a different port:
&lt;a href="http://127.0.0.1:8080/api/wfx/v1" target="_blank">
&lt;a href="http://127.0.0.1:8080/api/wfx/v1" target="_blank">http://127.0.0.1:8080/api/wfx/v1&lt;/a>&lt;/a>.&lt;/p>
&lt;h2 id="systemd-integration">Systemd Integration&lt;/h2>
&lt;p>For production deployments, it&amp;rsquo;s recommended to run wfx under a service supervisor such as
&lt;a href="https://systemd.io" target="_blank">systemd&lt;/a>. The &lt;code>share/systemd&lt;/code> directory provides pre-configured systemd service units. These units
are also included in the distribution packages available with wfx releases.&lt;/p>
&lt;pre>&lt;code>systemctl enable --now wfx@foo.socket
# multiple instances of wfx can be running at the same time, e.g.
systemctl enable --now wfx@bar.socket
&lt;/code>&lt;/pre>
&lt;p>The wfx services launch on-demand, i.e., they start when a client connects, such as when retrieving the wfx version:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wfxctl --client-unix-socket /var/run/wfx/foo/client.sock version
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="persistent-storage">Persistent Storage&lt;/h2>
&lt;p>wfx requires a persistent storage to save workflows and jobs. The default persistent storage is
&lt;a href="#sqlite">SQLite&lt;/a> and
requires no further configuration.&lt;/p>
&lt;p>The command line argument &lt;code>--storage={sqlite,postgres,mysql}&lt;/code> is available to choose a persistent storage backend out of
the compiled-in available ones at run-time. Each persistent storage allows further individual configuration via
&lt;code>--storage-opt=&amp;lt;options&amp;gt;&lt;/code>.&lt;/p>
&lt;p>Note that wfx needs to manage the database schema and hence needs appropriate permissions to, e.g., create tables. This
is in particular important for the PostgreSQL and MySQL persistent storage options as they&amp;rsquo;re connecting to an external
database service which has to be setup accordingly.&lt;/p>
&lt;h3 id="sqlite">SQLite&lt;/h3>
&lt;p>
&lt;a href="https://www.sqlite.org/" target="_blank">SQLite&lt;/a> is the default persistent storage and automatically selected if no other persistent
storage option is given. It can be further configured with the &lt;code>--storage-opt&lt;/code> configuration option, see the
&lt;a href="https://github.com/mattn/go-sqlite3/wiki/DSN" target="_blank">go-sqlite3
Wiki&lt;/a> for available Data Source Name (DSN) options.&lt;/p>
&lt;p>As an example, the following command runs a wfx instance with an ephemeral in-memory SQLite database:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wfx --storage sqlite --storage-opt &lt;span style="color:#d14">&amp;#34;file:wfx?mode=memory&amp;amp;cache=shared&amp;amp;_fk=1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that all state is lost on wfx exiting so it&amp;rsquo;s advised to use it for testing purposes only.&lt;/p>
&lt;h3 id="postgresql">PostgreSQL&lt;/h3>
&lt;p>
&lt;a href="https://www.postgresql.org/" target="_blank">PostgreSQL&lt;/a> is a well-known open source object-relational database. Via environment
variables or a Data Source Name (DSN) passed as &lt;code>--storage-opt&lt;/code>, the link to a PostgreSQL instance is configured, see
PostgreSQL&amp;rsquo;s
&lt;a href="https://www.postgresql.org/docs/15/libpq-connect.html#LIBPQ-PARAMKEYWORDS" target="_blank">parameter key word names&lt;/a> for
DSN and
&lt;a href="http://www.postgresql.org/docs/15/static/libpq-envars.html" target="_blank">environment variables&lt;/a> documentation for details
and available options.&lt;/p>
&lt;p>As an example, the following two commands each run a wfx instance connecting to the same PostgreSQL instance but with
different configuration means:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic"># Configuration via DSN key=value string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wfx --storage postgres &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> --storage-opt &lt;span style="color:#d14">&amp;#34;host=localhost port=5432 user=wfx password=secret database=wfx&amp;#34;&lt;/span> &amp;amp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic"># Configuration using environment variables&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>env &lt;span style="color:#008080">PGHOST&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>localhost &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> &lt;span style="color:#008080">PGPORT&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#099">5432&lt;/span> &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> &lt;span style="color:#008080">PGUSER&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>wfx &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> &lt;span style="color:#008080">PGPASSWORD&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>secret &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> &lt;span style="color:#008080">PGDATABASE&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>wfx &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> wfx --storage postgres
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="mysql">MySQL&lt;/h3>
&lt;p>
&lt;a href="https://www.mysql.com/" target="_blank">MySQL&lt;/a> is another well-known open source relational database.&lt;/p>
&lt;p>Note that
&lt;a href="https://mariadb.org" target="_blank">MariaDB&lt;/a> is currently unsupported due to the lack of certain JSON features (specifically
the inability to directly index JSON data).&lt;/p>
&lt;p>With the Data Source Name (DSN) passed as &lt;code>--storage-opt&lt;/code>, the link to a MySQL instance is configured, see
&lt;a href="https://github.com/go-sql-driver/mysql#dsn-data-source-name" target="_blank">Go&amp;rsquo;s SQL
Driver&lt;/a> for available options and as reference.&lt;/p>
&lt;p>As an example, the following command runs a wfx instance connecting to a MySQL instance using similar configuration
options as for PostgreSQL:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic"># Configuration via DSN URL string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wfx --storage mysql &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> --storage-opt &lt;span style="color:#d14">&amp;#34;wfx:secret@tcp(localhost:3306)/wfx&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="communication-channels">Communication Channels&lt;/h2>
&lt;p>wfx currently supports the following network communication channels:&lt;/p>
&lt;ul>
&lt;li>&lt;code>http&lt;/code>: Unencrypted HTTP&lt;/li>
&lt;li>&lt;code>https&lt;/code>: HTTP over TLS (Transport Layer Security)&lt;/li>
&lt;li>&lt;code>unix&lt;/code>: Unix-domain sockets&lt;/li>
&lt;/ul>
&lt;p>With the &lt;code>--scheme&lt;/code> configuration option, one or multiple from the preceding list are enabled. For instance, to use wfx
in HTTPS-only mode:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wfx --scheme&lt;span style="color:#000;font-weight:bold">=&lt;/span>https &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> --tls-certificate&lt;span style="color:#000;font-weight:bold">=&lt;/span>localhost/cert.pem &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> --tls-key&lt;span style="color:#000;font-weight:bold">=&lt;/span>localhost/key.pem
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To enable both, HTTP and HTTPS, simultaneously, bound to different hosts:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wfx --scheme&lt;span style="color:#000;font-weight:bold">=&lt;/span>http,https &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> --client-host&lt;span style="color:#000;font-weight:bold">=&lt;/span>localhost &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> --client-tls-host&lt;span style="color:#000;font-weight:bold">=&lt;/span>0.0.0.0 &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> --tls-certificate&lt;span style="color:#000;font-weight:bold">=&lt;/span>localhost/cert.pem &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> --tls-key&lt;span style="color:#000;font-weight:bold">=&lt;/span>localhost/key.pem
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To exclusively use Unix-domain sockets:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wfx --scheme unix &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> --client-unix-socket /tmp/wfx-client.sock &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> --mgmt-unix-socket /tmp/wfx-mgmt.sock
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The following connectivity parameters are available:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Parameter&lt;/th>
&lt;th style="text-align:left">Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;code>--scheme&lt;/code>&lt;/td>
&lt;td style="text-align:left">One or multiple communication schemes to be used for client-server communication.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>--client-host&lt;/code>&lt;/td>
&lt;td style="text-align:left">The address to listen on for client HTTP requests&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>--client-port&lt;/code>&lt;/td>
&lt;td style="text-align:left">The port to listen on for client HTTP requests&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>--client-tls-host&lt;/code>&lt;/td>
&lt;td style="text-align:left">Same as &lt;code>--client-host&lt;/code> but for HTTP over TLS&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>--client-tls-port&lt;/code>&lt;/td>
&lt;td style="text-align:left">Same as &lt;code>--client-port&lt;/code> but for HTTP over TLS&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>--mgmt-host&lt;/code>&lt;/td>
&lt;td style="text-align:left">The address to listen on for wfx management / operator HTTP requests&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>--mgmt-port&lt;/code>&lt;/td>
&lt;td style="text-align:left">The port to listen on for wfx management /operator HTTP requests&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>--mgmt-tls-host&lt;/code>&lt;/td>
&lt;td style="text-align:left">Same as &lt;code>--mgmt-host&lt;/code> but for HTTP over TLS&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>--mgmt-tls-port&lt;/code>&lt;/td>
&lt;td style="text-align:left">Same as &lt;code>--mgmt-port&lt;/code> but for HTTP over TLS&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>--tls-certificate&lt;/code>&lt;/td>
&lt;td style="text-align:left">The location of the TLS certificate file&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>--tls-key&lt;/code>&lt;/td>
&lt;td style="text-align:left">The location of the TLS key file&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>--tls-ca&lt;/code>&lt;/td>
&lt;td style="text-align:left">The certificate authority certificate file for mutual TLS authentication&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="file-server">File Server&lt;/h2>
&lt;p>wfx comes with a built-in file server that serves artifacts at &lt;code>http://&amp;lt;wfx host:{client,mgmt} port&amp;gt;/download/&lt;/code>. This
feature is particularly useful for dynamic deployments or when an external file storage solution is unavailable. To
configure the directory that backs the file server URL&amp;rsquo;s contents, use the &lt;code>--simple-fileserver=/path/to/folder&lt;/code> option.&lt;/p>
&lt;p>Note that this feature is disabled by default and must be explicitly enabled at run-time using this option.&lt;/p></description></item><item><title>Docs: Device Artifact Update (DAU)</title><link>https://siemens.github.io/wfx/docs/workflows/dau/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://siemens.github.io/wfx/docs/workflows/dau/</guid><description>
&lt;p>The Device Artifact Update Workflow Family has been specifically designed for updating software on devices.&lt;/p>
&lt;p>The following clients have support for the Device Artifact Update Workflow Family:&lt;/p>
&lt;ul>
&lt;li>
&lt;a href="https://github.com/sbabic/swupdate/blob/master/doc/source/suricatta.rst#support-for-wfx" target="_blank">SWUpdate&lt;/a> - Software Update
for Embedded Linux Devices.&lt;/li>
&lt;/ul>
&lt;h2 id="workflows">Workflows&lt;/h2>
&lt;p>Currently, the DAU Workflow Family comprises two workflows that model the software update process for devices:&lt;/p>
&lt;p>The
&lt;a href="https://siemens.github.io/wfx/wfx.workflow.dau.direct.yml">&lt;code>wfx.workflow.dau.direct&lt;/code>&lt;/a> workflow caters for the fully automated software update
use case while the
&lt;a href="https://siemens.github.io/wfx/wfx.workflow.dau.phased.yml">&lt;code>wfx.workflow.dau.phased&lt;/code>&lt;/a> workflow operates in distinct phases
requiring external input to advance the workflow.&lt;/p>
&lt;h3 id="installation">Installation&lt;/h3>
&lt;p>wfx does not come with any pre-loaded or pre-seeded workflows, thus requiring the creation of workflows either locally&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wfxctl workflow create workflow/dau/*.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>or remotely, e.g. using
&lt;a href="https://curl.se/" target="_blank">curl&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -Ls https://github.com/siemens/wfx/raw/main/workflow/dau/wfx.workflow.dau.phased.yml | wfxctl workflow create -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl -Ls https://github.com/siemens/wfx/raw/main/workflow/dau/wfx.workflow.dau.direct.yml | wfxctl workflow create -
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="modus-operandi">Modus Operandi&lt;/h3>
&lt;p>Both workflows operate in &lt;strong>stages&lt;/strong>, each of which follows the Command, Feedback, and Completion (CFC) scheme. These
stages consist of:&lt;/p>
&lt;ol>
&lt;li>a &lt;em>command&lt;/em> state which instructs the device to start the update process,&lt;/li>
&lt;li>an &lt;em>action + feedback&lt;/em> state during which the device performs the necessary work and provides progress updates to
wfx, and&lt;/li>
&lt;li>a &lt;em>completion&lt;/em> state in which the device signals the completion of the stage.&lt;/li>
&lt;/ol>
&lt;p>A sequence of such CFC loops constitutes the particular workflow. In case of &lt;code>wfx.workflow.dau.direct&lt;/code>, the wfx
transitions to the next stage automatically while in case of &lt;code>wfx.workflow.dau.phased&lt;/code>, wfx waits for external input,
e.g., from an operator.&lt;/p>
&lt;h3 id="wfxworkflowdaudirect">wfx.workflow.dau.direct&lt;/h3>
&lt;p>The
&lt;a href="https://siemens.github.io/wfx/wfx.workflow.dau.direct.yml">&lt;code>wfx.workflow.dau.direct&lt;/code>&lt;/a> workflow consists of the two stages &lt;em>installation&lt;/em> and
&lt;em>activation&lt;/em>: During the installation stage, the device downloads and installs the update artifacts. In the subsequent
activation stage, the device takes action to activate the update. Depending on the type of artifact(s), this activation
action varies as, e.g., container images need a different activation action than firmware disk images (see below Section
&lt;a href="#job-definition">Job Definition&lt;/a>).&lt;/p>
&lt;p>The graph representation of the &lt;code>wfx.workflow.dau.direct&lt;/code> workflow is depicted in the following figure, omitting state
descriptions and transition eligibles for legibility:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span> INSTALL ────────┐
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├─◀─┐ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▼ │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>INSTALLING ──────┤
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▼ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>INSTALLED │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▼ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ACTIVATE ───────┤
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├─◀─┐ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▼ │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ACTIVATING ──────┤
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▼ ▼
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ACTIVATED TERMINATED
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="wfxworkflowdauphased">wfx.workflow.dau.phased&lt;/h3>
&lt;p>The
&lt;a href="https://siemens.github.io/wfx/wfx.workflow.dau.phased.yml">&lt;code>wfx.workflow.dau.phased&lt;/code>&lt;/a> workflow is similar to the &lt;code>wfx.workflow.dau.direct&lt;/code>
workflow but starts in the &lt;code>CREATED&lt;/code> state instead and introduces another &lt;em>download&lt;/em> stage in between installation and
activation to decouple artifact download from its installation: The initial state &lt;code>CREATED&lt;/code> serves as an anchor to
actually kickstart the external input-driven CFC scheme. With the additional download stage, a maintenance window could
be realized prior to which the artifact is downloaded but only installed when wfx commands the begin of the installation
phase (e.g. a certain time window has been reached).&lt;/p>
&lt;p>Consequently ― and in contrast to the &lt;code>wfx.workflow.dau.direct&lt;/code> ― wfx doesn&amp;rsquo;t transition to the next stage automatically
but waits for external input to do so, e.g., by an operator.&lt;/p>
&lt;p>The graph representation of the &lt;code>wfx.workflow.dau.phased&lt;/code> workflow is depicted in the following figure, again omitting
state descriptions and transition eligibles for legibility:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span> CREATED
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▼
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DOWNLOAD ───────┐
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├─◀─┐ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▼ │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>DOWNLOADING ──────┤
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▼ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DOWNLOADED │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▼ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> INSTALL ────────┤
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├─◀─┐ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▼ │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> INSTALLING ──────┤
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▼ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> INSTALLED │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▼ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ACTIVATE ───────┤
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├─◀─┐ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▼ │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ACTIVATING ──────┤
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▼ ▼
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ACTIVATED TERMINATED
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="job-definition">Job Definition&lt;/h2>
&lt;p>As being general purpose, wfx doesn&amp;rsquo;t impose a particular schema on the information conveyed to the device describing
its action(s) to perform, except that it&amp;rsquo;s in JSON format. Instead, the job definition is a contract between the
operator creating jobs, each possibly following a different workflow, and the client(s) executing those jobs in
lock-step with the wfx. The same is true for the type of update artifacts that are specified in the job definition and
that can be of any form such as, e.g., firmware disk images, container images, or configurations: The operator has to
has to take care to only assign jobs to devices that are known to be able to digest this type of update artifact. wfx
doesn&amp;rsquo;t exercise any checks on compatibility.&lt;/p>
&lt;p>An exemplary job for a device called &lt;code>example&lt;/code> (utilizing the
&lt;a href="https://siemens.github.io/wfx/docs/configuration/#file-server">built-in simple file
server&lt;/a>) may be created as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a61717;background-color:#e3d2d2">cat&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">&amp;lt;&amp;lt;EOF&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">|&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">wfxctl&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">job&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">create&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">--client-id&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">example&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">--workflow&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">wfx.workflow.dau.direct&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">-&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000080">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;1.0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000080">&amp;#34;type&amp;#34;&lt;/span>: [&lt;span style="color:#d14">&amp;#34;firmware&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000080">&amp;#34;artifacts&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000080">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;Example Device Firmware Artifact&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000080">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;1.1&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000080">&amp;#34;uri&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;http://wfx.host:8080/download/example_artifact.swu&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a61717;background-color:#e3d2d2">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>type&lt;/code> list field allows to label update jobs. Labels may be used by wfx&amp;rsquo;s on-device counterpart to determine the
activation action(s) to execute since, e.g., container images need a different activation action than firmware disk
images or a configuration change.&lt;/p>
&lt;p>In the preceding example, the presence of the &lt;code>firmware&lt;/code> label may be used to instruct the on-device client to
test-reboot into the new firmware.&lt;/p>
&lt;p>Since wfx isn&amp;rsquo;t concerned with the job definition except for conveying it to the device, it can be adapted to specific
needs by feeding in a different job definition into the wfx on job creation and having a client on the device that can
digest it.&lt;/p></description></item><item><title>Docs: Operations</title><link>https://siemens.github.io/wfx/docs/operations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://siemens.github.io/wfx/docs/operations/</guid><description>
&lt;h2 id="api">API&lt;/h2>
&lt;p>wfx provides two RESTful APIs to interact with it: the northbound operator/management interface and the southbound
interface used by clients as illustrated in the following figure:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span> Management
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▼ Northbound API
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>┌──────────────────┐
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ wfx │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└──────────────────┘
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▲ Southbound API
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Device
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The northbound API is used to create jobs and execute server-side state transitions, whereas the southbound API is used
for client-side transitions.&lt;/p>
&lt;p>The complete
&lt;a href="https://siemens.github.io/wfx/wfx.swagger.yml">wfx API specification&lt;/a> is accessible at runtime via the &lt;code>/swagger.json&lt;/code> endpoint.
Clients may inspect this specification at run-time so to obey the various limits imposed, e.g, for parameter value
ranges and array lengths.&lt;/p>
&lt;p>For convenience, wfx includes a built-in Swagger UI accessible at runtime via
&lt;a href="http://localhost:8080/api/wfx/v1/docs" target="_blank">http://localhost:8080/api/wfx/v1/docs&lt;/a>,
assuming default listening host and port
&lt;a href="https://siemens.github.io/wfx/docs/configuration/">configuration&lt;/a>.&lt;/p>
&lt;h3 id="job-events">Job Events&lt;/h3>
&lt;p>Job events provide a notification mechanism that informs clients about certain operations happening on jobs. This
approach eliminates the need for clients to continuously poll wfx, thus optimizing network usage and client resources.
Job events can be useful for user interfaces (UIs) and other applications that demand near-instantaneous updates.&lt;/p>
&lt;h4 id="architecture">Architecture&lt;/h4>
&lt;p>Below is a high-level overview of how the communication flow operates:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span> ┌────────┐ ┌─────┐
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ Client │ │ wfx │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └────────┘ └─────┘
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | HTTP GET /jobs/events |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |-----------------------------------►|
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | Event Loop |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ┌───|────────────────────────────────────|───┐
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ | [Content-Type: text/event-stream] | │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ | | │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ | | │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ | Push Event | │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ |◄-----------------------------------| │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ | | │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └───|────────────────────────────────────|───┘
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▼ ▼
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ┌────────┐ ┌─────┐
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ Client │ │ wfx │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └────────┘ └─────┘
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>The client initiates communication by sending an HTTP &lt;code>GET&lt;/code> request to the &lt;code>/jobs/events&lt;/code> endpoint. Clients may also
include optional
&lt;a href="#filter-parameters">filter parameters&lt;/a> within the request.&lt;/li>
&lt;li>Upon receipt of the request, &lt;code>wfx&lt;/code> sets the &lt;code>Content-Type&lt;/code> header to &lt;code>text/event-stream&lt;/code>.&lt;/li>
&lt;li>The server then initiates a stream of job events in the response body, allowing clients to receive instant updates.&lt;/li>
&lt;/ol>
&lt;h4 id="event-format-specification">Event Format Specification&lt;/h4>
&lt;p>The job events stream is composed of
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events" target="_blank">server-sent
events&lt;/a> (SSE). Accordingly, the stream is
structured as follows:&lt;/p>
&lt;pre>&lt;code>data: [...]
id: 1
data: [...]
id: 2
[...]
&lt;/code>&lt;/pre>
&lt;p>An individual event within the stream conforms to this format:&lt;/p>
&lt;pre>&lt;code>data: { &amp;quot;action&amp;quot;: &amp;quot;&amp;lt;ACTION&amp;gt;&amp;quot;, &amp;quot;ctime&amp;quot;: &amp;lt;CTIME&amp;gt;, &amp;quot;tags&amp;quot;: &amp;lt;TAGS&amp;gt;, &amp;quot;job&amp;quot;: &amp;lt;JOB&amp;gt; }
id: &amp;lt;EVENT_ID&amp;gt;\n\n
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Note&lt;/strong>: Each event is terminated by a pair of newline characters &lt;code>\n\n&lt;/code> (as required by the SSE spec).&lt;/p>
&lt;p>The semantics of the individual fields is:&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;lt;ACTION&amp;gt;&lt;/code> specifies the type of event that occurred. The valid actions are:
&lt;ul>
&lt;li>&lt;code>CREATE&lt;/code>: a new job has been created&lt;/li>
&lt;li>&lt;code>DELETE&lt;/code>: an existing job has been deleted&lt;/li>
&lt;li>&lt;code>ADD_TAGS&lt;/code>: tags were added to a job&lt;/li>
&lt;li>&lt;code>DELETE_TAGS&lt;/code>: tags were removed from a job&lt;/li>
&lt;li>&lt;code>UPDATE_STATUS&lt;/code>: job status has been updated&lt;/li>
&lt;li>&lt;code>UPDATE_DEFINITION&lt;/code>: job definition has been updated&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>&amp;lt;CTIME&amp;gt;&lt;/code>: event creation time (ISO8601)&lt;/li>
&lt;li>&lt;code>&amp;lt;TAGS&amp;gt;&lt;/code>: JSON array of tags as provided by the client&lt;/li>
&lt;li>&lt;code>&amp;lt;JOB&amp;gt;&lt;/code> is a JSON object containing the portion of the job object which was changed, e.g., for an &lt;code>UPDATE_STATUS&lt;/code>
event, the job status is sent but not its definition. To enable
&lt;a href="#filter-parameters">filtering&lt;/a>, the fields &lt;code>id&lt;/code>,
&lt;code>clientId&lt;/code> and &lt;code>workflow.name&lt;/code> are &lt;em>always&lt;/em> part of the response.&lt;/li>
&lt;li>&lt;code>&amp;lt;EVENT_ID&amp;gt;&lt;/code>: an integer which uniquely identifies each event, starting at 1 and incrementing by 1 for every
subsequent event. Clients can use this to identify any missed messages. If an overflow occurs, the integer resets to
zero, a scenario the client can recognize and address.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Example:&lt;/strong>&lt;/p>
&lt;pre>&lt;code>data: {&amp;quot;action&amp;quot;:&amp;quot;UPDATE_STATUS&amp;quot;,&amp;quot;job&amp;quot;:{&amp;quot;clientId&amp;quot;:&amp;quot;Dana&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;c6698105-6386-4940-a311-de1b57e3faeb&amp;quot;,&amp;quot;status&amp;quot;:{&amp;quot;definitionHash&amp;quot;:&amp;quot;adc1cfc1577119ba2a0852133340088390c1103bdf82d8102970d3e6c53ec10b&amp;quot;,&amp;quot;state&amp;quot;:&amp;quot;PROGRESS&amp;quot;},&amp;quot;workflow&amp;quot;:{&amp;quot;name&amp;quot;:&amp;quot;wfx.workflow.kanban&amp;quot;}}}
id: 1\n\n
&lt;/code>&lt;/pre>
&lt;h4 id="filter-parameters">Filter Parameters&lt;/h4>
&lt;p>Job events can be filtered using any combination of the following parameters:&lt;/p>
&lt;ul>
&lt;li>Job IDs&lt;/li>
&lt;li>Client IDs&lt;/li>
&lt;li>Workflow Names&lt;/li>
&lt;/ul>
&lt;p>This enables more precise control over the dispatched events. Note that it is entirely possible to subscribe multiple
times to job events using various filters in order to create a more advanced event recognition model.&lt;/p>
&lt;h4 id="examples">Examples&lt;/h4>
&lt;p>&lt;code>wfxctl&lt;/code> offers a reference client implementation. The following command subscribes to &lt;strong>all&lt;/strong> job events:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wfxctl job events
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This may result in a large number of events, though. For a more targeted approach, filter parameters may be used.
Assuming the job IDs are known (either because the jobs have been created already or the IDs are received via another
subscription channel), the following will subscribe to events matching either of the two specified job IDs:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wfxctl job events --job-id&lt;span style="color:#000;font-weight:bold">=&lt;/span>d305e539-1d41-4c95-b19a-2a7055c469d0 --job-id&lt;span style="color:#000;font-weight:bold">=&lt;/span>e692ad92-45e6-4164-b3fd-8c6aa884011c
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>See &lt;code>wfxctl job events --help&lt;/code> for other filter parameters, e.g. workflow names.&lt;/p>
&lt;h4 id="considerations-and-limitations">Considerations and Limitations&lt;/h4>
&lt;ol>
&lt;li>&lt;strong>Asynchronous Job Status Updates&lt;/strong>: Job status updates are dispatched asynchronously to avoid the risk of a
subscriber interfering with the actual job operation. In particular, there is no guarantee that the messages sent to
the client arrive in a linear order (another reason for that may be networking-related). While this is typically not
a concern, it could become an issue in high-concurrency situations. For example, when multiple clients try to modify
the same job or when a single client issues a rapid sequence of status updates. As a result, messages could arrive
in a not necessarily linear order, possibly deviating from the client&amp;rsquo;s expectation. However, the client can use the
(event) &lt;code>id&lt;/code> and &lt;code>ctime&lt;/code> fields to establish a natural ordering of events as emitted by wfx.&lt;/li>
&lt;li>&lt;strong>Unacknowledged Server-Sent Events (SSE)&lt;/strong>: SSE operates on a one-way communication model and does not include an
acknowledgment or handshake protocol to confirm message delivery. This design choice aligns with the fundamental
principles of SSE but does mean that there&amp;rsquo;s a possibility some events may not reach the intended subscriber (which
the client can possibly detect by keeping track of SSE event IDs).&lt;/li>
&lt;li>&lt;strong>Event Stream Orchestration&lt;/strong>: Each wfx instance only yields the events happening on that instance. Consequently,
if there are multiple wfx instances, a consolidated &amp;ldquo;global&amp;rdquo; event stream can only be assembled by subscribing to
all wfx instances (and aggregating the events).&lt;/li>
&lt;li>&lt;strong>Browser Connection Limits for SSE&lt;/strong>: Web browsers typically restrict the number of SSE connections to six per
domain. To overcome this limitation, HTTP/2 can be used, allowing up to 100 connections by default, or
&lt;a href="#filter-parameters">filter
parameters&lt;/a> can be utilized to efficiently manage the connections.&lt;/li>
&lt;/ol>
&lt;h3 id="response-filters">Response Filters&lt;/h3>
&lt;p>wfx allows server-side response content filtering prior to sending the response to the client so to tailor it to client
information needs. For example, if a client isn&amp;rsquo;t interested in the job&amp;rsquo;s history, it may request to omit it in wfx
responses ― which also saves bandwidth. To this end, clients send a custom HTTP header, &lt;code>X-Response-Filter&lt;/code>, with a
&lt;a href="https://stedolan.github.io/jq/" target="_blank">&lt;code>jq&lt;/code>&lt;/a>-like expression value. For example, assuming a job with ID 1 exists,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -s -f http://localhost:8080/api/wfx/v1/jobs/1/status &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> -H &lt;span style="color:#d14">&amp;#34;X-Response-Filter: .state&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>returns the current &lt;code>state&lt;/code> of the job as a string.&lt;/p>
&lt;p>Note that the (filtered) response might no longer be a valid JSON expression as is the case in this example. It&amp;rsquo;s the
client&amp;rsquo;s responsibility to handle the filtered response properly ― which it asked for being filtered in the first place.&lt;/p>
&lt;h3 id="health-check">Health Check&lt;/h3>
&lt;p>wfx includes an internal health check service that&amp;rsquo;s accessible at &lt;code>/health&lt;/code>, e.g., via&lt;/p>
&lt;pre>&lt;code>curl http://localhost:8080/health
&lt;/code>&lt;/pre>
&lt;p>in standard
&lt;a href="https://siemens.github.io/wfx/docs/configuration/">configuration&lt;/a> or, alternatively,&lt;/p>
&lt;pre>&lt;code>wfxctl health
&lt;/code>&lt;/pre>
&lt;h3 id="wfx-version">wfx Version&lt;/h3>
&lt;p>The version of wfx running is accessible at &lt;code>/version&lt;/code>, e.g., via&lt;/p>
&lt;pre>&lt;code>curl http://localhost:8080/version
&lt;/code>&lt;/pre>
&lt;p>in standard
&lt;a href="https://siemens.github.io/wfx/docs/configuration/">configuration&lt;/a> or, alternatively,&lt;/p>
&lt;pre>&lt;code>wfxctl version
&lt;/code>&lt;/pre>
&lt;h2 id="deployment">Deployment&lt;/h2>
&lt;p>To assist a secure deployment, both, the northbound operator/management interface and the southbound client interface,
are isolated from each other by being bound to distinct ports so that, e.g., a firewall can be used to steer and
restrict access.&lt;/p>
&lt;p>While this separation provides a basic level of security, it doesn&amp;rsquo;t prevent clients interfering with each other: For
example, there is no mechanism in place to prevent a client &lt;code>A&lt;/code> from updating the jobs of another client &lt;code>B&lt;/code>. This is a
deliberate design choice following the Unix philosophy of &amp;ldquo;Make each program do one thing well&amp;rdquo;. It allows for flexible
integration of wfx into existing or new infrastructure. Existing infrastructure most probably has request authentication
and authorization measures in place. For new infrastructure, such a feature is likely better provided by specialized
components/services supporting the overall deployment security architecture.&lt;/p>
&lt;p>Thus, for productive deployments, a deployment along the lines of the following figure is recommended with an &lt;em>API
Gateway&lt;/em> subsuming the discussed security requirements and performing access steering with regard to, e.g., client
access.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>┌──────────────────┐
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ Operator / │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ Management │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└──────────────────┘
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ Request Authentication &amp;amp; Authorization
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▼
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>┌──────────────────┐
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ API Gateway │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└──────────────────┘
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ Northbound: Management API
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▼
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>┌──────────────────┐
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ wfx │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└──────────────────┘
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▲
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ Southbound: Client API
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>┌──────────────────┐
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ API Gateway │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└──────────────────┘
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▲
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ Request Authentication &amp;amp; Authorization
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ┌──────────────────┐
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>┌┴─────────────────┐│
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ Client ├┘
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└──────────────────┘
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="plugins">Plugins&lt;/h2>
&lt;p>wfx offers a flexible (out-of-tree) plugin mechanism for extending its request processing capabilities. A plugin
functions as a subprocess, both initiated and supervised by wfx. Communication between the plugin and wfx is facilitated
through the exchange of
&lt;a href="https://flatbuffers.dev/" target="_blank">flatbuffer&lt;/a> messages over stdin/stdout, thus permitting plugins to be
developed in &lt;em>any&lt;/em> programming language.&lt;/p>
&lt;h3 id="design-choices">Design Choices&lt;/h3>
&lt;p>Due to the potential use of plugins for authentication, it is critical that &lt;strong>all requests are passed through the
plugins&lt;/strong> before further processing and that that &lt;strong>no request can slip through&lt;/strong> without being processed by the
plugins. This has led to the following deliberate design choices:&lt;/p>
&lt;ol>
&lt;li>Should any plugin &lt;strong>exit&lt;/strong> (e.g., due to a crash), &lt;strong>wfx is designed to terminate gracefully&lt;/strong>. While it might be
feasible for wfx to attempt restarting the affected plugins, this responsibility is more suitably handled by a
dedicated process supervisor like systemd. The shutdown of wfx enables the process supervisor to restart wfx, which,
in turn, starts all its plugins again.&lt;/li>
&lt;li>All plugins are &lt;strong>initialized before wfx starts processing any requests&lt;/strong>. In particular, after the completion of
wfx&amp;rsquo;s startup phase, it&amp;rsquo;s not possible to add or remove any plugins.&lt;/li>
&lt;li>Plugins are expected to function properly. Specifically, if a plugin returns an invalid response type or an
unexpected response (for example, in response to a request that was never sent to the plugin), wfx will terminate
gracefully. This is because such behavior usually indicates a misconfiguration. The overall strategy is to fail fast
and early.&lt;/li>
&lt;/ol>
&lt;h3 id="using-plugins">Using Plugins&lt;/h3>
&lt;p>To use plugins at runtime, wfx must be compiled with the &lt;code>plugin&lt;/code> tag (enabled by default) and started with the
&lt;code>--mgmt-plugins-dir&lt;/code> resp. &lt;code>--client-plugins-dir&lt;/code> flag, specifying a directory containing the plugins to be used. This
enables the use of different plugin sets for the north- resp. southbound API.&lt;/p>
&lt;p>&lt;strong>Note&lt;/strong>: In a plugin directory, all &lt;em>executable&lt;/em> files (including symlinks to executables) are assumed to be plugins.
Non-executable files, like configuration files, are excluded. For deterministic behavior, plugins are sorted and
executed in lexicographic order based on their filenames during the startup of wfx.&lt;/p>
&lt;h3 id="developing-plugins">Developing Plugins&lt;/h3>
&lt;p>Communication between wfx and a plugin is achieved by exchanging
&lt;a href="https://flatbuffers.dev/" target="_blank">flatbuffer&lt;/a> messages via
stdin/stdout. The flatbuffer specification is available in the
&lt;a href="https://siemens.github.io/wfx/fbs">fbs&lt;/a> directory. A plugin can use &lt;code>stderr&lt;/code> for
logging purposes (&lt;code>stderr&lt;/code> is forwarded and prefixed by wfx).&lt;/p>
&lt;p>For every incoming request, wfx generates a unique number called &lt;code>cookie&lt;/code>. The &lt;code>cookie&lt;/code>, along with the complete request
(e.g., headers and body in the case of HTTP), is written to the plugin&amp;rsquo;s stdin. The plugin then sends its response,
paired with the same &lt;code>cookie&lt;/code>, back to wfx by writing to its stdout. This &lt;code>cookie&lt;/code> mechanism ensures that wfx can
accurately associate responses with their corresponding requests.&lt;/p>
&lt;p>&lt;strong>Technical Note&lt;/strong>: Cookies are represented as unsigned 64-bit integers, which may lead to wraparound. This means there
is a slight possibility that a cookie could be reused for more than one request over the lifespan of a plugin. However,
this event occurs only once every 2^64 requests. By the time such a reuse might happen, the original request associated
with the cookie would have already timed out.&lt;/p>
&lt;p>&lt;strong>Note&lt;/strong>:&lt;/p>
&lt;ol>
&lt;li>It is crucial for the plugin to read data from its stdin descriptor promptly to prevent blocking writes by wfx. The
&lt;code>cookie&lt;/code> mechanism facilitates (and encourages!) asynchronous processing.&lt;/li>
&lt;li>The working directory for the plugin process is the same as the working directory of wfx, which is the directory
from which wfx was launched.&lt;/li>
&lt;/ol>
&lt;p>Based on the plugin&amp;rsquo;s response, wfx can:&lt;/p>
&lt;ul>
&lt;li>Modify the incoming request before it undergoes further processing by wfx in the usual manner.&lt;/li>
&lt;li>Send a preemptive response back to the client, such as a &amp;ldquo;permission denied&amp;rdquo; or &amp;ldquo;service unavailable&amp;rdquo; message.&lt;/li>
&lt;li>Leave the request unchanged.&lt;/li>
&lt;/ul>
&lt;h3 id="use-cases">Use Cases&lt;/h3>
&lt;p>Plugins are typically used for:&lt;/p>
&lt;ul>
&lt;li>Enforcing authentication and authorization for API endpoints.&lt;/li>
&lt;li>Handling URL rewriting and redirection tasks.&lt;/li>
&lt;/ul>
&lt;h3 id="example">Example&lt;/h3>
&lt;p>An
&lt;a href="https://siemens.github.io/wfx/plugin">example plugin&lt;/a> written in Go demonstrates denying access to the &lt;code>/api/wfx/v1/workflows&lt;/code> endpoint.&lt;/p>
&lt;h2 id="telemetry">Telemetry&lt;/h2>
&lt;p>No telemetry or user data is collected or processed by wfx.&lt;/p>
&lt;p>Note that there is an indirect dependency on &lt;code>go.opentelemetry.io/otel&lt;/code> via
&lt;a href="https://github.com/go-openapi" target="_blank">Go OpenAPI&lt;/a>
by the &lt;strong>client runtime&lt;/strong> (as used by &lt;code>wfxctl&lt;/code>). Telemetry is deliberately turned off in wfx. See
&lt;a href="https://github.com/go-openapi/runtime/pull/254" target="_blank">Add support for
tracing via OpenTelemetry&lt;/a> for details.&lt;/p>
&lt;h2 id="performance--benchmarking">Performance / Benchmarking&lt;/h2>
&lt;p>wfx has been designed with performance and horizontal scalability in mind.&lt;/p>
&lt;p>To regress-test and gauge the performance of wfx in particular scenarios, the &lt;code>wfx-loadtest&lt;/code> tool stressing the REST API
can be helpful. It&amp;rsquo;s build by default alongside the other wfx binaries, see Section
&lt;a href="https://siemens.github.io/wfx/docs/installation/#building-wfx">Building
wfx&lt;/a>.&lt;/p>
&lt;p>As an example, the following commands execute a benchmark of the default SQLite persistent storage:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wfx --log-format json --log-level warn &amp;amp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wfx-loadtest --log-level warn --duration 60s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note: In the above example, the log format is JSON since pretty-printing is an expensive operation.&lt;/p>
&lt;p>The benchmark result including statistics is printed to the terminal after 60 seconds and also available in the
&lt;code>results&lt;/code> directory for further inspection.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>*******************************************************************************
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Summary
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*******************************************************************************
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Requests [total, rate, throughput] 6000, 100.02, 100.02
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Duration [total, attack, wait] 59.987s, 59.986s, 792.516µs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Latencies [min, mean, 50, 90, 95, 99, max] 187.363µs, 612.69µs, 602.423µs, 744.281µs, 809.622µs, 1.062ms, 7.242ms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Bytes In [total, mean] 4041243, 673.54
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Bytes Out [total, mean] 81693, 13.62
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Success [ratio] 100.00%
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Status Codes [code:count] 200:5625 201:375
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Error Set:
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and is to be interpreted as follows: There were 6,000 total requests at a rate of 100.02 requests per second. In terms
of latency, the minimum response time was 187.363 microseconds, the mean was 612.69 microseconds, and the 99th
percentile was 1.062 milliseconds. All requests were successful with a success ratio of 100%. The status codes indicate
that a total of 5,625 status updates were sent with HTTP error code 200 and 375 jobs were created with HTTP error code
201. No errors were reported.&lt;/p>
&lt;p>The latency over time distribution is illustrated in the following figure:
&lt;a href="https://siemens.github.io/wfx/benchmark.png">&lt;img src="https://siemens.github.io/wfx/benchmark.png" alt="benchmark
plot" />&lt;/a>&lt;/p></description></item><item><title>Docs: Use Cases</title><link>https://siemens.github.io/wfx/docs/use-cases/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://siemens.github.io/wfx/docs/use-cases/</guid><description>
&lt;p>This document presents a collection of use cases for employing wfx. Owing to wfx&amp;rsquo;s versatility, the list provided here
is not exhaustive. Should you identify an important use case missing, please feel free to
&lt;a href="https://github.com/siemens/wfx/tree/main/CONTRIBUTING.md" target="_blank">contribute&lt;/a>.&lt;/p>
&lt;p>&lt;strong>Note&lt;/strong>: Each use case requires an appropriate client implementation to execute the specific &amp;ldquo;business logic&amp;rdquo;. If no
such client exists yet, this implies writing custom code.&lt;/p>
&lt;h2 id="software-update">Software Update&lt;/h2>
&lt;p>Perform over-the-air (OTA) firmware updates using
&lt;a href="https://swupdate.org/" target="_blank">SWUpdate&lt;/a> and the
&lt;a href="https://siemens.github.io/wfx/docs/workflows/dau/">Device Artifact Update
(DAU) Workflow Family&lt;/a>. See also SWUpdate&amp;rsquo;s
&lt;a href="https://github.com/sbabic/swupdate/blob/master/doc/source/suricatta.rst#support-for-wfx" target="_blank">Suricatta
documentation&lt;/a>.&lt;/p>
&lt;h2 id="remote-access">Remote Access&lt;/h2>
&lt;p>Establish remote terminal (debug) sessions to devices, e.g. for diagnostic purposes. The process involves:&lt;/p>
&lt;ol>
&lt;li>Creating a custom workflow
&lt;a href="https://github.com/siemens/wfx/tree/main/contrib/remote-access/wfx.workflow.remote.access.yml" target="_blank">wfx.workflow.remote.access&lt;/a>
that encapsulates the steps to initiate a remote terminal session.&lt;/li>
&lt;li>Generating a new job for the device using this workflow. The job metadata could contain authentication credentials.&lt;/li>
&lt;li>The client checks wfx periodically for new jobs. Upon finding the job from step 2, it opens its firewall and starts
a (secure) service to accept remote terminal connections.&lt;/li>
&lt;li>Following a pre-set timeout (e.g. configurable in the job metadata), the client will close its firewall and
terminate the terminal service.&lt;/li>
&lt;/ol>
&lt;p>A proof-of-concept demonstrating remote terminal connections via WebSockets (browser-based) is available
&lt;a href="https://github.com/siemens/wfx/tree/main/contrib/remote-access" target="_blank">here&lt;/a>.&lt;/p>
&lt;h2 id="config-deployment">Config Deployment&lt;/h2>
&lt;p>Another common use case involves configuration deployment, akin to the
&lt;a href="#software-update">Software Update&lt;/a> use case. The
goal is to roll out a new configuration to one or multiple client(s), leading to the restart of certain services. Again
this requires defining an
&lt;a href="https://github.com/siemens/wfx/tree/main/contrib/config-deployment/wfx.workflow.config.deployment.yml" target="_blank">appropriate
workflow&lt;/a> and a
corresponding
&lt;a href="https://github.com/siemens/wfx/tree/main/contrib/config-deployment/client/worker.go" target="_blank">client&lt;/a>. A
proof-of-concept is available
&lt;a href="https://github.com/siemens/wfx/tree/main/contrib/config-deployment" target="_blank">here&lt;/a>.&lt;/p></description></item></channel></rss>