<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>– Workflows</title><link>https://siemens.github.io/wfx/docs/workflows/</link><description>Recent content in Workflows on</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://siemens.github.io/wfx/docs/workflows/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Device Artifact Update (DAU)</title><link>https://siemens.github.io/wfx/docs/workflows/dau/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://siemens.github.io/wfx/docs/workflows/dau/</guid><description>
&lt;p>The Device Artifact Update Workflow Family has been specifically designed for updating software on devices.&lt;/p>
&lt;p>The following clients have support for the Device Artifact Update Workflow Family:&lt;/p>
&lt;ul>
&lt;li>
&lt;a href="https://github.com/sbabic/swupdate/blob/master/doc/source/suricatta.rst#support-for-wfx" target="_blank">SWUpdate&lt;/a> - Software Update
for Embedded Linux Devices.&lt;/li>
&lt;/ul>
&lt;h2 id="workflows">Workflows&lt;/h2>
&lt;p>Currently, the DAU Workflow Family comprises two workflows that model the software update process for devices:&lt;/p>
&lt;p>The
&lt;a href="https://siemens.github.io/wfx/wfx.workflow.dau.direct.yml">&lt;code>wfx.workflow.dau.direct&lt;/code>&lt;/a> workflow caters for the fully automated software update
use case while the
&lt;a href="https://siemens.github.io/wfx/wfx.workflow.dau.phased.yml">&lt;code>wfx.workflow.dau.phased&lt;/code>&lt;/a> workflow operates in distinct phases
requiring external input to advance the workflow.&lt;/p>
&lt;h3 id="installation">Installation&lt;/h3>
&lt;p>wfx does not come with any pre-loaded or pre-seeded workflows, thus requiring the creation of workflows either locally&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wfxctl workflow create workflow/dau/*.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>or remotely, e.g. using
&lt;a href="https://curl.se/" target="_blank">curl&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -Ls https://github.com/siemens/wfx/raw/main/workflow/dau/wfx.workflow.dau.phased.yml | wfxctl workflow create -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl -Ls https://github.com/siemens/wfx/raw/main/workflow/dau/wfx.workflow.dau.direct.yml | wfxctl workflow create -
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="modus-operandi">Modus Operandi&lt;/h3>
&lt;p>Both workflows operate in &lt;strong>stages&lt;/strong>, each of which follows the Command, Feedback, and Completion (CFC) scheme. These
stages consist of:&lt;/p>
&lt;ol>
&lt;li>a &lt;em>command&lt;/em> state which instructs the device to start the update process,&lt;/li>
&lt;li>an &lt;em>action + feedback&lt;/em> state during which the device performs the necessary work and provides progress updates to
wfx, and&lt;/li>
&lt;li>a &lt;em>completion&lt;/em> state in which the device signals the completion of the stage.&lt;/li>
&lt;/ol>
&lt;p>A sequence of such CFC loops constitutes the particular workflow. In case of &lt;code>wfx.workflow.dau.direct&lt;/code>, the wfx
transitions to the next stage automatically while in case of &lt;code>wfx.workflow.dau.phased&lt;/code>, wfx waits for external input,
e.g., from an operator.&lt;/p>
&lt;h3 id="wfxworkflowdaudirect">wfx.workflow.dau.direct&lt;/h3>
&lt;p>The
&lt;a href="https://siemens.github.io/wfx/wfx.workflow.dau.direct.yml">&lt;code>wfx.workflow.dau.direct&lt;/code>&lt;/a> workflow consists of the two stages &lt;em>installation&lt;/em> and
&lt;em>activation&lt;/em>: During the installation stage, the device downloads and installs the update artifacts. In the subsequent
activation stage, the device takes action to activate the update. Depending on the type of artifact(s), this activation
action varies as, e.g., container images need a different activation action than firmware disk images (see below Section
&lt;a href="#job-definition">Job Definition&lt;/a>).&lt;/p>
&lt;p>The graph representation of the &lt;code>wfx.workflow.dau.direct&lt;/code> workflow is depicted in the following figure, omitting state
descriptions and transition eligibles for legibility:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span> INSTALL ────────┐
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├─◀─┐ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▼ │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>INSTALLING ──────┤
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▼ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>INSTALLED │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▼ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ACTIVATE ───────┤
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├─◀─┐ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▼ │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ACTIVATING ──────┤
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▼ ▼
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ACTIVATED TERMINATED
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="wfxworkflowdauphased">wfx.workflow.dau.phased&lt;/h3>
&lt;p>The
&lt;a href="https://siemens.github.io/wfx/wfx.workflow.dau.phased.yml">&lt;code>wfx.workflow.dau.phased&lt;/code>&lt;/a> workflow is similar to the &lt;code>wfx.workflow.dau.direct&lt;/code>
workflow but starts in the &lt;code>CREATED&lt;/code> state instead and introduces another &lt;em>download&lt;/em> stage in between installation and
activation to decouple artifact download from its installation: The initial state &lt;code>CREATED&lt;/code> serves as an anchor to
actually kickstart the external input-driven CFC scheme. With the additional download stage, a maintenance window could
be realized prior to which the artifact is downloaded but only installed when wfx commands the begin of the installation
phase (e.g. a certain time window has been reached).&lt;/p>
&lt;p>Consequently ― and in contrast to the &lt;code>wfx.workflow.dau.direct&lt;/code> ― wfx doesn&amp;rsquo;t transition to the next stage automatically
but waits for external input to do so, e.g., by an operator.&lt;/p>
&lt;p>The graph representation of the &lt;code>wfx.workflow.dau.phased&lt;/code> workflow is depicted in the following figure, again omitting
state descriptions and transition eligibles for legibility:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span> CREATED
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▼
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DOWNLOAD ───────┐
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├─◀─┐ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▼ │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>DOWNLOADING ──────┤
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▼ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DOWNLOADED │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▼ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> INSTALL ────────┤
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├─◀─┐ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▼ │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> INSTALLING ──────┤
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▼ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> INSTALLED │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▼ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ACTIVATE ───────┤
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├─◀─┐ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▼ │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ACTIVATING ──────┤
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▼ ▼
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ACTIVATED TERMINATED
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="job-definition">Job Definition&lt;/h2>
&lt;p>As being general purpose, wfx doesn&amp;rsquo;t impose a particular schema on the information conveyed to the device describing
its action(s) to perform, except that it&amp;rsquo;s in JSON format. Instead, the job definition is a contract between the
operator creating jobs, each possibly following a different workflow, and the client(s) executing those jobs in
lock-step with the wfx. The same is true for the type of update artifacts that are specified in the job definition and
that can be of any form such as, e.g., firmware disk images, container images, or configurations: The operator has to
has to take care to only assign jobs to devices that are known to be able to digest this type of update artifact. wfx
doesn&amp;rsquo;t exercise any checks on compatibility.&lt;/p>
&lt;p>An exemplary job for a device called &lt;code>example&lt;/code> (utilizing the
&lt;a href="https://siemens.github.io/wfx/docs/configuration/#file-server">built-in simple file
server&lt;/a>) may be created as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a61717;background-color:#e3d2d2">cat&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">&amp;lt;&amp;lt;EOF&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">|&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">wfxctl&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">job&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">create&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">--client-id&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">example&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">--workflow&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">wfx.workflow.dau.direct&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">-&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000080">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;1.0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000080">&amp;#34;type&amp;#34;&lt;/span>: [&lt;span style="color:#d14">&amp;#34;firmware&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000080">&amp;#34;artifacts&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000080">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;Example Device Firmware Artifact&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000080">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;1.1&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000080">&amp;#34;uri&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;http://wfx.host:8080/download/example_artifact.swu&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a61717;background-color:#e3d2d2">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>type&lt;/code> list field allows to label update jobs. Labels may be used by wfx&amp;rsquo;s on-device counterpart to determine the
activation action(s) to execute since, e.g., container images need a different activation action than firmware disk
images or a configuration change.&lt;/p>
&lt;p>In the preceding example, the presence of the &lt;code>firmware&lt;/code> label may be used to instruct the on-device client to
test-reboot into the new firmware.&lt;/p>
&lt;p>Since wfx isn&amp;rsquo;t concerned with the job definition except for conveying it to the device, it can be adapted to specific
needs by feeding in a different job definition into the wfx on job creation and having a client on the device that can
digest it.&lt;/p></description></item></channel></rss>